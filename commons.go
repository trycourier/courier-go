// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	alreadyExistsFieldMessage = big.NewInt(1 << 0)
)

type AlreadyExists struct {
	// A message describing the error that occurred.
	Message string `json:"message" url:"message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AlreadyExists) GetMessage() string {
	if a == nil {
		return ""
	}
	return a.Message
}

func (a *AlreadyExists) Type() string {
	return a.type_
}

func (a *AlreadyExists) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AlreadyExists) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AlreadyExists) SetMessage(message string) {
	a.Message = message
	a.require(alreadyExistsFieldMessage)
}

func (a *AlreadyExists) UnmarshalJSON(data []byte) error {
	type embed AlreadyExists
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AlreadyExists(unmarshaler.embed)
	if unmarshaler.Type != "invalid_request_error" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "invalid_request_error", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AlreadyExists) MarshalJSON() ([]byte, error) {
	type embed AlreadyExists
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "invalid_request_error",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AlreadyExists) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	badRequestFieldMessage = big.NewInt(1 << 0)
)

type BadRequest struct {
	// A message describing the error that occurred.
	Message string `json:"message" url:"message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BadRequest) GetMessage() string {
	if b == nil {
		return ""
	}
	return b.Message
}

func (b *BadRequest) Type() string {
	return b.type_
}

func (b *BadRequest) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BadRequest) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BadRequest) SetMessage(message string) {
	b.Message = message
	b.require(badRequestFieldMessage)
}

func (b *BadRequest) UnmarshalJSON(data []byte) error {
	type embed BadRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BadRequest(unmarshaler.embed)
	if unmarshaler.Type != "invalid_request_error" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", b, "invalid_request_error", unmarshaler.Type)
	}
	b.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *b, "type")
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BadRequest) MarshalJSON() ([]byte, error) {
	type embed BadRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*b),
		Type:  "invalid_request_error",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BadRequest) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	baseErrorFieldMessage = big.NewInt(1 << 0)
)

type BaseError struct {
	// A message describing the error that occurred.
	Message string `json:"message" url:"message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BaseError) GetMessage() string {
	if b == nil {
		return ""
	}
	return b.Message
}

func (b *BaseError) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BaseError) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseError) SetMessage(message string) {
	b.Message = message
	b.require(baseErrorFieldMessage)
}

func (b *BaseError) UnmarshalJSON(data []byte) error {
	type unmarshaler BaseError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BaseError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BaseError) MarshalJSON() ([]byte, error) {
	type embed BaseError
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BaseError) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	baseTemplateTenantAssociationFieldId          = big.NewInt(1 << 0)
	baseTemplateTenantAssociationFieldCreatedAt   = big.NewInt(1 << 1)
	baseTemplateTenantAssociationFieldUpdatedAt   = big.NewInt(1 << 2)
	baseTemplateTenantAssociationFieldPublishedAt = big.NewInt(1 << 3)
	baseTemplateTenantAssociationFieldVersion     = big.NewInt(1 << 4)
)

type BaseTemplateTenantAssociation struct {
	// The template's id
	Id string `json:"id" url:"id"`
	// The timestamp at which the template was created
	CreatedAt string `json:"created_at" url:"created_at"`
	// The timestamp at which the template was last updated
	UpdatedAt string `json:"updated_at" url:"updated_at"`
	// The timestamp at which the template was published
	PublishedAt string `json:"published_at" url:"published_at"`
	// The version of the template
	Version string `json:"version" url:"version"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BaseTemplateTenantAssociation) GetId() string {
	if b == nil {
		return ""
	}
	return b.Id
}

func (b *BaseTemplateTenantAssociation) GetCreatedAt() string {
	if b == nil {
		return ""
	}
	return b.CreatedAt
}

func (b *BaseTemplateTenantAssociation) GetUpdatedAt() string {
	if b == nil {
		return ""
	}
	return b.UpdatedAt
}

func (b *BaseTemplateTenantAssociation) GetPublishedAt() string {
	if b == nil {
		return ""
	}
	return b.PublishedAt
}

func (b *BaseTemplateTenantAssociation) GetVersion() string {
	if b == nil {
		return ""
	}
	return b.Version
}

func (b *BaseTemplateTenantAssociation) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BaseTemplateTenantAssociation) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseTemplateTenantAssociation) SetId(id string) {
	b.Id = id
	b.require(baseTemplateTenantAssociationFieldId)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseTemplateTenantAssociation) SetCreatedAt(createdAt string) {
	b.CreatedAt = createdAt
	b.require(baseTemplateTenantAssociationFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseTemplateTenantAssociation) SetUpdatedAt(updatedAt string) {
	b.UpdatedAt = updatedAt
	b.require(baseTemplateTenantAssociationFieldUpdatedAt)
}

// SetPublishedAt sets the PublishedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseTemplateTenantAssociation) SetPublishedAt(publishedAt string) {
	b.PublishedAt = publishedAt
	b.require(baseTemplateTenantAssociationFieldPublishedAt)
}

// SetVersion sets the Version field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseTemplateTenantAssociation) SetVersion(version string) {
	b.Version = version
	b.require(baseTemplateTenantAssociationFieldVersion)
}

func (b *BaseTemplateTenantAssociation) UnmarshalJSON(data []byte) error {
	type unmarshaler BaseTemplateTenantAssociation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BaseTemplateTenantAssociation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BaseTemplateTenantAssociation) MarshalJSON() ([]byte, error) {
	type embed BaseTemplateTenantAssociation
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BaseTemplateTenantAssociation) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type ChannelClassification string

const (
	ChannelClassificationDirectMessage ChannelClassification = "direct_message"
	ChannelClassificationEmail         ChannelClassification = "email"
	ChannelClassificationPush          ChannelClassification = "push"
	ChannelClassificationSms           ChannelClassification = "sms"
	ChannelClassificationWebhook       ChannelClassification = "webhook"
	ChannelClassificationInbox         ChannelClassification = "inbox"
)

func NewChannelClassificationFromString(s string) (ChannelClassification, error) {
	switch s {
	case "direct_message":
		return ChannelClassificationDirectMessage, nil
	case "email":
		return ChannelClassificationEmail, nil
	case "push":
		return ChannelClassificationPush, nil
	case "sms":
		return ChannelClassificationSms, nil
	case "webhook":
		return ChannelClassificationWebhook, nil
	case "inbox":
		return ChannelClassificationInbox, nil
	}
	var t ChannelClassification
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ChannelClassification) Ptr() *ChannelClassification {
	return &c
}

var (
	channelPreferenceFieldChannel = big.NewInt(1 << 0)
)

type ChannelPreference struct {
	Channel ChannelClassification `json:"channel" url:"channel"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ChannelPreference) GetChannel() ChannelClassification {
	if c == nil {
		return ""
	}
	return c.Channel
}

func (c *ChannelPreference) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChannelPreference) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetChannel sets the Channel field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ChannelPreference) SetChannel(channel ChannelClassification) {
	c.Channel = channel
	c.require(channelPreferenceFieldChannel)
}

func (c *ChannelPreference) UnmarshalJSON(data []byte) error {
	type unmarshaler ChannelPreference
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChannelPreference(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChannelPreference) MarshalJSON() ([]byte, error) {
	type embed ChannelPreference
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *ChannelPreference) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	conflictFieldMessage = big.NewInt(1 << 0)
)

type Conflict struct {
	// A message describing the error that occurred.
	Message string `json:"message" url:"message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Conflict) GetMessage() string {
	if c == nil {
		return ""
	}
	return c.Message
}

func (c *Conflict) Type() string {
	return c.type_
}

func (c *Conflict) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Conflict) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Conflict) SetMessage(message string) {
	c.Message = message
	c.require(conflictFieldMessage)
}

func (c *Conflict) UnmarshalJSON(data []byte) error {
	type embed Conflict
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = Conflict(unmarshaler.embed)
	if unmarshaler.Type != "invalid_request_error" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "invalid_request_error", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Conflict) MarshalJSON() ([]byte, error) {
	type embed Conflict
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "invalid_request_error",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *Conflict) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	emailFieldFooter = big.NewInt(1 << 0)
	emailFieldHeader = big.NewInt(1 << 1)
)

type Email struct {
	Footer interface{} `json:"footer" url:"footer"`
	Header interface{} `json:"header" url:"header"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *Email) GetFooter() interface{} {
	if e == nil {
		return nil
	}
	return e.Footer
}

func (e *Email) GetHeader() interface{} {
	if e == nil {
		return nil
	}
	return e.Header
}

func (e *Email) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Email) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetFooter sets the Footer field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *Email) SetFooter(footer interface{}) {
	e.Footer = footer
	e.require(emailFieldFooter)
}

// SetHeader sets the Header field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *Email) SetHeader(header interface{}) {
	e.Header = header
	e.require(emailFieldHeader)
}

func (e *Email) UnmarshalJSON(data []byte) error {
	type unmarshaler Email
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Email(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *Email) MarshalJSON() ([]byte, error) {
	type embed Email
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *Email) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	listTemplateTenantAssociationFieldId          = big.NewInt(1 << 0)
	listTemplateTenantAssociationFieldCreatedAt   = big.NewInt(1 << 1)
	listTemplateTenantAssociationFieldUpdatedAt   = big.NewInt(1 << 2)
	listTemplateTenantAssociationFieldPublishedAt = big.NewInt(1 << 3)
	listTemplateTenantAssociationFieldVersion     = big.NewInt(1 << 4)
	listTemplateTenantAssociationFieldData        = big.NewInt(1 << 5)
)

type ListTemplateTenantAssociation struct {
	// The template's id
	Id string `json:"id" url:"id"`
	// The timestamp at which the template was created
	CreatedAt string `json:"created_at" url:"created_at"`
	// The timestamp at which the template was last updated
	UpdatedAt string `json:"updated_at" url:"updated_at"`
	// The timestamp at which the template was published
	PublishedAt string `json:"published_at" url:"published_at"`
	// The version of the template
	Version string                       `json:"version" url:"version"`
	Data    *TenantTemplateDataNoContent `json:"data" url:"data"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListTemplateTenantAssociation) GetId() string {
	if l == nil {
		return ""
	}
	return l.Id
}

func (l *ListTemplateTenantAssociation) GetCreatedAt() string {
	if l == nil {
		return ""
	}
	return l.CreatedAt
}

func (l *ListTemplateTenantAssociation) GetUpdatedAt() string {
	if l == nil {
		return ""
	}
	return l.UpdatedAt
}

func (l *ListTemplateTenantAssociation) GetPublishedAt() string {
	if l == nil {
		return ""
	}
	return l.PublishedAt
}

func (l *ListTemplateTenantAssociation) GetVersion() string {
	if l == nil {
		return ""
	}
	return l.Version
}

func (l *ListTemplateTenantAssociation) GetData() *TenantTemplateDataNoContent {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListTemplateTenantAssociation) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListTemplateTenantAssociation) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplateTenantAssociation) SetId(id string) {
	l.Id = id
	l.require(listTemplateTenantAssociationFieldId)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplateTenantAssociation) SetCreatedAt(createdAt string) {
	l.CreatedAt = createdAt
	l.require(listTemplateTenantAssociationFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplateTenantAssociation) SetUpdatedAt(updatedAt string) {
	l.UpdatedAt = updatedAt
	l.require(listTemplateTenantAssociationFieldUpdatedAt)
}

// SetPublishedAt sets the PublishedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplateTenantAssociation) SetPublishedAt(publishedAt string) {
	l.PublishedAt = publishedAt
	l.require(listTemplateTenantAssociationFieldPublishedAt)
}

// SetVersion sets the Version field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplateTenantAssociation) SetVersion(version string) {
	l.Version = version
	l.require(listTemplateTenantAssociationFieldVersion)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplateTenantAssociation) SetData(data *TenantTemplateDataNoContent) {
	l.Data = data
	l.require(listTemplateTenantAssociationFieldData)
}

func (l *ListTemplateTenantAssociation) UnmarshalJSON(data []byte) error {
	type unmarshaler ListTemplateTenantAssociation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListTemplateTenantAssociation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListTemplateTenantAssociation) MarshalJSON() ([]byte, error) {
	type embed ListTemplateTenantAssociation
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListTemplateTenantAssociation) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	messageNotFoundFieldMessage = big.NewInt(1 << 0)
)

type MessageNotFound struct {
	// A message describing the error that occurred.
	Message string `json:"message" url:"message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MessageNotFound) GetMessage() string {
	if m == nil {
		return ""
	}
	return m.Message
}

func (m *MessageNotFound) Type() string {
	return m.type_
}

func (m *MessageNotFound) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MessageNotFound) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageNotFound) SetMessage(message string) {
	m.Message = message
	m.require(messageNotFoundFieldMessage)
}

func (m *MessageNotFound) UnmarshalJSON(data []byte) error {
	type embed MessageNotFound
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MessageNotFound(unmarshaler.embed)
	if unmarshaler.Type != "invalid_request_error" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", m, "invalid_request_error", unmarshaler.Type)
	}
	m.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *m, "type")
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MessageNotFound) MarshalJSON() ([]byte, error) {
	type embed MessageNotFound
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*m),
		Type:  "invalid_request_error",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MessageNotFound) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

var (
	notFoundFieldMessage = big.NewInt(1 << 0)
)

type NotFound struct {
	// A message describing the error that occurred.
	Message string `json:"message" url:"message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotFound) GetMessage() string {
	if n == nil {
		return ""
	}
	return n.Message
}

func (n *NotFound) Type() string {
	return n.type_
}

func (n *NotFound) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotFound) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotFound) SetMessage(message string) {
	n.Message = message
	n.require(notFoundFieldMessage)
}

func (n *NotFound) UnmarshalJSON(data []byte) error {
	type embed NotFound
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NotFound(unmarshaler.embed)
	if unmarshaler.Type != "invalid_request_error" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "invalid_request_error", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotFound) MarshalJSON() ([]byte, error) {
	type embed NotFound
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "invalid_request_error",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NotFound) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

var (
	notificationPreferenceDetailsFieldStatus             = big.NewInt(1 << 0)
	notificationPreferenceDetailsFieldRules              = big.NewInt(1 << 1)
	notificationPreferenceDetailsFieldChannelPreferences = big.NewInt(1 << 2)
)

type NotificationPreferenceDetails struct {
	Status             PreferenceStatus     `json:"status" url:"status"`
	Rules              []*Rule              `json:"rules,omitempty" url:"rules,omitempty"`
	ChannelPreferences []*ChannelPreference `json:"channel_preferences,omitempty" url:"channel_preferences,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationPreferenceDetails) GetStatus() PreferenceStatus {
	if n == nil {
		return ""
	}
	return n.Status
}

func (n *NotificationPreferenceDetails) GetRules() []*Rule {
	if n == nil {
		return nil
	}
	return n.Rules
}

func (n *NotificationPreferenceDetails) GetChannelPreferences() []*ChannelPreference {
	if n == nil {
		return nil
	}
	return n.ChannelPreferences
}

func (n *NotificationPreferenceDetails) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationPreferenceDetails) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetStatus sets the Status field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationPreferenceDetails) SetStatus(status PreferenceStatus) {
	n.Status = status
	n.require(notificationPreferenceDetailsFieldStatus)
}

// SetRules sets the Rules field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationPreferenceDetails) SetRules(rules []*Rule) {
	n.Rules = rules
	n.require(notificationPreferenceDetailsFieldRules)
}

// SetChannelPreferences sets the ChannelPreferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationPreferenceDetails) SetChannelPreferences(channelPreferences []*ChannelPreference) {
	n.ChannelPreferences = channelPreferences
	n.require(notificationPreferenceDetailsFieldChannelPreferences)
}

func (n *NotificationPreferenceDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationPreferenceDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationPreferenceDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationPreferenceDetails) MarshalJSON() ([]byte, error) {
	type embed NotificationPreferenceDetails
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NotificationPreferenceDetails) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NotificationPreferences = map[string]*NotificationPreferenceDetails

var (
	pagingFieldCursor = big.NewInt(1 << 0)
	pagingFieldMore   = big.NewInt(1 << 1)
)

type Paging struct {
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	More   bool    `json:"more" url:"more"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *Paging) GetCursor() *string {
	if p == nil {
		return nil
	}
	return p.Cursor
}

func (p *Paging) GetMore() bool {
	if p == nil {
		return false
	}
	return p.More
}

func (p *Paging) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Paging) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *Paging) SetCursor(cursor *string) {
	p.Cursor = cursor
	p.require(pagingFieldCursor)
}

// SetMore sets the More field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *Paging) SetMore(more bool) {
	p.More = more
	p.require(pagingFieldMore)
}

func (p *Paging) UnmarshalJSON(data []byte) error {
	type unmarshaler Paging
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Paging(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *Paging) MarshalJSON() ([]byte, error) {
	type embed Paging
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *Paging) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	paymentRequiredFieldMessage = big.NewInt(1 << 0)
)

type PaymentRequired struct {
	// A message describing the error that occurred.
	Message string `json:"message" url:"message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentRequired) GetMessage() string {
	if p == nil {
		return ""
	}
	return p.Message
}

func (p *PaymentRequired) Type() string {
	return p.type_
}

func (p *PaymentRequired) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentRequired) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaymentRequired) SetMessage(message string) {
	p.Message = message
	p.require(paymentRequiredFieldMessage)
}

func (p *PaymentRequired) UnmarshalJSON(data []byte) error {
	type embed PaymentRequired
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PaymentRequired(unmarshaler.embed)
	if unmarshaler.Type != "authorization_error" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "authorization_error", unmarshaler.Type)
	}
	p.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *p, "type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentRequired) MarshalJSON() ([]byte, error) {
	type embed PaymentRequired
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
		Type:  "authorization_error",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PaymentRequired) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PreferenceStatus string

const (
	PreferenceStatusOptedIn  PreferenceStatus = "OPTED_IN"
	PreferenceStatusOptedOut PreferenceStatus = "OPTED_OUT"
	PreferenceStatusRequired PreferenceStatus = "REQUIRED"
)

func NewPreferenceStatusFromString(s string) (PreferenceStatus, error) {
	switch s {
	case "OPTED_IN":
		return PreferenceStatusOptedIn, nil
	case "OPTED_OUT":
		return PreferenceStatusOptedOut, nil
	case "REQUIRED":
		return PreferenceStatusRequired, nil
	}
	var t PreferenceStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PreferenceStatus) Ptr() *PreferenceStatus {
	return &p
}

var (
	recipientPreferencesFieldCategories    = big.NewInt(1 << 0)
	recipientPreferencesFieldNotifications = big.NewInt(1 << 1)
)

type RecipientPreferences struct {
	Categories    *NotificationPreferences `json:"categories,omitempty" url:"categories,omitempty"`
	Notifications *NotificationPreferences `json:"notifications,omitempty" url:"notifications,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RecipientPreferences) GetCategories() *NotificationPreferences {
	if r == nil {
		return nil
	}
	return r.Categories
}

func (r *RecipientPreferences) GetNotifications() *NotificationPreferences {
	if r == nil {
		return nil
	}
	return r.Notifications
}

func (r *RecipientPreferences) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RecipientPreferences) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetCategories sets the Categories field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RecipientPreferences) SetCategories(categories *NotificationPreferences) {
	r.Categories = categories
	r.require(recipientPreferencesFieldCategories)
}

// SetNotifications sets the Notifications field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RecipientPreferences) SetNotifications(notifications *NotificationPreferences) {
	r.Notifications = notifications
	r.require(recipientPreferencesFieldNotifications)
}

func (r *RecipientPreferences) UnmarshalJSON(data []byte) error {
	type unmarshaler RecipientPreferences
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RecipientPreferences(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RecipientPreferences) MarshalJSON() ([]byte, error) {
	type embed RecipientPreferences
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *RecipientPreferences) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

var (
	ruleFieldStart = big.NewInt(1 << 0)
	ruleFieldUntil = big.NewInt(1 << 1)
)

type Rule struct {
	Start *string `json:"start,omitempty" url:"start,omitempty"`
	Until string  `json:"until" url:"until"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *Rule) GetStart() *string {
	if r == nil {
		return nil
	}
	return r.Start
}

func (r *Rule) GetUntil() string {
	if r == nil {
		return ""
	}
	return r.Until
}

func (r *Rule) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *Rule) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetStart sets the Start field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *Rule) SetStart(start *string) {
	r.Start = start
	r.require(ruleFieldStart)
}

// SetUntil sets the Until field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *Rule) SetUntil(until string) {
	r.Until = until
	r.require(ruleFieldUntil)
}

func (r *Rule) UnmarshalJSON(data []byte) error {
	type unmarshaler Rule
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Rule(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *Rule) MarshalJSON() ([]byte, error) {
	type embed Rule
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *Rule) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

var (
	singleTemplateTenantAssociationFieldId          = big.NewInt(1 << 0)
	singleTemplateTenantAssociationFieldCreatedAt   = big.NewInt(1 << 1)
	singleTemplateTenantAssociationFieldUpdatedAt   = big.NewInt(1 << 2)
	singleTemplateTenantAssociationFieldPublishedAt = big.NewInt(1 << 3)
	singleTemplateTenantAssociationFieldVersion     = big.NewInt(1 << 4)
	singleTemplateTenantAssociationFieldData        = big.NewInt(1 << 5)
)

type SingleTemplateTenantAssociation struct {
	// The template's id
	Id string `json:"id" url:"id"`
	// The timestamp at which the template was created
	CreatedAt string `json:"created_at" url:"created_at"`
	// The timestamp at which the template was last updated
	UpdatedAt string `json:"updated_at" url:"updated_at"`
	// The timestamp at which the template was published
	PublishedAt string `json:"published_at" url:"published_at"`
	// The version of the template
	Version string              `json:"version" url:"version"`
	Data    *TenantTemplateData `json:"data" url:"data"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SingleTemplateTenantAssociation) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *SingleTemplateTenantAssociation) GetCreatedAt() string {
	if s == nil {
		return ""
	}
	return s.CreatedAt
}

func (s *SingleTemplateTenantAssociation) GetUpdatedAt() string {
	if s == nil {
		return ""
	}
	return s.UpdatedAt
}

func (s *SingleTemplateTenantAssociation) GetPublishedAt() string {
	if s == nil {
		return ""
	}
	return s.PublishedAt
}

func (s *SingleTemplateTenantAssociation) GetVersion() string {
	if s == nil {
		return ""
	}
	return s.Version
}

func (s *SingleTemplateTenantAssociation) GetData() *TenantTemplateData {
	if s == nil {
		return nil
	}
	return s.Data
}

func (s *SingleTemplateTenantAssociation) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SingleTemplateTenantAssociation) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SingleTemplateTenantAssociation) SetId(id string) {
	s.Id = id
	s.require(singleTemplateTenantAssociationFieldId)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SingleTemplateTenantAssociation) SetCreatedAt(createdAt string) {
	s.CreatedAt = createdAt
	s.require(singleTemplateTenantAssociationFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SingleTemplateTenantAssociation) SetUpdatedAt(updatedAt string) {
	s.UpdatedAt = updatedAt
	s.require(singleTemplateTenantAssociationFieldUpdatedAt)
}

// SetPublishedAt sets the PublishedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SingleTemplateTenantAssociation) SetPublishedAt(publishedAt string) {
	s.PublishedAt = publishedAt
	s.require(singleTemplateTenantAssociationFieldPublishedAt)
}

// SetVersion sets the Version field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SingleTemplateTenantAssociation) SetVersion(version string) {
	s.Version = version
	s.require(singleTemplateTenantAssociationFieldVersion)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SingleTemplateTenantAssociation) SetData(data *TenantTemplateData) {
	s.Data = data
	s.require(singleTemplateTenantAssociationFieldData)
}

func (s *SingleTemplateTenantAssociation) UnmarshalJSON(data []byte) error {
	type unmarshaler SingleTemplateTenantAssociation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SingleTemplateTenantAssociation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SingleTemplateTenantAssociation) MarshalJSON() ([]byte, error) {
	type embed SingleTemplateTenantAssociation
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SingleTemplateTenantAssociation) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The template's data containing it's routing configs and Elemental content
var (
	tenantTemplateDataFieldRouting = big.NewInt(1 << 0)
	tenantTemplateDataFieldContent = big.NewInt(1 << 1)
)

type TenantTemplateData struct {
	Routing *MessageRouting   `json:"routing" url:"routing"`
	Content *ElementalContent `json:"content" url:"content"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantTemplateData) GetRouting() *MessageRouting {
	if t == nil {
		return nil
	}
	return t.Routing
}

func (t *TenantTemplateData) GetContent() *ElementalContent {
	if t == nil {
		return nil
	}
	return t.Content
}

func (t *TenantTemplateData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantTemplateData) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetRouting sets the Routing field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TenantTemplateData) SetRouting(routing *MessageRouting) {
	t.Routing = routing
	t.require(tenantTemplateDataFieldRouting)
}

// SetContent sets the Content field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TenantTemplateData) SetContent(content *ElementalContent) {
	t.Content = content
	t.require(tenantTemplateDataFieldContent)
}

func (t *TenantTemplateData) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantTemplateData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantTemplateData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantTemplateData) MarshalJSON() ([]byte, error) {
	type embed TenantTemplateData
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TenantTemplateData) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The template's data containing it's routing configs
var (
	tenantTemplateDataNoContentFieldRouting = big.NewInt(1 << 0)
)

type TenantTemplateDataNoContent struct {
	Routing *MessageRouting `json:"routing" url:"routing"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantTemplateDataNoContent) GetRouting() *MessageRouting {
	if t == nil {
		return nil
	}
	return t.Routing
}

func (t *TenantTemplateDataNoContent) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantTemplateDataNoContent) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetRouting sets the Routing field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TenantTemplateDataNoContent) SetRouting(routing *MessageRouting) {
	t.Routing = routing
	t.require(tenantTemplateDataNoContentFieldRouting)
}

func (t *TenantTemplateDataNoContent) UnmarshalJSON(data []byte) error {
	type unmarshaler TenantTemplateDataNoContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TenantTemplateDataNoContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantTemplateDataNoContent) MarshalJSON() ([]byte, error) {
	type embed TenantTemplateDataNoContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TenantTemplateDataNoContent) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	userTenantAssociationFieldUserId   = big.NewInt(1 << 0)
	userTenantAssociationFieldType     = big.NewInt(1 << 1)
	userTenantAssociationFieldTenantId = big.NewInt(1 << 2)
	userTenantAssociationFieldProfile  = big.NewInt(1 << 3)
)

type UserTenantAssociation struct {
	// User ID for the assocation between tenant and user
	UserId *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	Type   *string `json:"type,omitempty" url:"type,omitempty"`
	// Tenant ID for the assocation between tenant and user
	TenantId string `json:"tenant_id" url:"tenant_id"`
	// Additional metadata to be applied to a user profile when used in a tenant context
	Profile map[string]interface{} `json:"profile,omitempty" url:"profile,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserTenantAssociation) GetUserId() *string {
	if u == nil {
		return nil
	}
	return u.UserId
}

func (u *UserTenantAssociation) GetTenantId() string {
	if u == nil {
		return ""
	}
	return u.TenantId
}

func (u *UserTenantAssociation) GetProfile() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Profile
}

func (u *UserTenantAssociation) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserTenantAssociation) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetUserId sets the UserId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserTenantAssociation) SetUserId(userId *string) {
	u.UserId = userId
	u.require(userTenantAssociationFieldUserId)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserTenantAssociation) SetType(type_ *string) {
	u.Type = type_
	u.require(userTenantAssociationFieldType)
}

// SetTenantId sets the TenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserTenantAssociation) SetTenantId(tenantId string) {
	u.TenantId = tenantId
	u.require(userTenantAssociationFieldTenantId)
}

// SetProfile sets the Profile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserTenantAssociation) SetProfile(profile map[string]interface{}) {
	u.Profile = profile
	u.require(userTenantAssociationFieldProfile)
}

func (u *UserTenantAssociation) UnmarshalJSON(data []byte) error {
	type unmarshaler UserTenantAssociation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserTenantAssociation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserTenantAssociation) MarshalJSON() ([]byte, error) {
	type embed UserTenantAssociation
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UserTenantAssociation) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
