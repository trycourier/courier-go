// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	tenantCreateOrReplaceParamsFieldName               = big.NewInt(1 << 0)
	tenantCreateOrReplaceParamsFieldParentTenantId     = big.NewInt(1 << 1)
	tenantCreateOrReplaceParamsFieldDefaultPreferences = big.NewInt(1 << 2)
	tenantCreateOrReplaceParamsFieldProperties         = big.NewInt(1 << 3)
	tenantCreateOrReplaceParamsFieldUserProfile        = big.NewInt(1 << 4)
	tenantCreateOrReplaceParamsFieldBrandId            = big.NewInt(1 << 5)
)

type TenantCreateOrReplaceParams struct {
	// Name of the tenant.
	Name string `json:"name" url:"-"`
	// Tenant's parent id (if any).
	ParentTenantId *string `json:"parent_tenant_id,omitempty" url:"-"`
	// Defines the preferences used for the tenant when the user hasn't specified their own.
	DefaultPreferences *DefaultPreferences `json:"default_preferences,omitempty" url:"-"`
	// Arbitrary properties accessible to a template.
	Properties map[string]interface{} `json:"properties,omitempty" url:"-"`
	// A user profile object merged with user profile on send.
	UserProfile map[string]interface{} `json:"user_profile,omitempty" url:"-"`
	// Brand to be used for the account when one is not specified by the send call.
	BrandId *string `json:"brand_id,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (t *TenantCreateOrReplaceParams) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TenantCreateOrReplaceParams) SetName(name string) {
	t.Name = name
	t.require(tenantCreateOrReplaceParamsFieldName)
}

// SetParentTenantId sets the ParentTenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TenantCreateOrReplaceParams) SetParentTenantId(parentTenantId *string) {
	t.ParentTenantId = parentTenantId
	t.require(tenantCreateOrReplaceParamsFieldParentTenantId)
}

// SetDefaultPreferences sets the DefaultPreferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TenantCreateOrReplaceParams) SetDefaultPreferences(defaultPreferences *DefaultPreferences) {
	t.DefaultPreferences = defaultPreferences
	t.require(tenantCreateOrReplaceParamsFieldDefaultPreferences)
}

// SetProperties sets the Properties field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TenantCreateOrReplaceParams) SetProperties(properties map[string]interface{}) {
	t.Properties = properties
	t.require(tenantCreateOrReplaceParamsFieldProperties)
}

// SetUserProfile sets the UserProfile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TenantCreateOrReplaceParams) SetUserProfile(userProfile map[string]interface{}) {
	t.UserProfile = userProfile
	t.require(tenantCreateOrReplaceParamsFieldUserProfile)
}

// SetBrandId sets the BrandId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TenantCreateOrReplaceParams) SetBrandId(brandId *string) {
	t.BrandId = brandId
	t.require(tenantCreateOrReplaceParamsFieldBrandId)
}

var (
	getTemplateListByTenantParamsFieldLimit  = big.NewInt(1 << 0)
	getTemplateListByTenantParamsFieldCursor = big.NewInt(1 << 1)
)

type GetTemplateListByTenantParams struct {
	// The number of templates to return (defaults to 20, maximum value of 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Continue the pagination with the next cursor
	Cursor *string `json:"-" url:"cursor,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetTemplateListByTenantParams) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetLimit sets the Limit field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetTemplateListByTenantParams) SetLimit(limit *int) {
	g.Limit = limit
	g.require(getTemplateListByTenantParamsFieldLimit)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetTemplateListByTenantParams) SetCursor(cursor *string) {
	g.Cursor = cursor
	g.require(getTemplateListByTenantParamsFieldCursor)
}

var (
	listUsersForTenantParamsFieldLimit  = big.NewInt(1 << 0)
	listUsersForTenantParamsFieldCursor = big.NewInt(1 << 1)
)

type ListUsersForTenantParams struct {
	// The number of accounts to return
	// (defaults to 20, maximum value of 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Continue the pagination with the next cursor
	Cursor *string `json:"-" url:"cursor,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (l *ListUsersForTenantParams) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetLimit sets the Limit field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListUsersForTenantParams) SetLimit(limit *int) {
	l.Limit = limit
	l.require(listUsersForTenantParamsFieldLimit)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListUsersForTenantParams) SetCursor(cursor *string) {
	l.Cursor = cursor
	l.require(listUsersForTenantParamsFieldCursor)
}

var (
	listTenantParamsFieldParentTenantId = big.NewInt(1 << 0)
	listTenantParamsFieldLimit          = big.NewInt(1 << 1)
	listTenantParamsFieldCursor         = big.NewInt(1 << 2)
)

type ListTenantParams struct {
	// Filter the list of tenants by parent_id
	ParentTenantId *string `json:"-" url:"parent_tenant_id,omitempty"`
	// The number of tenants to return
	// (defaults to 20, maximum value of 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Continue the pagination with the next cursor
	Cursor *string `json:"-" url:"cursor,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (l *ListTenantParams) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetParentTenantId sets the ParentTenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTenantParams) SetParentTenantId(parentTenantId *string) {
	l.ParentTenantId = parentTenantId
	l.require(listTenantParamsFieldParentTenantId)
}

// SetLimit sets the Limit field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTenantParams) SetLimit(limit *int) {
	l.Limit = limit
	l.require(listTenantParamsFieldLimit)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTenantParams) SetCursor(cursor *string) {
	l.Cursor = cursor
	l.require(listTenantParamsFieldCursor)
}

var (
	defaultPreferencesFieldItems = big.NewInt(1 << 0)
)

type DefaultPreferences struct {
	Items []*SubscriptionTopic `json:"items,omitempty" url:"items,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DefaultPreferences) GetItems() []*SubscriptionTopic {
	if d == nil {
		return nil
	}
	return d.Items
}

func (d *DefaultPreferences) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DefaultPreferences) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetItems sets the Items field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DefaultPreferences) SetItems(items []*SubscriptionTopic) {
	d.Items = items
	d.require(defaultPreferencesFieldItems)
}

func (d *DefaultPreferences) UnmarshalJSON(data []byte) error {
	type unmarshaler DefaultPreferences
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DefaultPreferences(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DefaultPreferences) MarshalJSON() ([]byte, error) {
	type embed DefaultPreferences
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *DefaultPreferences) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

var (
	getTemplateByTenantResponseFieldId          = big.NewInt(1 << 0)
	getTemplateByTenantResponseFieldCreatedAt   = big.NewInt(1 << 1)
	getTemplateByTenantResponseFieldUpdatedAt   = big.NewInt(1 << 2)
	getTemplateByTenantResponseFieldPublishedAt = big.NewInt(1 << 3)
	getTemplateByTenantResponseFieldVersion     = big.NewInt(1 << 4)
	getTemplateByTenantResponseFieldData        = big.NewInt(1 << 5)
)

type GetTemplateByTenantResponse struct {
	// The template's id
	Id string `json:"id" url:"id"`
	// The timestamp at which the template was created
	CreatedAt string `json:"created_at" url:"created_at"`
	// The timestamp at which the template was last updated
	UpdatedAt string `json:"updated_at" url:"updated_at"`
	// The timestamp at which the template was published
	PublishedAt string `json:"published_at" url:"published_at"`
	// The version of the template
	Version string              `json:"version" url:"version"`
	Data    *TenantTemplateData `json:"data" url:"data"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetTemplateByTenantResponse) GetId() string {
	if g == nil {
		return ""
	}
	return g.Id
}

func (g *GetTemplateByTenantResponse) GetCreatedAt() string {
	if g == nil {
		return ""
	}
	return g.CreatedAt
}

func (g *GetTemplateByTenantResponse) GetUpdatedAt() string {
	if g == nil {
		return ""
	}
	return g.UpdatedAt
}

func (g *GetTemplateByTenantResponse) GetPublishedAt() string {
	if g == nil {
		return ""
	}
	return g.PublishedAt
}

func (g *GetTemplateByTenantResponse) GetVersion() string {
	if g == nil {
		return ""
	}
	return g.Version
}

func (g *GetTemplateByTenantResponse) GetData() *TenantTemplateData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetTemplateByTenantResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetTemplateByTenantResponse) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetTemplateByTenantResponse) SetId(id string) {
	g.Id = id
	g.require(getTemplateByTenantResponseFieldId)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetTemplateByTenantResponse) SetCreatedAt(createdAt string) {
	g.CreatedAt = createdAt
	g.require(getTemplateByTenantResponseFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetTemplateByTenantResponse) SetUpdatedAt(updatedAt string) {
	g.UpdatedAt = updatedAt
	g.require(getTemplateByTenantResponseFieldUpdatedAt)
}

// SetPublishedAt sets the PublishedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetTemplateByTenantResponse) SetPublishedAt(publishedAt string) {
	g.PublishedAt = publishedAt
	g.require(getTemplateByTenantResponseFieldPublishedAt)
}

// SetVersion sets the Version field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetTemplateByTenantResponse) SetVersion(version string) {
	g.Version = version
	g.require(getTemplateByTenantResponseFieldVersion)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetTemplateByTenantResponse) SetData(data *TenantTemplateData) {
	g.Data = data
	g.require(getTemplateByTenantResponseFieldData)
}

func (g *GetTemplateByTenantResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetTemplateByTenantResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetTemplateByTenantResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetTemplateByTenantResponse) MarshalJSON() ([]byte, error) {
	type embed GetTemplateByTenantResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GetTemplateByTenantResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

var (
	listTemplatesByTenantResponseFieldItems   = big.NewInt(1 << 0)
	listTemplatesByTenantResponseFieldHasMore = big.NewInt(1 << 1)
	listTemplatesByTenantResponseFieldUrl     = big.NewInt(1 << 2)
	listTemplatesByTenantResponseFieldNextUrl = big.NewInt(1 << 3)
	listTemplatesByTenantResponseFieldCursor  = big.NewInt(1 << 4)
)

type ListTemplatesByTenantResponse struct {
	Items []*ListTemplateTenantAssociation `json:"items,omitempty" url:"items,omitempty"`
	// Set to true when there are more pages that can be retrieved.
	HasMore bool `json:"has_more" url:"has_more"`
	// A url that may be used to generate these results.
	Url string `json:"url" url:"url"`
	// A url that may be used to generate fetch the next set of results.
	// Defined only when `has_more` is set to true
	NextUrl *string `json:"next_url,omitempty" url:"next_url,omitempty"`
	// A pointer to the next page of results. Defined
	// only when `has_more` is set to true
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Always set to `list`. Represents the type of this object.

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListTemplatesByTenantResponse) GetItems() []*ListTemplateTenantAssociation {
	if l == nil {
		return nil
	}
	return l.Items
}

func (l *ListTemplatesByTenantResponse) GetHasMore() bool {
	if l == nil {
		return false
	}
	return l.HasMore
}

func (l *ListTemplatesByTenantResponse) GetUrl() string {
	if l == nil {
		return ""
	}
	return l.Url
}

func (l *ListTemplatesByTenantResponse) GetNextUrl() *string {
	if l == nil {
		return nil
	}
	return l.NextUrl
}

func (l *ListTemplatesByTenantResponse) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListTemplatesByTenantResponse) Type() string {
	return l.type_
}

func (l *ListTemplatesByTenantResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListTemplatesByTenantResponse) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetItems sets the Items field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplatesByTenantResponse) SetItems(items []*ListTemplateTenantAssociation) {
	l.Items = items
	l.require(listTemplatesByTenantResponseFieldItems)
}

// SetHasMore sets the HasMore field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplatesByTenantResponse) SetHasMore(hasMore bool) {
	l.HasMore = hasMore
	l.require(listTemplatesByTenantResponseFieldHasMore)
}

// SetUrl sets the Url field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplatesByTenantResponse) SetUrl(url string) {
	l.Url = url
	l.require(listTemplatesByTenantResponseFieldUrl)
}

// SetNextUrl sets the NextUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplatesByTenantResponse) SetNextUrl(nextUrl *string) {
	l.NextUrl = nextUrl
	l.require(listTemplatesByTenantResponseFieldNextUrl)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplatesByTenantResponse) SetCursor(cursor *string) {
	l.Cursor = cursor
	l.require(listTemplatesByTenantResponseFieldCursor)
}

func (l *ListTemplatesByTenantResponse) UnmarshalJSON(data []byte) error {
	type embed ListTemplatesByTenantResponse
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*l),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*l = ListTemplatesByTenantResponse(unmarshaler.embed)
	if unmarshaler.Type != "list" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", l, "list", unmarshaler.Type)
	}
	l.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *l, "type")
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListTemplatesByTenantResponse) MarshalJSON() ([]byte, error) {
	type embed ListTemplatesByTenantResponse
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*l),
		Type:  "list",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListTemplatesByTenantResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	listUsersForTenantResponseFieldItems   = big.NewInt(1 << 0)
	listUsersForTenantResponseFieldHasMore = big.NewInt(1 << 1)
	listUsersForTenantResponseFieldUrl     = big.NewInt(1 << 2)
	listUsersForTenantResponseFieldNextUrl = big.NewInt(1 << 3)
	listUsersForTenantResponseFieldCursor  = big.NewInt(1 << 4)
)

type ListUsersForTenantResponse struct {
	Items []*UserTenantAssociation `json:"items,omitempty" url:"items,omitempty"`
	// Set to true when there are more pages that can be retrieved.
	HasMore bool `json:"has_more" url:"has_more"`
	// A url that may be used to generate these results.
	Url string `json:"url" url:"url"`
	// A url that may be used to generate fetch the next set of results.
	// Defined only when `has_more` is set to true
	NextUrl *string `json:"next_url,omitempty" url:"next_url,omitempty"`
	// A pointer to the next page of results. Defined
	// only when `has_more` is set to true
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Always set to `list`. Represents the type of this object.

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUsersForTenantResponse) GetItems() []*UserTenantAssociation {
	if l == nil {
		return nil
	}
	return l.Items
}

func (l *ListUsersForTenantResponse) GetHasMore() bool {
	if l == nil {
		return false
	}
	return l.HasMore
}

func (l *ListUsersForTenantResponse) GetUrl() string {
	if l == nil {
		return ""
	}
	return l.Url
}

func (l *ListUsersForTenantResponse) GetNextUrl() *string {
	if l == nil {
		return nil
	}
	return l.NextUrl
}

func (l *ListUsersForTenantResponse) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListUsersForTenantResponse) Type() string {
	return l.type_
}

func (l *ListUsersForTenantResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUsersForTenantResponse) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetItems sets the Items field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListUsersForTenantResponse) SetItems(items []*UserTenantAssociation) {
	l.Items = items
	l.require(listUsersForTenantResponseFieldItems)
}

// SetHasMore sets the HasMore field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListUsersForTenantResponse) SetHasMore(hasMore bool) {
	l.HasMore = hasMore
	l.require(listUsersForTenantResponseFieldHasMore)
}

// SetUrl sets the Url field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListUsersForTenantResponse) SetUrl(url string) {
	l.Url = url
	l.require(listUsersForTenantResponseFieldUrl)
}

// SetNextUrl sets the NextUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListUsersForTenantResponse) SetNextUrl(nextUrl *string) {
	l.NextUrl = nextUrl
	l.require(listUsersForTenantResponseFieldNextUrl)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListUsersForTenantResponse) SetCursor(cursor *string) {
	l.Cursor = cursor
	l.require(listUsersForTenantResponseFieldCursor)
}

func (l *ListUsersForTenantResponse) UnmarshalJSON(data []byte) error {
	type embed ListUsersForTenantResponse
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*l),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*l = ListUsersForTenantResponse(unmarshaler.embed)
	if unmarshaler.Type != "list" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", l, "list", unmarshaler.Type)
	}
	l.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *l, "type")
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUsersForTenantResponse) MarshalJSON() ([]byte, error) {
	type embed ListUsersForTenantResponse
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*l),
		Type:  "list",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListUsersForTenantResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	subscriptionTopicFieldStatus           = big.NewInt(1 << 0)
	subscriptionTopicFieldHasCustomRouting = big.NewInt(1 << 1)
	subscriptionTopicFieldCustomRouting    = big.NewInt(1 << 2)
	subscriptionTopicFieldId               = big.NewInt(1 << 3)
)

type SubscriptionTopic struct {
	Status SubscriptionTopicStatus `json:"status" url:"status"`
	// Override channel routing with custom preferences. This will override any template prefernces that are set, but a user can still customize their preferences
	HasCustomRouting *bool `json:"has_custom_routing,omitempty" url:"has_custom_routing,omitempty"`
	// The default channels to send to this tenant when has_custom_routing is enabled
	CustomRouting []ChannelClassification `json:"custom_routing,omitempty" url:"custom_routing,omitempty"`
	// Topic ID
	Id string `json:"id" url:"id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SubscriptionTopic) GetStatus() SubscriptionTopicStatus {
	if s == nil {
		return ""
	}
	return s.Status
}

func (s *SubscriptionTopic) GetHasCustomRouting() *bool {
	if s == nil {
		return nil
	}
	return s.HasCustomRouting
}

func (s *SubscriptionTopic) GetCustomRouting() []ChannelClassification {
	if s == nil {
		return nil
	}
	return s.CustomRouting
}

func (s *SubscriptionTopic) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *SubscriptionTopic) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubscriptionTopic) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetStatus sets the Status field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SubscriptionTopic) SetStatus(status SubscriptionTopicStatus) {
	s.Status = status
	s.require(subscriptionTopicFieldStatus)
}

// SetHasCustomRouting sets the HasCustomRouting field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SubscriptionTopic) SetHasCustomRouting(hasCustomRouting *bool) {
	s.HasCustomRouting = hasCustomRouting
	s.require(subscriptionTopicFieldHasCustomRouting)
}

// SetCustomRouting sets the CustomRouting field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SubscriptionTopic) SetCustomRouting(customRouting []ChannelClassification) {
	s.CustomRouting = customRouting
	s.require(subscriptionTopicFieldCustomRouting)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SubscriptionTopic) SetId(id string) {
	s.Id = id
	s.require(subscriptionTopicFieldId)
}

func (s *SubscriptionTopic) UnmarshalJSON(data []byte) error {
	type unmarshaler SubscriptionTopic
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubscriptionTopic(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubscriptionTopic) MarshalJSON() ([]byte, error) {
	type embed SubscriptionTopic
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SubscriptionTopic) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	subscriptionTopicNewFieldStatus           = big.NewInt(1 << 0)
	subscriptionTopicNewFieldHasCustomRouting = big.NewInt(1 << 1)
	subscriptionTopicNewFieldCustomRouting    = big.NewInt(1 << 2)
)

type SubscriptionTopicNew struct {
	Status SubscriptionTopicStatus `json:"status" url:"status"`
	// Override channel routing with custom preferences. This will override any template prefernces that are set, but a user can still customize their preferences
	HasCustomRouting *bool `json:"has_custom_routing,omitempty" url:"has_custom_routing,omitempty"`
	// The default channels to send to this tenant when has_custom_routing is enabled
	CustomRouting []ChannelClassification `json:"custom_routing,omitempty" url:"custom_routing,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SubscriptionTopicNew) GetStatus() SubscriptionTopicStatus {
	if s == nil {
		return ""
	}
	return s.Status
}

func (s *SubscriptionTopicNew) GetHasCustomRouting() *bool {
	if s == nil {
		return nil
	}
	return s.HasCustomRouting
}

func (s *SubscriptionTopicNew) GetCustomRouting() []ChannelClassification {
	if s == nil {
		return nil
	}
	return s.CustomRouting
}

func (s *SubscriptionTopicNew) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubscriptionTopicNew) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetStatus sets the Status field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SubscriptionTopicNew) SetStatus(status SubscriptionTopicStatus) {
	s.Status = status
	s.require(subscriptionTopicNewFieldStatus)
}

// SetHasCustomRouting sets the HasCustomRouting field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SubscriptionTopicNew) SetHasCustomRouting(hasCustomRouting *bool) {
	s.HasCustomRouting = hasCustomRouting
	s.require(subscriptionTopicNewFieldHasCustomRouting)
}

// SetCustomRouting sets the CustomRouting field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SubscriptionTopicNew) SetCustomRouting(customRouting []ChannelClassification) {
	s.CustomRouting = customRouting
	s.require(subscriptionTopicNewFieldCustomRouting)
}

func (s *SubscriptionTopicNew) UnmarshalJSON(data []byte) error {
	type unmarshaler SubscriptionTopicNew
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubscriptionTopicNew(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubscriptionTopicNew) MarshalJSON() ([]byte, error) {
	type embed SubscriptionTopicNew
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SubscriptionTopicNew) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubscriptionTopicStatus string

const (
	SubscriptionTopicStatusOptedOut SubscriptionTopicStatus = "OPTED_OUT"
	SubscriptionTopicStatusOptedIn  SubscriptionTopicStatus = "OPTED_IN"
	SubscriptionTopicStatusRequired SubscriptionTopicStatus = "REQUIRED"
)

func NewSubscriptionTopicStatusFromString(s string) (SubscriptionTopicStatus, error) {
	switch s {
	case "OPTED_OUT":
		return SubscriptionTopicStatusOptedOut, nil
	case "OPTED_IN":
		return SubscriptionTopicStatusOptedIn, nil
	case "REQUIRED":
		return SubscriptionTopicStatusRequired, nil
	}
	var t SubscriptionTopicStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SubscriptionTopicStatus) Ptr() *SubscriptionTopicStatus {
	return &s
}

// Unused type for tenants
type TemplateProperty = interface{}

var (
	tenantFieldId                 = big.NewInt(1 << 0)
	tenantFieldName               = big.NewInt(1 << 1)
	tenantFieldParentTenantId     = big.NewInt(1 << 2)
	tenantFieldDefaultPreferences = big.NewInt(1 << 3)
	tenantFieldProperties         = big.NewInt(1 << 4)
	tenantFieldUserProfile        = big.NewInt(1 << 5)
	tenantFieldBrandId            = big.NewInt(1 << 6)
)

type Tenant struct {
	// Id of the tenant.
	Id string `json:"id" url:"id"`
	// Name of the tenant.
	Name string `json:"name" url:"name"`
	// Tenant's parent id (if any).
	ParentTenantId *string `json:"parent_tenant_id,omitempty" url:"parent_tenant_id,omitempty"`
	// Defines the preferences used for the account when the user hasn't specified their own.
	DefaultPreferences *DefaultPreferences `json:"default_preferences,omitempty" url:"default_preferences,omitempty"`
	// Arbitrary properties accessible to a template.
	Properties map[string]interface{} `json:"properties,omitempty" url:"properties,omitempty"`
	// A user profile object merged with user profile on send.
	UserProfile map[string]interface{} `json:"user_profile,omitempty" url:"user_profile,omitempty"`
	// Brand to be used for the account when one is not specified by the send call.
	BrandId *string `json:"brand_id,omitempty" url:"brand_id,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Tenant) GetId() string {
	if t == nil {
		return ""
	}
	return t.Id
}

func (t *Tenant) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *Tenant) GetParentTenantId() *string {
	if t == nil {
		return nil
	}
	return t.ParentTenantId
}

func (t *Tenant) GetDefaultPreferences() *DefaultPreferences {
	if t == nil {
		return nil
	}
	return t.DefaultPreferences
}

func (t *Tenant) GetProperties() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.Properties
}

func (t *Tenant) GetUserProfile() map[string]interface{} {
	if t == nil {
		return nil
	}
	return t.UserProfile
}

func (t *Tenant) GetBrandId() *string {
	if t == nil {
		return nil
	}
	return t.BrandId
}

func (t *Tenant) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Tenant) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Tenant) SetId(id string) {
	t.Id = id
	t.require(tenantFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Tenant) SetName(name string) {
	t.Name = name
	t.require(tenantFieldName)
}

// SetParentTenantId sets the ParentTenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Tenant) SetParentTenantId(parentTenantId *string) {
	t.ParentTenantId = parentTenantId
	t.require(tenantFieldParentTenantId)
}

// SetDefaultPreferences sets the DefaultPreferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Tenant) SetDefaultPreferences(defaultPreferences *DefaultPreferences) {
	t.DefaultPreferences = defaultPreferences
	t.require(tenantFieldDefaultPreferences)
}

// SetProperties sets the Properties field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Tenant) SetProperties(properties map[string]interface{}) {
	t.Properties = properties
	t.require(tenantFieldProperties)
}

// SetUserProfile sets the UserProfile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Tenant) SetUserProfile(userProfile map[string]interface{}) {
	t.UserProfile = userProfile
	t.require(tenantFieldUserProfile)
}

// SetBrandId sets the BrandId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Tenant) SetBrandId(brandId *string) {
	t.BrandId = brandId
	t.require(tenantFieldBrandId)
}

func (t *Tenant) UnmarshalJSON(data []byte) error {
	type unmarshaler Tenant
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Tenant(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Tenant) MarshalJSON() ([]byte, error) {
	type embed Tenant
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *Tenant) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	tenantListResponseFieldCursor  = big.NewInt(1 << 0)
	tenantListResponseFieldHasMore = big.NewInt(1 << 1)
	tenantListResponseFieldItems   = big.NewInt(1 << 2)
	tenantListResponseFieldNextUrl = big.NewInt(1 << 3)
	tenantListResponseFieldUrl     = big.NewInt(1 << 4)
)

type TenantListResponse struct {
	// A pointer to the next page of results. Defined only when has_more is set to true.
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Set to true when there are more pages that can be retrieved.
	HasMore bool `json:"has_more" url:"has_more"`
	// An array of Tenants
	Items []*Tenant `json:"items" url:"items"`
	// A url that may be used to generate fetch the next set of results.
	// Defined only when has_more is set to true
	NextUrl *string `json:"next_url,omitempty" url:"next_url,omitempty"`
	// A url that may be used to generate these results.
	Url string `json:"url" url:"url"`
	// Always set to "list". Represents the type of this object.

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TenantListResponse) GetCursor() *string {
	if t == nil {
		return nil
	}
	return t.Cursor
}

func (t *TenantListResponse) GetHasMore() bool {
	if t == nil {
		return false
	}
	return t.HasMore
}

func (t *TenantListResponse) GetItems() []*Tenant {
	if t == nil {
		return nil
	}
	return t.Items
}

func (t *TenantListResponse) GetNextUrl() *string {
	if t == nil {
		return nil
	}
	return t.NextUrl
}

func (t *TenantListResponse) GetUrl() string {
	if t == nil {
		return ""
	}
	return t.Url
}

func (t *TenantListResponse) Type() string {
	return t.type_
}

func (t *TenantListResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TenantListResponse) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TenantListResponse) SetCursor(cursor *string) {
	t.Cursor = cursor
	t.require(tenantListResponseFieldCursor)
}

// SetHasMore sets the HasMore field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TenantListResponse) SetHasMore(hasMore bool) {
	t.HasMore = hasMore
	t.require(tenantListResponseFieldHasMore)
}

// SetItems sets the Items field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TenantListResponse) SetItems(items []*Tenant) {
	t.Items = items
	t.require(tenantListResponseFieldItems)
}

// SetNextUrl sets the NextUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TenantListResponse) SetNextUrl(nextUrl *string) {
	t.NextUrl = nextUrl
	t.require(tenantListResponseFieldNextUrl)
}

// SetUrl sets the Url field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TenantListResponse) SetUrl(url string) {
	t.Url = url
	t.require(tenantListResponseFieldUrl)
}

func (t *TenantListResponse) UnmarshalJSON(data []byte) error {
	type embed TenantListResponse
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TenantListResponse(unmarshaler.embed)
	if unmarshaler.Type != "list" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "list", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TenantListResponse) MarshalJSON() ([]byte, error) {
	type embed TenantListResponse
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "list",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TenantListResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
