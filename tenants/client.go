// Code generated by Fern. DO NOT EDIT.

package tenants

import (
	context "context"
	v3 "github.com/trycourier/courier-go/v3"
	core "github.com/trycourier/courier-go/v3/core"
	internal "github.com/trycourier/courier-go/v3/internal"
	option "github.com/trycourier/courier-go/v3/option"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	if options.AuthorizationToken == "" {
		options.AuthorizationToken = os.Getenv("COURIER_AUTH_TOKEN")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

func (c *Client) CreateOrReplace(
	ctx context.Context,
	// A unique identifier representing the tenant to be returned.
	tenantId string,
	request *v3.TenantCreateOrReplaceParams,
	opts ...option.RequestOption,
) (*v3.Tenant, error) {
	response, err := c.WithRawResponse.CreateOrReplace(
		ctx,
		tenantId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Get(
	ctx context.Context,
	// A unique identifier representing the tenant to be returned.
	tenantId string,
	opts ...option.RequestOption,
) (*v3.Tenant, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		tenantId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) List(
	ctx context.Context,
	request *v3.ListTenantParams,
	opts ...option.RequestOption,
) (*v3.TenantListResponse, error) {
	response, err := c.WithRawResponse.List(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Delete(
	ctx context.Context,
	// Id of the tenant to be deleted.
	tenantId string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Delete(
		ctx,
		tenantId,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

func (c *Client) GetUsersByTenant(
	ctx context.Context,
	// Id of the tenant for user membership.
	tenantId string,
	request *v3.ListUsersForTenantParams,
	opts ...option.RequestOption,
) (*v3.ListUsersForTenantResponse, error) {
	response, err := c.WithRawResponse.GetUsersByTenant(
		ctx,
		tenantId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CreateOrReplaceDefaultPreferencesForTopic(
	ctx context.Context,
	// Id of the tenant to update the default preferences for.
	tenantId string,
	// Id fo the susbcription topic you want to have a default preference for.
	topicId string,
	request *v3.SubscriptionTopicNew,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.CreateOrReplaceDefaultPreferencesForTopic(
		ctx,
		tenantId,
		topicId,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

func (c *Client) RemoveDefaultPreferencesForTopic(
	ctx context.Context,
	// Id of the tenant to update the default preferences for.
	tenantId string,
	// Id fo the susbcription topic you want to have a default preference for.
	topicId string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.RemoveDefaultPreferencesForTopic(
		ctx,
		tenantId,
		topicId,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

func (c *Client) GetTemplateByTenant(
	ctx context.Context,
	// Id of the tenant for which to retrieve the template.
	tenantId string,
	// Id of the template to be retrieved.
	templateId string,
	opts ...option.RequestOption,
) (*v3.GetTemplateByTenantResponse, error) {
	response, err := c.WithRawResponse.GetTemplateByTenant(
		ctx,
		tenantId,
		templateId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetTemplateListByTenant(
	ctx context.Context,
	// Id of the tenant for which to retrieve the templates.
	tenantId string,
	request *v3.GetTemplateListByTenantParams,
	opts ...option.RequestOption,
) (*v3.ListTemplatesByTenantResponse, error) {
	response, err := c.WithRawResponse.GetTemplateListByTenant(
		ctx,
		tenantId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
