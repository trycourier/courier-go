// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	listBrandsRequestFieldCursor = big.NewInt(1 << 0)
)

type ListBrandsRequest struct {
	// A unique identifier that allows for fetching the next set of brands.
	Cursor *string `json:"-" url:"cursor,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (l *ListBrandsRequest) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListBrandsRequest) SetCursor(cursor *string) {
	l.Cursor = cursor
	l.require(listBrandsRequestFieldCursor)
}

var (
	brandUpdateParametersFieldName     = big.NewInt(1 << 0)
	brandUpdateParametersFieldSettings = big.NewInt(1 << 1)
	brandUpdateParametersFieldSnippets = big.NewInt(1 << 2)
)

type BrandUpdateParameters struct {
	// The name of the brand.
	Name     string         `json:"name" url:"-"`
	Settings *BrandSettings `json:"settings,omitempty" url:"-"`
	Snippets *BrandSnippets `json:"snippets,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (b *BrandUpdateParameters) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandUpdateParameters) SetName(name string) {
	b.Name = name
	b.require(brandUpdateParametersFieldName)
}

// SetSettings sets the Settings field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandUpdateParameters) SetSettings(settings *BrandSettings) {
	b.Settings = settings
	b.require(brandUpdateParametersFieldSettings)
}

// SetSnippets sets the Snippets field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandUpdateParameters) SetSnippets(snippets *BrandSnippets) {
	b.Snippets = snippets
	b.require(brandUpdateParametersFieldSnippets)
}

var (
	brandFieldCreated   = big.NewInt(1 << 0)
	brandFieldId        = big.NewInt(1 << 1)
	brandFieldName      = big.NewInt(1 << 2)
	brandFieldPublished = big.NewInt(1 << 3)
	brandFieldSettings  = big.NewInt(1 << 4)
	brandFieldUpdated   = big.NewInt(1 << 5)
	brandFieldSnippets  = big.NewInt(1 << 6)
	brandFieldVersion   = big.NewInt(1 << 7)
)

type Brand struct {
	// The date/time of when the brand was created. Represented in milliseconds since Unix epoch.
	Created int `json:"created" url:"created"`
	// Brand Identifier
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// Brand name
	Name string `json:"name" url:"name"`
	// The date/time of when the brand was published. Represented in milliseconds since Unix epoch.
	Published int            `json:"published" url:"published"`
	Settings  *BrandSettings `json:"settings" url:"settings"`
	// The date/time of when the brand was updated. Represented in milliseconds since Unix epoch.
	Updated  int            `json:"updated" url:"updated"`
	Snippets *BrandSnippets `json:"snippets,omitempty" url:"snippets,omitempty"`
	// The version identifier for the brand
	Version string `json:"version" url:"version"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *Brand) GetCreated() int {
	if b == nil {
		return 0
	}
	return b.Created
}

func (b *Brand) GetId() *string {
	if b == nil {
		return nil
	}
	return b.Id
}

func (b *Brand) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *Brand) GetPublished() int {
	if b == nil {
		return 0
	}
	return b.Published
}

func (b *Brand) GetSettings() *BrandSettings {
	if b == nil {
		return nil
	}
	return b.Settings
}

func (b *Brand) GetUpdated() int {
	if b == nil {
		return 0
	}
	return b.Updated
}

func (b *Brand) GetSnippets() *BrandSnippets {
	if b == nil {
		return nil
	}
	return b.Snippets
}

func (b *Brand) GetVersion() string {
	if b == nil {
		return ""
	}
	return b.Version
}

func (b *Brand) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *Brand) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetCreated sets the Created field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *Brand) SetCreated(created int) {
	b.Created = created
	b.require(brandFieldCreated)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *Brand) SetId(id *string) {
	b.Id = id
	b.require(brandFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *Brand) SetName(name string) {
	b.Name = name
	b.require(brandFieldName)
}

// SetPublished sets the Published field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *Brand) SetPublished(published int) {
	b.Published = published
	b.require(brandFieldPublished)
}

// SetSettings sets the Settings field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *Brand) SetSettings(settings *BrandSettings) {
	b.Settings = settings
	b.require(brandFieldSettings)
}

// SetUpdated sets the Updated field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *Brand) SetUpdated(updated int) {
	b.Updated = updated
	b.require(brandFieldUpdated)
}

// SetSnippets sets the Snippets field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *Brand) SetSnippets(snippets *BrandSnippets) {
	b.Snippets = snippets
	b.require(brandFieldSnippets)
}

// SetVersion sets the Version field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *Brand) SetVersion(version string) {
	b.Version = version
	b.require(brandFieldVersion)
}

func (b *Brand) UnmarshalJSON(data []byte) error {
	type unmarshaler Brand
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = Brand(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *Brand) MarshalJSON() ([]byte, error) {
	type embed Brand
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *Brand) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	brandColorsFieldPrimary   = big.NewInt(1 << 0)
	brandColorsFieldSecondary = big.NewInt(1 << 1)
	brandColorsFieldTertiary  = big.NewInt(1 << 2)
)

type BrandColors struct {
	Primary   *string `json:"primary,omitempty" url:"primary,omitempty"`
	Secondary *string `json:"secondary,omitempty" url:"secondary,omitempty"`
	Tertiary  *string `json:"tertiary,omitempty" url:"tertiary,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandColors) GetPrimary() *string {
	if b == nil {
		return nil
	}
	return b.Primary
}

func (b *BrandColors) GetSecondary() *string {
	if b == nil {
		return nil
	}
	return b.Secondary
}

func (b *BrandColors) GetTertiary() *string {
	if b == nil {
		return nil
	}
	return b.Tertiary
}

func (b *BrandColors) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandColors) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetPrimary sets the Primary field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandColors) SetPrimary(primary *string) {
	b.Primary = primary
	b.require(brandColorsFieldPrimary)
}

// SetSecondary sets the Secondary field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandColors) SetSecondary(secondary *string) {
	b.Secondary = secondary
	b.require(brandColorsFieldSecondary)
}

// SetTertiary sets the Tertiary field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandColors) SetTertiary(tertiary *string) {
	b.Tertiary = tertiary
	b.require(brandColorsFieldTertiary)
}

func (b *BrandColors) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandColors
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandColors(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandColors) MarshalJSON() ([]byte, error) {
	type embed BrandColors
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BrandColors) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	brandGetAllResponseFieldPaging  = big.NewInt(1 << 0)
	brandGetAllResponseFieldResults = big.NewInt(1 << 1)
)

type BrandGetAllResponse struct {
	Paging  *Paging  `json:"paging" url:"paging"`
	Results []*Brand `json:"results" url:"results"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandGetAllResponse) GetPaging() *Paging {
	if b == nil {
		return nil
	}
	return b.Paging
}

func (b *BrandGetAllResponse) GetResults() []*Brand {
	if b == nil {
		return nil
	}
	return b.Results
}

func (b *BrandGetAllResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandGetAllResponse) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetPaging sets the Paging field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandGetAllResponse) SetPaging(paging *Paging) {
	b.Paging = paging
	b.require(brandGetAllResponseFieldPaging)
}

// SetResults sets the Results field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandGetAllResponse) SetResults(results []*Brand) {
	b.Results = results
	b.require(brandGetAllResponseFieldResults)
}

func (b *BrandGetAllResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandGetAllResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandGetAllResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandGetAllResponse) MarshalJSON() ([]byte, error) {
	type embed BrandGetAllResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BrandGetAllResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	brandParametersFieldId       = big.NewInt(1 << 0)
	brandParametersFieldName     = big.NewInt(1 << 1)
	brandParametersFieldSettings = big.NewInt(1 << 2)
	brandParametersFieldSnippets = big.NewInt(1 << 3)
)

type BrandParameters struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the brand.
	Name     string         `json:"name" url:"name"`
	Settings *BrandSettings `json:"settings" url:"settings"`
	Snippets *BrandSnippets `json:"snippets,omitempty" url:"snippets,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandParameters) GetId() *string {
	if b == nil {
		return nil
	}
	return b.Id
}

func (b *BrandParameters) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *BrandParameters) GetSettings() *BrandSettings {
	if b == nil {
		return nil
	}
	return b.Settings
}

func (b *BrandParameters) GetSnippets() *BrandSnippets {
	if b == nil {
		return nil
	}
	return b.Snippets
}

func (b *BrandParameters) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandParameters) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandParameters) SetId(id *string) {
	b.Id = id
	b.require(brandParametersFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandParameters) SetName(name string) {
	b.Name = name
	b.require(brandParametersFieldName)
}

// SetSettings sets the Settings field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandParameters) SetSettings(settings *BrandSettings) {
	b.Settings = settings
	b.require(brandParametersFieldSettings)
}

// SetSnippets sets the Snippets field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandParameters) SetSnippets(snippets *BrandSnippets) {
	b.Snippets = snippets
	b.require(brandParametersFieldSnippets)
}

func (b *BrandParameters) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandParameters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandParameters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandParameters) MarshalJSON() ([]byte, error) {
	type embed BrandParameters
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BrandParameters) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	brandSettingsFieldColors = big.NewInt(1 << 0)
	brandSettingsFieldInapp  = big.NewInt(1 << 1)
	brandSettingsFieldEmail  = big.NewInt(1 << 2)
)

type BrandSettings struct {
	Colors *BrandColors `json:"colors,omitempty" url:"colors,omitempty"`
	Inapp  interface{}  `json:"inapp,omitempty" url:"inapp,omitempty"`
	Email  *Email       `json:"email,omitempty" url:"email,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandSettings) GetColors() *BrandColors {
	if b == nil {
		return nil
	}
	return b.Colors
}

func (b *BrandSettings) GetInapp() interface{} {
	if b == nil {
		return nil
	}
	return b.Inapp
}

func (b *BrandSettings) GetEmail() *Email {
	if b == nil {
		return nil
	}
	return b.Email
}

func (b *BrandSettings) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandSettings) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetColors sets the Colors field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettings) SetColors(colors *BrandColors) {
	b.Colors = colors
	b.require(brandSettingsFieldColors)
}

// SetInapp sets the Inapp field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettings) SetInapp(inapp interface{}) {
	b.Inapp = inapp
	b.require(brandSettingsFieldInapp)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettings) SetEmail(email *Email) {
	b.Email = email
	b.require(brandSettingsFieldEmail)
}

func (b *BrandSettings) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandSettings
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandSettings(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandSettings) MarshalJSON() ([]byte, error) {
	type embed BrandSettings
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BrandSettings) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	brandSnippetFieldName  = big.NewInt(1 << 0)
	brandSnippetFieldValue = big.NewInt(1 << 1)
)

type BrandSnippet struct {
	Name  string `json:"name" url:"name"`
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	format         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandSnippet) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *BrandSnippet) GetValue() string {
	if b == nil {
		return ""
	}
	return b.Value
}

func (b *BrandSnippet) Format() string {
	return b.format
}

func (b *BrandSnippet) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandSnippet) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSnippet) SetName(name string) {
	b.Name = name
	b.require(brandSnippetFieldName)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSnippet) SetValue(value string) {
	b.Value = value
	b.require(brandSnippetFieldValue)
}

func (b *BrandSnippet) UnmarshalJSON(data []byte) error {
	type embed BrandSnippet
	var unmarshaler = struct {
		embed
		Format string `json:"format"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BrandSnippet(unmarshaler.embed)
	if unmarshaler.Format != "handlebars" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", b, "handlebars", unmarshaler.Format)
	}
	b.format = unmarshaler.Format
	extraProperties, err := internal.ExtractExtraProperties(data, *b, "format")
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandSnippet) MarshalJSON() ([]byte, error) {
	type embed BrandSnippet
	var marshaler = struct {
		embed
		Format string `json:"format"`
	}{
		embed:  embed(*b),
		Format: "handlebars",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BrandSnippet) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	brandSnippetsFieldItems = big.NewInt(1 << 0)
)

type BrandSnippets struct {
	Items []*BrandSnippet `json:"items" url:"items"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandSnippets) GetItems() []*BrandSnippet {
	if b == nil {
		return nil
	}
	return b.Items
}

func (b *BrandSnippets) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandSnippets) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetItems sets the Items field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSnippets) SetItems(items []*BrandSnippet) {
	b.Items = items
	b.require(brandSnippetsFieldItems)
}

func (b *BrandSnippets) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandSnippets
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandSnippets(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandSnippets) MarshalJSON() ([]byte, error) {
	type embed BrandSnippets
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BrandSnippets) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	brandsResponseFieldPaging  = big.NewInt(1 << 0)
	brandsResponseFieldResults = big.NewInt(1 << 1)
)

type BrandsResponse struct {
	Paging  *Paging  `json:"paging" url:"paging"`
	Results []*Brand `json:"results" url:"results"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandsResponse) GetPaging() *Paging {
	if b == nil {
		return nil
	}
	return b.Paging
}

func (b *BrandsResponse) GetResults() []*Brand {
	if b == nil {
		return nil
	}
	return b.Results
}

func (b *BrandsResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandsResponse) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetPaging sets the Paging field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandsResponse) SetPaging(paging *Paging) {
	b.Paging = paging
	b.require(brandsResponseFieldPaging)
}

// SetResults sets the Results field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandsResponse) SetResults(results []*Brand) {
	b.Results = results
	b.require(brandsResponseFieldResults)
}

func (b *BrandsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandsResponse) MarshalJSON() ([]byte, error) {
	type embed BrandsResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BrandsResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}
