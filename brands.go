// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/trycourier/courier-go/v3/core"
)

type ListBrandsRequest struct {
	// A unique identifier that allows for fetching the next set of brands.
	Cursor *string `json:"-" url:"cursor,omitempty"`
}

type BrandUpdateParameters struct {
	// The name of the brand.
	Name     string         `json:"name" url:"name"`
	Settings *BrandSettings `json:"settings,omitempty" url:"settings,omitempty"`
	Snippets *BrandSnippets `json:"snippets,omitempty" url:"snippets,omitempty"`
}

type Brand struct {
	// The date/time of when the brand was created. Represented in milliseconds since Unix epoch.
	Created int `json:"created" url:"created"`
	// Brand Identifier
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// Brand name
	Name string `json:"name" url:"name"`
	// The date/time of when the brand was published. Represented in milliseconds since Unix epoch.
	Published int            `json:"published" url:"published"`
	Settings  *BrandSettings `json:"settings,omitempty" url:"settings,omitempty"`
	// The date/time of when the brand was updated. Represented in milliseconds since Unix epoch.
	Updated  int            `json:"updated" url:"updated"`
	Snippets *BrandSnippets `json:"snippets,omitempty" url:"snippets,omitempty"`
	// The version identifier for the brand
	Version string `json:"version" url:"version"`

	_rawJSON json.RawMessage
}

func (b *Brand) UnmarshalJSON(data []byte) error {
	type unmarshaler Brand
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = Brand(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *Brand) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BrandColors struct {
	Primary   *string `json:"primary,omitempty" url:"primary,omitempty"`
	Secondary *string `json:"secondary,omitempty" url:"secondary,omitempty"`
	Tertiary  *string `json:"tertiary,omitempty" url:"tertiary,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BrandColors) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandColors
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandColors(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandColors) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BrandParameters struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the brand.
	Name     string         `json:"name" url:"name"`
	Settings *BrandSettings `json:"settings,omitempty" url:"settings,omitempty"`
	Snippets *BrandSnippets `json:"snippets,omitempty" url:"snippets,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BrandParameters) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandParameters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandParameters(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandParameters) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BrandSettings struct {
	Colors *BrandColors `json:"colors,omitempty" url:"colors,omitempty"`
	Inapp  interface{}  `json:"inapp,omitempty" url:"inapp,omitempty"`
	Email  *Email       `json:"email,omitempty" url:"email,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BrandSettings) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandSettings
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandSettings(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandSettings) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BrandSnippet struct {
	Name   string `json:"name" url:"name"`
	Value  string `json:"value" url:"value"`
	format string

	_rawJSON json.RawMessage
}

func (b *BrandSnippet) Format() string {
	return b.format
}

func (b *BrandSnippet) UnmarshalJSON(data []byte) error {
	type embed BrandSnippet
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BrandSnippet(unmarshaler.embed)
	b.format = "handlebars"
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandSnippet) MarshalJSON() ([]byte, error) {
	type embed BrandSnippet
	var marshaler = struct {
		embed
		Format string `json:"format"`
	}{
		embed:  embed(*b),
		Format: "handlebars",
	}
	return json.Marshal(marshaler)
}

func (b *BrandSnippet) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BrandSnippets struct {
	Items []*BrandSnippet `json:"items,omitempty" url:"items,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BrandSnippets) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandSnippets
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandSnippets(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandSnippets) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BrandsResponse struct {
	Paging  *Paging  `json:"paging,omitempty" url:"paging,omitempty"`
	Results []*Brand `json:"results,omitempty" url:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BrandsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandsResponse(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandsResponse) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type Email struct {
	Footer interface{} `json:"footer,omitempty" url:"footer,omitempty"`
	Header interface{} `json:"header,omitempty" url:"header,omitempty"`

	_rawJSON json.RawMessage
}

func (e *Email) UnmarshalJSON(data []byte) error {
	type unmarshaler Email
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Email(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *Email) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}
