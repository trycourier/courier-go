// Code generated by Fern. DO NOT EDIT.

package client

import (
	context "context"
	v3 "github.com/trycourier/courier-go/v3"
	audiences "github.com/trycourier/courier-go/v3/audiences"
	auditevents "github.com/trycourier/courier-go/v3/auditevents"
	authtokens "github.com/trycourier/courier-go/v3/authtokens"
	automations "github.com/trycourier/courier-go/v3/automations"
	brands "github.com/trycourier/courier-go/v3/brands"
	bulk "github.com/trycourier/courier-go/v3/bulk"
	core "github.com/trycourier/courier-go/v3/core"
	inbound "github.com/trycourier/courier-go/v3/inbound"
	internal "github.com/trycourier/courier-go/v3/internal"
	lists "github.com/trycourier/courier-go/v3/lists"
	messages "github.com/trycourier/courier-go/v3/messages"
	notifications "github.com/trycourier/courier-go/v3/notifications"
	option "github.com/trycourier/courier-go/v3/option"
	profiles "github.com/trycourier/courier-go/v3/profiles"
	templates "github.com/trycourier/courier-go/v3/templates"
	tenants "github.com/trycourier/courier-go/v3/tenants"
	translations "github.com/trycourier/courier-go/v3/translations"
	client "github.com/trycourier/courier-go/v3/users/client"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient
	Audiences       *audiences.Client
	AuditEvents     *auditevents.Client
	AuthTokens      *authtokens.Client
	Automations     *automations.Client
	Brands          *brands.Client
	Bulk            *bulk.Client
	Inbound         *inbound.Client
	Lists           *lists.Client
	Messages        *messages.Client
	Notifications   *notifications.Client
	Profiles        *profiles.Client
	Templates       *templates.Client
	Tenants         *tenants.Client
	Translations    *translations.Client
	Users           *client.Client

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.AuthorizationToken == "" {
		options.AuthorizationToken = os.Getenv("COURIER_AUTH_TOKEN")
	}
	return &Client{
		Audiences:       audiences.NewClient(options),
		AuditEvents:     auditevents.NewClient(options),
		AuthTokens:      authtokens.NewClient(options),
		Automations:     automations.NewClient(options),
		Brands:          brands.NewClient(options),
		Bulk:            bulk.NewClient(options),
		Inbound:         inbound.NewClient(options),
		Lists:           lists.NewClient(options),
		Messages:        messages.NewClient(options),
		Notifications:   notifications.NewClient(options),
		Profiles:        profiles.NewClient(options),
		Templates:       templates.NewClient(options),
		Tenants:         tenants.NewClient(options),
		Translations:    translations.NewClient(options),
		Users:           client.NewClient(options),
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Use the send API to send a message to one or more recipients.
func (c *Client) Send(
	ctx context.Context,
	request *v3.SendMessageRequest,
	opts ...option.IdempotentRequestOption,
) (*v3.SendMessageResponse, error) {
	response, err := c.WithRawResponse.Send(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
