// This file was auto-generated by Fern from our API Definition.

package client

import (
	context "context"
	v3 "github.com/trycourier/courier-go/v3"
	audiences "github.com/trycourier/courier-go/v3/audiences"
	auditevents "github.com/trycourier/courier-go/v3/auditevents"
	authtokens "github.com/trycourier/courier-go/v3/authtokens"
	automations "github.com/trycourier/courier-go/v3/automations"
	brands "github.com/trycourier/courier-go/v3/brands"
	bulk "github.com/trycourier/courier-go/v3/bulk"
	core "github.com/trycourier/courier-go/v3/core"
	lists "github.com/trycourier/courier-go/v3/lists"
	messages "github.com/trycourier/courier-go/v3/messages"
	notifications "github.com/trycourier/courier-go/v3/notifications"
	profiles "github.com/trycourier/courier-go/v3/profiles"
	templates "github.com/trycourier/courier-go/v3/templates"
	tenants "github.com/trycourier/courier-go/v3/tenants"
	translations "github.com/trycourier/courier-go/v3/translations"
	usersclient "github.com/trycourier/courier-go/v3/users/client"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header

	Audiences     *audiences.Client
	AuditEvents   *auditevents.Client
	AuthTokens    *authtokens.Client
	Automations   *automations.Client
	Brands        *brands.Client
	Bulk          *bulk.Client
	Lists         *lists.Client
	Messages      *messages.Client
	Notifications *notifications.Client
	Profiles      *profiles.Client
	Templates     *templates.Client
	Tenants       *tenants.Client
	Translations  *translations.Client
	Users         *usersclient.Client
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL:       options.BaseURL,
		caller:        core.NewCaller(options.HTTPClient),
		header:        options.ToHeader(),
		Audiences:     audiences.NewClient(opts...),
		AuditEvents:   auditevents.NewClient(opts...),
		AuthTokens:    authtokens.NewClient(opts...),
		Automations:   automations.NewClient(opts...),
		Brands:        brands.NewClient(opts...),
		Bulk:          bulk.NewClient(opts...),
		Lists:         lists.NewClient(opts...),
		Messages:      messages.NewClient(opts...),
		Notifications: notifications.NewClient(opts...),
		Profiles:      profiles.NewClient(opts...),
		Templates:     templates.NewClient(opts...),
		Tenants:       tenants.NewClient(opts...),
		Translations:  translations.NewClient(opts...),
		Users:         usersclient.NewClient(opts...),
	}
}

// Use the send API to send a message to one or more recipients.
func (c *Client) Send(ctx context.Context, request *v3.SendMessageRequest) (*v3.SendMessageResponse, error) {
	baseURL := "https://api.courier.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "send"

	var response *v3.SendMessageResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodPost,
			Headers:  c.header,
			Request:  request,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
