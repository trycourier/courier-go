// Code generated by Fern. DO NOT EDIT.

package profiles

import (
	context "context"
	v3 "github.com/trycourier/courier-go/v3"
	core "github.com/trycourier/courier-go/v3/core"
	internal "github.com/trycourier/courier-go/v3/internal"
	option "github.com/trycourier/courier-go/v3/option"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	if options.AuthorizationToken == "" {
		options.AuthorizationToken = os.Getenv("COURIER_AUTH_TOKEN")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Returns the specified user profile.
func (c *Client) Get(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	opts ...option.RequestOption,
) (*v3.ProfileGetResponse, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		userId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Merge the supplied values with an existing profile or create a new profile if one doesn't already exist.
func (c *Client) Create(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	request *v3.MergeProfileRequest,
	opts ...option.IdempotentRequestOption,
) (*v3.MergeProfileResponse, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// When using `PUT`, be sure to include all the key-value pairs required by the recipient's profile.
// Any key-value pairs that exist in the profile but fail to be included in the `PUT` request will be
// removed from the profile. Remember, a `PUT` update is a full replacement of the data. For partial updates,
// use the [Patch](https://www.courier.com/docs/reference/profiles/patch/) request.
func (c *Client) Replace(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	request *v3.ReplaceProfileRequest,
	opts ...option.RequestOption,
) (*v3.ReplaceProfileResponse, error) {
	response, err := c.WithRawResponse.Replace(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) MergeProfile(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	request *v3.ProfileUpdateRequest,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.MergeProfile(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Deletes the specified user profile.
func (c *Client) Delete(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Delete(
		ctx,
		userId,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Returns the subscribed lists for a specified user.
func (c *Client) GetListSubscriptions(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	request *v3.GetListSubscriptionsRequest,
	opts ...option.RequestOption,
) (*v3.GetListSubscriptionsResponse, error) {
	response, err := c.WithRawResponse.GetListSubscriptions(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Subscribes the given user to one or more lists. If the list does not exist, it will be created.
func (c *Client) SubscribeToLists(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	request *v3.SubscribeToListsRequest,
	opts ...option.IdempotentRequestOption,
) (*v3.SubscribeToListsResponse, error) {
	response, err := c.WithRawResponse.SubscribeToLists(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Removes all list subscriptions for given user.
func (c *Client) DeleteListSubscription(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	opts ...option.RequestOption,
) (*v3.DeleteListSubscriptionResponse, error) {
	response, err := c.WithRawResponse.DeleteListSubscription(
		ctx,
		userId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
