// Code generated by Fern. DO NOT EDIT.

package profiles

import (
	context "context"
	v3 "github.com/trycourier/courier-go/v3"
	core "github.com/trycourier/courier-go/v3/core"
	internal "github.com/trycourier/courier-go/v3/internal"
	option "github.com/trycourier/courier-go/v3/option"
	http "net/http"
)

type RawClient struct {
	baseURL string
	caller  *internal.Caller
	options *core.RequestOptions
}

func NewRawClient(options *core.RequestOptions) *RawClient {
	return &RawClient{
		options: options,
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

func (r *RawClient) Get(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	opts ...option.RequestOption,
) (*core.Response[*v3.ProfileGetResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.courier.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/profiles/%v",
		userId,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response *v3.ProfileGetResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(v3.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*v3.ProfileGetResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) Create(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	request *v3.MergeProfileRequest,
	opts ...option.IdempotentRequestOption,
) (*core.Response[*v3.MergeProfileResponse], error) {
	options := core.NewIdempotentRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.courier.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/profiles/%v",
		userId,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response *v3.MergeProfileResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(v3.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*v3.MergeProfileResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) Replace(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	request *v3.ReplaceProfileRequest,
	opts ...option.RequestOption,
) (*core.Response[*v3.ReplaceProfileResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.courier.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/profiles/%v",
		userId,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response *v3.ReplaceProfileResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPut,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(v3.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*v3.ReplaceProfileResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) MergeProfile(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	request *v3.ProfileUpdateRequest,
	opts ...option.RequestOption,
) (*core.Response[any], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.courier.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/profiles/%v",
		userId,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPatch,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[any]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       nil,
	}, nil
}

func (r *RawClient) Delete(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	opts ...option.RequestOption,
) (*core.Response[any], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.courier.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/profiles/%v",
		userId,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			ErrorDecoder:    internal.NewErrorDecoder(v3.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[any]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       nil,
	}, nil
}

func (r *RawClient) GetListSubscriptions(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	request *v3.GetListSubscriptionsRequest,
	opts ...option.RequestOption,
) (*core.Response[*v3.GetListSubscriptionsResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.courier.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/profiles/%v/lists",
		userId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response *v3.GetListSubscriptionsResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(v3.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*v3.GetListSubscriptionsResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) SubscribeToLists(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	request *v3.SubscribeToListsRequest,
	opts ...option.IdempotentRequestOption,
) (*core.Response[*v3.SubscribeToListsResponse], error) {
	options := core.NewIdempotentRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.courier.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/profiles/%v/lists",
		userId,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response *v3.SubscribeToListsResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(v3.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*v3.SubscribeToListsResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) DeleteListSubscription(
	ctx context.Context,
	// A unique identifier representing the user associated with the requested profile.
	userId string,
	opts ...option.RequestOption,
) (*core.Response[*v3.DeleteListSubscriptionResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.courier.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/profiles/%v/lists",
		userId,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response *v3.DeleteListSubscriptionResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(v3.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*v3.DeleteListSubscriptionResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}
