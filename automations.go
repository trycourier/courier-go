// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	accessorTypeFieldRef = big.NewInt(1 << 0)
)

type AccessorType struct {
	Ref string `json:"$ref" url:"$ref"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccessorType) GetRef() string {
	if a == nil {
		return ""
	}
	return a.Ref
}

func (a *AccessorType) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccessorType) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AccessorType) SetRef(ref string) {
	a.Ref = ref
	a.require(accessorTypeFieldRef)
}

func (a *AccessorType) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessorType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessorType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessorType) MarshalJSON() ([]byte, error) {
	type embed AccessorType
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AccessorType) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationFieldCancelationToken = big.NewInt(1 << 0)
	automationFieldSteps            = big.NewInt(1 << 1)
)

type Automation struct {
	CancelationToken *string                 `json:"cancelation_token,omitempty" url:"cancelation_token,omitempty"`
	Steps            []*AutomationStepOption `json:"steps" url:"steps"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Automation) GetCancelationToken() *string {
	if a == nil {
		return nil
	}
	return a.CancelationToken
}

func (a *Automation) GetSteps() []*AutomationStepOption {
	if a == nil {
		return nil
	}
	return a.Steps
}

func (a *Automation) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Automation) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetCancelationToken sets the CancelationToken field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Automation) SetCancelationToken(cancelationToken *string) {
	a.CancelationToken = cancelationToken
	a.require(automationFieldCancelationToken)
}

// SetSteps sets the Steps field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Automation) SetSteps(steps []*AutomationStepOption) {
	a.Steps = steps
	a.require(automationFieldSteps)
}

func (a *Automation) UnmarshalJSON(data []byte) error {
	type unmarshaler Automation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Automation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Automation) MarshalJSON() ([]byte, error) {
	type embed Automation
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *Automation) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationAdHocInvokeParamsFieldBrand      = big.NewInt(1 << 0)
	automationAdHocInvokeParamsFieldData       = big.NewInt(1 << 1)
	automationAdHocInvokeParamsFieldProfile    = big.NewInt(1 << 2)
	automationAdHocInvokeParamsFieldRecipient  = big.NewInt(1 << 3)
	automationAdHocInvokeParamsFieldTemplate   = big.NewInt(1 << 4)
	automationAdHocInvokeParamsFieldAutomation = big.NewInt(1 << 5)
)

type AutomationAdHocInvokeParams struct {
	Brand      *string                `json:"brand,omitempty" url:"brand,omitempty"`
	Data       map[string]interface{} `json:"data,omitempty" url:"data,omitempty"`
	Profile    *Profile               `json:"profile,omitempty" url:"profile,omitempty"`
	Recipient  *string                `json:"recipient,omitempty" url:"recipient,omitempty"`
	Template   *string                `json:"template,omitempty" url:"template,omitempty"`
	Automation *Automation            `json:"automation" url:"automation"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationAdHocInvokeParams) GetBrand() *string {
	if a == nil {
		return nil
	}
	return a.Brand
}

func (a *AutomationAdHocInvokeParams) GetData() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AutomationAdHocInvokeParams) GetProfile() *Profile {
	if a == nil {
		return nil
	}
	return a.Profile
}

func (a *AutomationAdHocInvokeParams) GetRecipient() *string {
	if a == nil {
		return nil
	}
	return a.Recipient
}

func (a *AutomationAdHocInvokeParams) GetTemplate() *string {
	if a == nil {
		return nil
	}
	return a.Template
}

func (a *AutomationAdHocInvokeParams) GetAutomation() *Automation {
	if a == nil {
		return nil
	}
	return a.Automation
}

func (a *AutomationAdHocInvokeParams) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationAdHocInvokeParams) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetBrand sets the Brand field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAdHocInvokeParams) SetBrand(brand *string) {
	a.Brand = brand
	a.require(automationAdHocInvokeParamsFieldBrand)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAdHocInvokeParams) SetData(data map[string]interface{}) {
	a.Data = data
	a.require(automationAdHocInvokeParamsFieldData)
}

// SetProfile sets the Profile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAdHocInvokeParams) SetProfile(profile *Profile) {
	a.Profile = profile
	a.require(automationAdHocInvokeParamsFieldProfile)
}

// SetRecipient sets the Recipient field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAdHocInvokeParams) SetRecipient(recipient *string) {
	a.Recipient = recipient
	a.require(automationAdHocInvokeParamsFieldRecipient)
}

// SetTemplate sets the Template field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAdHocInvokeParams) SetTemplate(template *string) {
	a.Template = template
	a.require(automationAdHocInvokeParamsFieldTemplate)
}

// SetAutomation sets the Automation field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAdHocInvokeParams) SetAutomation(automation *Automation) {
	a.Automation = automation
	a.require(automationAdHocInvokeParamsFieldAutomation)
}

func (a *AutomationAdHocInvokeParams) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationAdHocInvokeParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationAdHocInvokeParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationAdHocInvokeParams) MarshalJSON() ([]byte, error) {
	type embed AutomationAdHocInvokeParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationAdHocInvokeParams) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationAddToBatchMaxItemsType struct {
	String  string
	Integer int

	typ string
}

func (a *AutomationAddToBatchMaxItemsType) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AutomationAddToBatchMaxItemsType) GetInteger() int {
	if a == nil {
		return 0
	}
	return a.Integer
}

func (a *AutomationAddToBatchMaxItemsType) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		a.typ = "Integer"
		a.Integer = valueInteger
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AutomationAddToBatchMaxItemsType) MarshalJSON() ([]byte, error) {
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	if a.typ == "Integer" || a.Integer != 0 {
		return json.Marshal(a.Integer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationAddToBatchMaxItemsTypeVisitor interface {
	VisitString(string) error
	VisitInteger(int) error
}

func (a *AutomationAddToBatchMaxItemsType) Accept(visitor AutomationAddToBatchMaxItemsTypeVisitor) error {
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	if a.typ == "Integer" || a.Integer != 0 {
		return visitor.VisitInteger(a.Integer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// Defines what items should be retained and passed along to the next steps when the batch is released
var (
	automationAddToBatchRetainFieldType    = big.NewInt(1 << 0)
	automationAddToBatchRetainFieldCount   = big.NewInt(1 << 1)
	automationAddToBatchRetainFieldSortKey = big.NewInt(1 << 2)
)

type AutomationAddToBatchRetain struct {
	// Keep N number of notifications based on the type. First/Last N based on notification received.
	// highest/lowest based on a scoring key providing in the data accessed by sort_key
	Type AutomationAddToBatchRetainType `json:"type" url:"type"`
	// The number of records to keep in batch. Default is 10 and only configurable by requesting from support.
	// When configurable minimum is 2 and maximum is 100.
	Count int `json:"count" url:"count"`
	// Defines the data value data[sort_key] that is used to sort the stored items. Required when type is set to highest or lowest.
	SortKey *string `json:"sort_key,omitempty" url:"sort_key,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationAddToBatchRetain) GetType() AutomationAddToBatchRetainType {
	if a == nil {
		return ""
	}
	return a.Type
}

func (a *AutomationAddToBatchRetain) GetCount() int {
	if a == nil {
		return 0
	}
	return a.Count
}

func (a *AutomationAddToBatchRetain) GetSortKey() *string {
	if a == nil {
		return nil
	}
	return a.SortKey
}

func (a *AutomationAddToBatchRetain) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationAddToBatchRetain) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToBatchRetain) SetType(type_ AutomationAddToBatchRetainType) {
	a.Type = type_
	a.require(automationAddToBatchRetainFieldType)
}

// SetCount sets the Count field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToBatchRetain) SetCount(count int) {
	a.Count = count
	a.require(automationAddToBatchRetainFieldCount)
}

// SetSortKey sets the SortKey field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToBatchRetain) SetSortKey(sortKey *string) {
	a.SortKey = sortKey
	a.require(automationAddToBatchRetainFieldSortKey)
}

func (a *AutomationAddToBatchRetain) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationAddToBatchRetain
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationAddToBatchRetain(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationAddToBatchRetain) MarshalJSON() ([]byte, error) {
	type embed AutomationAddToBatchRetain
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationAddToBatchRetain) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationAddToBatchRetainType string

const (
	AutomationAddToBatchRetainTypeFirst   AutomationAddToBatchRetainType = "first"
	AutomationAddToBatchRetainTypeLast    AutomationAddToBatchRetainType = "last"
	AutomationAddToBatchRetainTypeHighest AutomationAddToBatchRetainType = "highest"
	AutomationAddToBatchRetainTypeLowest  AutomationAddToBatchRetainType = "lowest"
)

func NewAutomationAddToBatchRetainTypeFromString(s string) (AutomationAddToBatchRetainType, error) {
	switch s {
	case "first":
		return AutomationAddToBatchRetainTypeFirst, nil
	case "last":
		return AutomationAddToBatchRetainTypeLast, nil
	case "highest":
		return AutomationAddToBatchRetainTypeHighest, nil
	case "lowest":
		return AutomationAddToBatchRetainTypeLowest, nil
	}
	var t AutomationAddToBatchRetainType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationAddToBatchRetainType) Ptr() *AutomationAddToBatchRetainType {
	return &a
}

type AutomationAddToBatchScope string

const (
	AutomationAddToBatchScopeUser    AutomationAddToBatchScope = "user"
	AutomationAddToBatchScopeGlobal  AutomationAddToBatchScope = "global"
	AutomationAddToBatchScopeDynamic AutomationAddToBatchScope = "dynamic"
)

func NewAutomationAddToBatchScopeFromString(s string) (AutomationAddToBatchScope, error) {
	switch s {
	case "user":
		return AutomationAddToBatchScopeUser, nil
	case "global":
		return AutomationAddToBatchScopeGlobal, nil
	case "dynamic":
		return AutomationAddToBatchScopeDynamic, nil
	}
	var t AutomationAddToBatchScope
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationAddToBatchScope) Ptr() *AutomationAddToBatchScope {
	return &a
}

var (
	automationAddToBatchStepFieldIf            = big.NewInt(1 << 0)
	automationAddToBatchStepFieldRef           = big.NewInt(1 << 1)
	automationAddToBatchStepFieldWaitPeriod    = big.NewInt(1 << 2)
	automationAddToBatchStepFieldMaxWaitPeriod = big.NewInt(1 << 3)
	automationAddToBatchStepFieldMaxItems      = big.NewInt(1 << 4)
	automationAddToBatchStepFieldRetain        = big.NewInt(1 << 5)
	automationAddToBatchStepFieldScope         = big.NewInt(1 << 6)
	automationAddToBatchStepFieldBatchKey      = big.NewInt(1 << 7)
	automationAddToBatchStepFieldBatchId       = big.NewInt(1 << 8)
	automationAddToBatchStepFieldCategoryKey   = big.NewInt(1 << 9)
)

type AutomationAddToBatchStep struct {
	If  *string `json:"if,omitempty" url:"if,omitempty"`
	Ref *string `json:"ref,omitempty" url:"ref,omitempty"`
	// Defines the period of inactivity before the batch is released. Specified as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)
	WaitPeriod string `json:"wait_period" url:"wait_period"`
	// Defines the maximum wait time before the batch should be released. Must be less than wait period. Maximum of 60 days. Specified as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)
	MaxWaitPeriod string `json:"max_wait_period" url:"max_wait_period"`
	// If specified, the batch will release as soon as this number is reached
	MaxItems *AutomationAddToBatchMaxItemsType `json:"max_items,omitempty" url:"max_items,omitempty"`
	Retain   *AutomationAddToBatchRetain       `json:"retain" url:"retain"`
	// Determine the scope of the batching. If user, chosen in this order: recipient, profile.user_id, data.user_id, data.userId.
	// If dynamic, then specify where the batch_key or a reference to the batch_key
	Scope *AutomationAddToBatchScope `json:"scope,omitempty" url:"scope,omitempty"`
	// If using scope=dynamic, provide the key or a reference (e.g., refs.data.batch_key)
	BatchKey *string `json:"batch_key,omitempty" url:"batch_key,omitempty"`
	BatchId  *string `json:"batch_id,omitempty" url:"batch_id,omitempty"`
	// Defines the field of the data object the batch is set to when complete. Defaults to `batch`
	CategoryKey *string `json:"category_key,omitempty" url:"category_key,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationAddToBatchStep) GetIf() *string {
	if a == nil {
		return nil
	}
	return a.If
}

func (a *AutomationAddToBatchStep) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationAddToBatchStep) GetWaitPeriod() string {
	if a == nil {
		return ""
	}
	return a.WaitPeriod
}

func (a *AutomationAddToBatchStep) GetMaxWaitPeriod() string {
	if a == nil {
		return ""
	}
	return a.MaxWaitPeriod
}

func (a *AutomationAddToBatchStep) GetMaxItems() *AutomationAddToBatchMaxItemsType {
	if a == nil {
		return nil
	}
	return a.MaxItems
}

func (a *AutomationAddToBatchStep) GetRetain() *AutomationAddToBatchRetain {
	if a == nil {
		return nil
	}
	return a.Retain
}

func (a *AutomationAddToBatchStep) GetScope() *AutomationAddToBatchScope {
	if a == nil {
		return nil
	}
	return a.Scope
}

func (a *AutomationAddToBatchStep) GetBatchKey() *string {
	if a == nil {
		return nil
	}
	return a.BatchKey
}

func (a *AutomationAddToBatchStep) GetBatchId() *string {
	if a == nil {
		return nil
	}
	return a.BatchId
}

func (a *AutomationAddToBatchStep) GetCategoryKey() *string {
	if a == nil {
		return nil
	}
	return a.CategoryKey
}

func (a *AutomationAddToBatchStep) Action() string {
	return a.action
}

func (a *AutomationAddToBatchStep) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationAddToBatchStep) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToBatchStep) SetIf(if_ *string) {
	a.If = if_
	a.require(automationAddToBatchStepFieldIf)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToBatchStep) SetRef(ref *string) {
	a.Ref = ref
	a.require(automationAddToBatchStepFieldRef)
}

// SetWaitPeriod sets the WaitPeriod field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToBatchStep) SetWaitPeriod(waitPeriod string) {
	a.WaitPeriod = waitPeriod
	a.require(automationAddToBatchStepFieldWaitPeriod)
}

// SetMaxWaitPeriod sets the MaxWaitPeriod field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToBatchStep) SetMaxWaitPeriod(maxWaitPeriod string) {
	a.MaxWaitPeriod = maxWaitPeriod
	a.require(automationAddToBatchStepFieldMaxWaitPeriod)
}

// SetMaxItems sets the MaxItems field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToBatchStep) SetMaxItems(maxItems *AutomationAddToBatchMaxItemsType) {
	a.MaxItems = maxItems
	a.require(automationAddToBatchStepFieldMaxItems)
}

// SetRetain sets the Retain field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToBatchStep) SetRetain(retain *AutomationAddToBatchRetain) {
	a.Retain = retain
	a.require(automationAddToBatchStepFieldRetain)
}

// SetScope sets the Scope field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToBatchStep) SetScope(scope *AutomationAddToBatchScope) {
	a.Scope = scope
	a.require(automationAddToBatchStepFieldScope)
}

// SetBatchKey sets the BatchKey field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToBatchStep) SetBatchKey(batchKey *string) {
	a.BatchKey = batchKey
	a.require(automationAddToBatchStepFieldBatchKey)
}

// SetBatchId sets the BatchId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToBatchStep) SetBatchId(batchId *string) {
	a.BatchId = batchId
	a.require(automationAddToBatchStepFieldBatchId)
}

// SetCategoryKey sets the CategoryKey field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToBatchStep) SetCategoryKey(categoryKey *string) {
	a.CategoryKey = categoryKey
	a.require(automationAddToBatchStepFieldCategoryKey)
}

func (a *AutomationAddToBatchStep) UnmarshalJSON(data []byte) error {
	type embed AutomationAddToBatchStep
	var unmarshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationAddToBatchStep(unmarshaler.embed)
	if unmarshaler.Action != "add-to-batch" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "add-to-batch", unmarshaler.Action)
	}
	a.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "action")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationAddToBatchStep) MarshalJSON() ([]byte, error) {
	type embed AutomationAddToBatchStep
	var marshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed:  embed(*a),
		Action: "add-to-batch",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationAddToBatchStep) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationAddToDigestStepFieldIf                  = big.NewInt(1 << 0)
	automationAddToDigestStepFieldRef                 = big.NewInt(1 << 1)
	automationAddToDigestStepFieldSubscriptionTopicId = big.NewInt(1 << 2)
)

type AutomationAddToDigestStep struct {
	If  *string `json:"if,omitempty" url:"if,omitempty"`
	Ref *string `json:"ref,omitempty" url:"ref,omitempty"`
	// The subscription topic that has digests enabled
	SubscriptionTopicId string `json:"subscription_topic_id" url:"subscription_topic_id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationAddToDigestStep) GetIf() *string {
	if a == nil {
		return nil
	}
	return a.If
}

func (a *AutomationAddToDigestStep) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationAddToDigestStep) GetSubscriptionTopicId() string {
	if a == nil {
		return ""
	}
	return a.SubscriptionTopicId
}

func (a *AutomationAddToDigestStep) Action() string {
	return a.action
}

func (a *AutomationAddToDigestStep) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationAddToDigestStep) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToDigestStep) SetIf(if_ *string) {
	a.If = if_
	a.require(automationAddToDigestStepFieldIf)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToDigestStep) SetRef(ref *string) {
	a.Ref = ref
	a.require(automationAddToDigestStepFieldRef)
}

// SetSubscriptionTopicId sets the SubscriptionTopicId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationAddToDigestStep) SetSubscriptionTopicId(subscriptionTopicId string) {
	a.SubscriptionTopicId = subscriptionTopicId
	a.require(automationAddToDigestStepFieldSubscriptionTopicId)
}

func (a *AutomationAddToDigestStep) UnmarshalJSON(data []byte) error {
	type embed AutomationAddToDigestStep
	var unmarshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationAddToDigestStep(unmarshaler.embed)
	if unmarshaler.Action != "add-to-digest" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "add-to-digest", unmarshaler.Action)
	}
	a.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "action")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationAddToDigestStep) MarshalJSON() ([]byte, error) {
	type embed AutomationAddToDigestStep
	var marshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed:  embed(*a),
		Action: "add-to-digest",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationAddToDigestStep) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationCancelStepFieldIf               = big.NewInt(1 << 0)
	automationCancelStepFieldRef              = big.NewInt(1 << 1)
	automationCancelStepFieldCancelationToken = big.NewInt(1 << 2)
)

type AutomationCancelStep struct {
	If               *string `json:"if,omitempty" url:"if,omitempty"`
	Ref              *string `json:"ref,omitempty" url:"ref,omitempty"`
	CancelationToken *string `json:"cancelation_token,omitempty" url:"cancelation_token,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationCancelStep) GetIf() *string {
	if a == nil {
		return nil
	}
	return a.If
}

func (a *AutomationCancelStep) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationCancelStep) GetCancelationToken() *string {
	if a == nil {
		return nil
	}
	return a.CancelationToken
}

func (a *AutomationCancelStep) Action() string {
	return a.action
}

func (a *AutomationCancelStep) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationCancelStep) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationCancelStep) SetIf(if_ *string) {
	a.If = if_
	a.require(automationCancelStepFieldIf)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationCancelStep) SetRef(ref *string) {
	a.Ref = ref
	a.require(automationCancelStepFieldRef)
}

// SetCancelationToken sets the CancelationToken field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationCancelStep) SetCancelationToken(cancelationToken *string) {
	a.CancelationToken = cancelationToken
	a.require(automationCancelStepFieldCancelationToken)
}

func (a *AutomationCancelStep) UnmarshalJSON(data []byte) error {
	type embed AutomationCancelStep
	var unmarshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationCancelStep(unmarshaler.embed)
	if unmarshaler.Action != "cancel" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "cancel", unmarshaler.Action)
	}
	a.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "action")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationCancelStep) MarshalJSON() ([]byte, error) {
	type embed AutomationCancelStep
	var marshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed:  embed(*a),
		Action: "cancel",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationCancelStep) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationDelayStepFieldIf       = big.NewInt(1 << 0)
	automationDelayStepFieldRef      = big.NewInt(1 << 1)
	automationDelayStepFieldDuration = big.NewInt(1 << 2)
	automationDelayStepFieldUntil    = big.NewInt(1 << 3)
)

type AutomationDelayStep struct {
	If  *string `json:"if,omitempty" url:"if,omitempty"`
	Ref *string `json:"ref,omitempty" url:"ref,omitempty"`
	// The [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) string for how long to delay for
	Duration *string `json:"duration,omitempty" url:"duration,omitempty"`
	// The ISO 8601 timestamp for when the delay should end
	Until *string `json:"until,omitempty" url:"until,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationDelayStep) GetIf() *string {
	if a == nil {
		return nil
	}
	return a.If
}

func (a *AutomationDelayStep) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationDelayStep) GetDuration() *string {
	if a == nil {
		return nil
	}
	return a.Duration
}

func (a *AutomationDelayStep) GetUntil() *string {
	if a == nil {
		return nil
	}
	return a.Until
}

func (a *AutomationDelayStep) Action() string {
	return a.action
}

func (a *AutomationDelayStep) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationDelayStep) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationDelayStep) SetIf(if_ *string) {
	a.If = if_
	a.require(automationDelayStepFieldIf)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationDelayStep) SetRef(ref *string) {
	a.Ref = ref
	a.require(automationDelayStepFieldRef)
}

// SetDuration sets the Duration field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationDelayStep) SetDuration(duration *string) {
	a.Duration = duration
	a.require(automationDelayStepFieldDuration)
}

// SetUntil sets the Until field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationDelayStep) SetUntil(until *string) {
	a.Until = until
	a.require(automationDelayStepFieldUntil)
}

func (a *AutomationDelayStep) UnmarshalJSON(data []byte) error {
	type embed AutomationDelayStep
	var unmarshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationDelayStep(unmarshaler.embed)
	if unmarshaler.Action != "delay" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "delay", unmarshaler.Action)
	}
	a.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "action")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationDelayStep) MarshalJSON() ([]byte, error) {
	type embed AutomationDelayStep
	var marshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed:  embed(*a),
		Action: "delay",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationDelayStep) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationFetchDataStepFieldIf                = big.NewInt(1 << 0)
	automationFetchDataStepFieldRef               = big.NewInt(1 << 1)
	automationFetchDataStepFieldWebhook           = big.NewInt(1 << 2)
	automationFetchDataStepFieldMergeStrategy     = big.NewInt(1 << 3)
	automationFetchDataStepFieldIdempotencyExpiry = big.NewInt(1 << 4)
	automationFetchDataStepFieldIdempotencyKey    = big.NewInt(1 << 5)
)

type AutomationFetchDataStep struct {
	If                *string                     `json:"if,omitempty" url:"if,omitempty"`
	Ref               *string                     `json:"ref,omitempty" url:"ref,omitempty"`
	Webhook           *AutomationFetchDataWebhook `json:"webhook" url:"webhook"`
	MergeStrategy     MergeAlgorithm              `json:"merge_strategy" url:"merge_strategy"`
	IdempotencyExpiry *string                     `json:"idempotency_expiry,omitempty" url:"idempotency_expiry,omitempty"`
	IdempotencyKey    *string                     `json:"idempotency_key,omitempty" url:"idempotency_key,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationFetchDataStep) GetIf() *string {
	if a == nil {
		return nil
	}
	return a.If
}

func (a *AutomationFetchDataStep) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationFetchDataStep) GetWebhook() *AutomationFetchDataWebhook {
	if a == nil {
		return nil
	}
	return a.Webhook
}

func (a *AutomationFetchDataStep) GetMergeStrategy() MergeAlgorithm {
	if a == nil {
		return ""
	}
	return a.MergeStrategy
}

func (a *AutomationFetchDataStep) GetIdempotencyExpiry() *string {
	if a == nil {
		return nil
	}
	return a.IdempotencyExpiry
}

func (a *AutomationFetchDataStep) GetIdempotencyKey() *string {
	if a == nil {
		return nil
	}
	return a.IdempotencyKey
}

func (a *AutomationFetchDataStep) Action() string {
	return a.action
}

func (a *AutomationFetchDataStep) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationFetchDataStep) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationFetchDataStep) SetIf(if_ *string) {
	a.If = if_
	a.require(automationFetchDataStepFieldIf)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationFetchDataStep) SetRef(ref *string) {
	a.Ref = ref
	a.require(automationFetchDataStepFieldRef)
}

// SetWebhook sets the Webhook field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationFetchDataStep) SetWebhook(webhook *AutomationFetchDataWebhook) {
	a.Webhook = webhook
	a.require(automationFetchDataStepFieldWebhook)
}

// SetMergeStrategy sets the MergeStrategy field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationFetchDataStep) SetMergeStrategy(mergeStrategy MergeAlgorithm) {
	a.MergeStrategy = mergeStrategy
	a.require(automationFetchDataStepFieldMergeStrategy)
}

// SetIdempotencyExpiry sets the IdempotencyExpiry field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationFetchDataStep) SetIdempotencyExpiry(idempotencyExpiry *string) {
	a.IdempotencyExpiry = idempotencyExpiry
	a.require(automationFetchDataStepFieldIdempotencyExpiry)
}

// SetIdempotencyKey sets the IdempotencyKey field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationFetchDataStep) SetIdempotencyKey(idempotencyKey *string) {
	a.IdempotencyKey = idempotencyKey
	a.require(automationFetchDataStepFieldIdempotencyKey)
}

func (a *AutomationFetchDataStep) UnmarshalJSON(data []byte) error {
	type embed AutomationFetchDataStep
	var unmarshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationFetchDataStep(unmarshaler.embed)
	if unmarshaler.Action != "fetch-data" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "fetch-data", unmarshaler.Action)
	}
	a.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "action")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationFetchDataStep) MarshalJSON() ([]byte, error) {
	type embed AutomationFetchDataStep
	var marshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed:  embed(*a),
		Action: "fetch-data",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationFetchDataStep) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationFetchDataWebhookFieldBody    = big.NewInt(1 << 0)
	automationFetchDataWebhookFieldHeaders = big.NewInt(1 << 1)
	automationFetchDataWebhookFieldParams  = big.NewInt(1 << 2)
	automationFetchDataWebhookFieldMethod  = big.NewInt(1 << 3)
	automationFetchDataWebhookFieldUrl     = big.NewInt(1 << 4)
)

type AutomationFetchDataWebhook struct {
	Body    map[string]interface{}           `json:"body,omitempty" url:"body,omitempty"`
	Headers map[string]interface{}           `json:"headers,omitempty" url:"headers,omitempty"`
	Params  map[string]interface{}           `json:"params,omitempty" url:"params,omitempty"`
	Method  AutomationFetchDataWebhookMethod `json:"method" url:"method"`
	Url     string                           `json:"url" url:"url"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationFetchDataWebhook) GetBody() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Body
}

func (a *AutomationFetchDataWebhook) GetHeaders() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Headers
}

func (a *AutomationFetchDataWebhook) GetParams() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Params
}

func (a *AutomationFetchDataWebhook) GetMethod() AutomationFetchDataWebhookMethod {
	if a == nil {
		return ""
	}
	return a.Method
}

func (a *AutomationFetchDataWebhook) GetUrl() string {
	if a == nil {
		return ""
	}
	return a.Url
}

func (a *AutomationFetchDataWebhook) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationFetchDataWebhook) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetBody sets the Body field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationFetchDataWebhook) SetBody(body map[string]interface{}) {
	a.Body = body
	a.require(automationFetchDataWebhookFieldBody)
}

// SetHeaders sets the Headers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationFetchDataWebhook) SetHeaders(headers map[string]interface{}) {
	a.Headers = headers
	a.require(automationFetchDataWebhookFieldHeaders)
}

// SetParams sets the Params field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationFetchDataWebhook) SetParams(params map[string]interface{}) {
	a.Params = params
	a.require(automationFetchDataWebhookFieldParams)
}

// SetMethod sets the Method field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationFetchDataWebhook) SetMethod(method AutomationFetchDataWebhookMethod) {
	a.Method = method
	a.require(automationFetchDataWebhookFieldMethod)
}

// SetUrl sets the Url field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationFetchDataWebhook) SetUrl(url string) {
	a.Url = url
	a.require(automationFetchDataWebhookFieldUrl)
}

func (a *AutomationFetchDataWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationFetchDataWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationFetchDataWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationFetchDataWebhook) MarshalJSON() ([]byte, error) {
	type embed AutomationFetchDataWebhook
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationFetchDataWebhook) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationFetchDataWebhookMethod string

const (
	AutomationFetchDataWebhookMethodGet  AutomationFetchDataWebhookMethod = "GET"
	AutomationFetchDataWebhookMethodPost AutomationFetchDataWebhookMethod = "POST"
)

func NewAutomationFetchDataWebhookMethodFromString(s string) (AutomationFetchDataWebhookMethod, error) {
	switch s {
	case "GET":
		return AutomationFetchDataWebhookMethodGet, nil
	case "POST":
		return AutomationFetchDataWebhookMethodPost, nil
	}
	var t AutomationFetchDataWebhookMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationFetchDataWebhookMethod) Ptr() *AutomationFetchDataWebhookMethod {
	return &a
}

var (
	automationInvokeParamsFieldBrand     = big.NewInt(1 << 0)
	automationInvokeParamsFieldData      = big.NewInt(1 << 1)
	automationInvokeParamsFieldProfile   = big.NewInt(1 << 2)
	automationInvokeParamsFieldRecipient = big.NewInt(1 << 3)
	automationInvokeParamsFieldTemplate  = big.NewInt(1 << 4)
)

type AutomationInvokeParams struct {
	Brand     *string                `json:"brand,omitempty" url:"brand,omitempty"`
	Data      map[string]interface{} `json:"data,omitempty" url:"data,omitempty"`
	Profile   *Profile               `json:"profile,omitempty" url:"profile,omitempty"`
	Recipient *string                `json:"recipient,omitempty" url:"recipient,omitempty"`
	Template  *string                `json:"template,omitempty" url:"template,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationInvokeParams) GetBrand() *string {
	if a == nil {
		return nil
	}
	return a.Brand
}

func (a *AutomationInvokeParams) GetData() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AutomationInvokeParams) GetProfile() *Profile {
	if a == nil {
		return nil
	}
	return a.Profile
}

func (a *AutomationInvokeParams) GetRecipient() *string {
	if a == nil {
		return nil
	}
	return a.Recipient
}

func (a *AutomationInvokeParams) GetTemplate() *string {
	if a == nil {
		return nil
	}
	return a.Template
}

func (a *AutomationInvokeParams) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationInvokeParams) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetBrand sets the Brand field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationInvokeParams) SetBrand(brand *string) {
	a.Brand = brand
	a.require(automationInvokeParamsFieldBrand)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationInvokeParams) SetData(data map[string]interface{}) {
	a.Data = data
	a.require(automationInvokeParamsFieldData)
}

// SetProfile sets the Profile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationInvokeParams) SetProfile(profile *Profile) {
	a.Profile = profile
	a.require(automationInvokeParamsFieldProfile)
}

// SetRecipient sets the Recipient field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationInvokeParams) SetRecipient(recipient *string) {
	a.Recipient = recipient
	a.require(automationInvokeParamsFieldRecipient)
}

// SetTemplate sets the Template field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationInvokeParams) SetTemplate(template *string) {
	a.Template = template
	a.require(automationInvokeParamsFieldTemplate)
}

func (a *AutomationInvokeParams) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationInvokeParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationInvokeParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationInvokeParams) MarshalJSON() ([]byte, error) {
	type embed AutomationInvokeParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationInvokeParams) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationInvokeResponseFieldRunId = big.NewInt(1 << 0)
)

type AutomationInvokeResponse struct {
	RunId string `json:"runId" url:"runId"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationInvokeResponse) GetRunId() string {
	if a == nil {
		return ""
	}
	return a.RunId
}

func (a *AutomationInvokeResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationInvokeResponse) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetRunId sets the RunId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationInvokeResponse) SetRunId(runId string) {
	a.RunId = runId
	a.require(automationInvokeResponseFieldRunId)
}

func (a *AutomationInvokeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationInvokeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationInvokeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationInvokeResponse) MarshalJSON() ([]byte, error) {
	type embed AutomationInvokeResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationInvokeResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationInvokeStepFieldIf       = big.NewInt(1 << 0)
	automationInvokeStepFieldRef      = big.NewInt(1 << 1)
	automationInvokeStepFieldTemplate = big.NewInt(1 << 2)
)

type AutomationInvokeStep struct {
	If       *string `json:"if,omitempty" url:"if,omitempty"`
	Ref      *string `json:"ref,omitempty" url:"ref,omitempty"`
	Template string  `json:"template" url:"template"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationInvokeStep) GetIf() *string {
	if a == nil {
		return nil
	}
	return a.If
}

func (a *AutomationInvokeStep) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationInvokeStep) GetTemplate() string {
	if a == nil {
		return ""
	}
	return a.Template
}

func (a *AutomationInvokeStep) Action() string {
	return a.action
}

func (a *AutomationInvokeStep) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationInvokeStep) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationInvokeStep) SetIf(if_ *string) {
	a.If = if_
	a.require(automationInvokeStepFieldIf)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationInvokeStep) SetRef(ref *string) {
	a.Ref = ref
	a.require(automationInvokeStepFieldRef)
}

// SetTemplate sets the Template field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationInvokeStep) SetTemplate(template string) {
	a.Template = template
	a.require(automationInvokeStepFieldTemplate)
}

func (a *AutomationInvokeStep) UnmarshalJSON(data []byte) error {
	type embed AutomationInvokeStep
	var unmarshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationInvokeStep(unmarshaler.embed)
	if unmarshaler.Action != "invoke" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "invoke", unmarshaler.Action)
	}
	a.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "action")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationInvokeStep) MarshalJSON() ([]byte, error) {
	type embed AutomationInvokeStep
	var marshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed:  embed(*a),
		Action: "invoke",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationInvokeStep) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationInvokeTemplateParamsFieldBrand      = big.NewInt(1 << 0)
	automationInvokeTemplateParamsFieldData       = big.NewInt(1 << 1)
	automationInvokeTemplateParamsFieldProfile    = big.NewInt(1 << 2)
	automationInvokeTemplateParamsFieldRecipient  = big.NewInt(1 << 3)
	automationInvokeTemplateParamsFieldTemplate   = big.NewInt(1 << 4)
	automationInvokeTemplateParamsFieldTemplateId = big.NewInt(1 << 5)
)

type AutomationInvokeTemplateParams struct {
	Brand      *string                `json:"brand,omitempty" url:"brand,omitempty"`
	Data       map[string]interface{} `json:"data,omitempty" url:"data,omitempty"`
	Profile    *Profile               `json:"profile,omitempty" url:"profile,omitempty"`
	Recipient  *string                `json:"recipient,omitempty" url:"recipient,omitempty"`
	Template   *string                `json:"template,omitempty" url:"template,omitempty"`
	TemplateId string                 `json:"templateId" url:"templateId"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationInvokeTemplateParams) GetBrand() *string {
	if a == nil {
		return nil
	}
	return a.Brand
}

func (a *AutomationInvokeTemplateParams) GetData() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AutomationInvokeTemplateParams) GetProfile() *Profile {
	if a == nil {
		return nil
	}
	return a.Profile
}

func (a *AutomationInvokeTemplateParams) GetRecipient() *string {
	if a == nil {
		return nil
	}
	return a.Recipient
}

func (a *AutomationInvokeTemplateParams) GetTemplate() *string {
	if a == nil {
		return nil
	}
	return a.Template
}

func (a *AutomationInvokeTemplateParams) GetTemplateId() string {
	if a == nil {
		return ""
	}
	return a.TemplateId
}

func (a *AutomationInvokeTemplateParams) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationInvokeTemplateParams) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetBrand sets the Brand field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationInvokeTemplateParams) SetBrand(brand *string) {
	a.Brand = brand
	a.require(automationInvokeTemplateParamsFieldBrand)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationInvokeTemplateParams) SetData(data map[string]interface{}) {
	a.Data = data
	a.require(automationInvokeTemplateParamsFieldData)
}

// SetProfile sets the Profile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationInvokeTemplateParams) SetProfile(profile *Profile) {
	a.Profile = profile
	a.require(automationInvokeTemplateParamsFieldProfile)
}

// SetRecipient sets the Recipient field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationInvokeTemplateParams) SetRecipient(recipient *string) {
	a.Recipient = recipient
	a.require(automationInvokeTemplateParamsFieldRecipient)
}

// SetTemplate sets the Template field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationInvokeTemplateParams) SetTemplate(template *string) {
	a.Template = template
	a.require(automationInvokeTemplateParamsFieldTemplate)
}

// SetTemplateId sets the TemplateId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationInvokeTemplateParams) SetTemplateId(templateId string) {
	a.TemplateId = templateId
	a.require(automationInvokeTemplateParamsFieldTemplateId)
}

func (a *AutomationInvokeTemplateParams) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationInvokeTemplateParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationInvokeTemplateParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationInvokeTemplateParams) MarshalJSON() ([]byte, error) {
	type embed AutomationInvokeTemplateParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationInvokeTemplateParams) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationRunContextFieldBrand     = big.NewInt(1 << 0)
	automationRunContextFieldData      = big.NewInt(1 << 1)
	automationRunContextFieldProfile   = big.NewInt(1 << 2)
	automationRunContextFieldTemplate  = big.NewInt(1 << 3)
	automationRunContextFieldRecipient = big.NewInt(1 << 4)
)

type AutomationRunContext struct {
	Brand     *string     `json:"brand,omitempty" url:"brand,omitempty"`
	Data      interface{} `json:"data,omitempty" url:"data,omitempty"`
	Profile   *Profile    `json:"profile,omitempty" url:"profile,omitempty"`
	Template  *string     `json:"template,omitempty" url:"template,omitempty"`
	Recipient *string     `json:"recipient,omitempty" url:"recipient,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationRunContext) GetBrand() *string {
	if a == nil {
		return nil
	}
	return a.Brand
}

func (a *AutomationRunContext) GetData() interface{} {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AutomationRunContext) GetProfile() *Profile {
	if a == nil {
		return nil
	}
	return a.Profile
}

func (a *AutomationRunContext) GetTemplate() *string {
	if a == nil {
		return nil
	}
	return a.Template
}

func (a *AutomationRunContext) GetRecipient() *string {
	if a == nil {
		return nil
	}
	return a.Recipient
}

func (a *AutomationRunContext) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationRunContext) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetBrand sets the Brand field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationRunContext) SetBrand(brand *string) {
	a.Brand = brand
	a.require(automationRunContextFieldBrand)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationRunContext) SetData(data interface{}) {
	a.Data = data
	a.require(automationRunContextFieldData)
}

// SetProfile sets the Profile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationRunContext) SetProfile(profile *Profile) {
	a.Profile = profile
	a.require(automationRunContextFieldProfile)
}

// SetTemplate sets the Template field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationRunContext) SetTemplate(template *string) {
	a.Template = template
	a.require(automationRunContextFieldTemplate)
}

// SetRecipient sets the Recipient field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationRunContext) SetRecipient(recipient *string) {
	a.Recipient = recipient
	a.require(automationRunContextFieldRecipient)
}

func (a *AutomationRunContext) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationRunContext
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationRunContext(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationRunContext) MarshalJSON() ([]byte, error) {
	type embed AutomationRunContext
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationRunContext) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationSendListStepFieldIf       = big.NewInt(1 << 0)
	automationSendListStepFieldRef      = big.NewInt(1 << 1)
	automationSendListStepFieldBrand    = big.NewInt(1 << 2)
	automationSendListStepFieldData     = big.NewInt(1 << 3)
	automationSendListStepFieldList     = big.NewInt(1 << 4)
	automationSendListStepFieldOverride = big.NewInt(1 << 5)
	automationSendListStepFieldTemplate = big.NewInt(1 << 6)
)

type AutomationSendListStep struct {
	If       *string                `json:"if,omitempty" url:"if,omitempty"`
	Ref      *string                `json:"ref,omitempty" url:"ref,omitempty"`
	Brand    *string                `json:"brand,omitempty" url:"brand,omitempty"`
	Data     map[string]interface{} `json:"data,omitempty" url:"data,omitempty"`
	List     string                 `json:"list" url:"list"`
	Override map[string]interface{} `json:"override,omitempty" url:"override,omitempty"`
	Template *string                `json:"template,omitempty" url:"template,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationSendListStep) GetIf() *string {
	if a == nil {
		return nil
	}
	return a.If
}

func (a *AutomationSendListStep) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationSendListStep) GetBrand() *string {
	if a == nil {
		return nil
	}
	return a.Brand
}

func (a *AutomationSendListStep) GetData() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AutomationSendListStep) GetList() string {
	if a == nil {
		return ""
	}
	return a.List
}

func (a *AutomationSendListStep) GetOverride() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Override
}

func (a *AutomationSendListStep) GetTemplate() *string {
	if a == nil {
		return nil
	}
	return a.Template
}

func (a *AutomationSendListStep) Action() string {
	return a.action
}

func (a *AutomationSendListStep) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationSendListStep) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationSendListStep) SetIf(if_ *string) {
	a.If = if_
	a.require(automationSendListStepFieldIf)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationSendListStep) SetRef(ref *string) {
	a.Ref = ref
	a.require(automationSendListStepFieldRef)
}

// SetBrand sets the Brand field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationSendListStep) SetBrand(brand *string) {
	a.Brand = brand
	a.require(automationSendListStepFieldBrand)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationSendListStep) SetData(data map[string]interface{}) {
	a.Data = data
	a.require(automationSendListStepFieldData)
}

// SetList sets the List field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationSendListStep) SetList(list string) {
	a.List = list
	a.require(automationSendListStepFieldList)
}

// SetOverride sets the Override field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationSendListStep) SetOverride(override map[string]interface{}) {
	a.Override = override
	a.require(automationSendListStepFieldOverride)
}

// SetTemplate sets the Template field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationSendListStep) SetTemplate(template *string) {
	a.Template = template
	a.require(automationSendListStepFieldTemplate)
}

func (a *AutomationSendListStep) UnmarshalJSON(data []byte) error {
	type embed AutomationSendListStep
	var unmarshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationSendListStep(unmarshaler.embed)
	if unmarshaler.Action != "send-list" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "send-list", unmarshaler.Action)
	}
	a.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "action")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationSendListStep) MarshalJSON() ([]byte, error) {
	type embed AutomationSendListStep
	var marshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed:  embed(*a),
		Action: "send-list",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationSendListStep) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationSendStepFieldIf        = big.NewInt(1 << 0)
	automationSendStepFieldRef       = big.NewInt(1 << 1)
	automationSendStepFieldBrand     = big.NewInt(1 << 2)
	automationSendStepFieldData      = big.NewInt(1 << 3)
	automationSendStepFieldOverride  = big.NewInt(1 << 4)
	automationSendStepFieldProfile   = big.NewInt(1 << 5)
	automationSendStepFieldRecipient = big.NewInt(1 << 6)
	automationSendStepFieldTemplate  = big.NewInt(1 << 7)
)

type AutomationSendStep struct {
	If        *string                `json:"if,omitempty" url:"if,omitempty"`
	Ref       *string                `json:"ref,omitempty" url:"ref,omitempty"`
	Brand     *string                `json:"brand,omitempty" url:"brand,omitempty"`
	Data      map[string]interface{} `json:"data,omitempty" url:"data,omitempty"`
	Override  map[string]interface{} `json:"override,omitempty" url:"override,omitempty"`
	Profile   interface{}            `json:"profile,omitempty" url:"profile,omitempty"`
	Recipient *string                `json:"recipient,omitempty" url:"recipient,omitempty"`
	Template  *string                `json:"template,omitempty" url:"template,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationSendStep) GetIf() *string {
	if a == nil {
		return nil
	}
	return a.If
}

func (a *AutomationSendStep) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationSendStep) GetBrand() *string {
	if a == nil {
		return nil
	}
	return a.Brand
}

func (a *AutomationSendStep) GetData() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AutomationSendStep) GetOverride() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Override
}

func (a *AutomationSendStep) GetProfile() interface{} {
	if a == nil {
		return nil
	}
	return a.Profile
}

func (a *AutomationSendStep) GetRecipient() *string {
	if a == nil {
		return nil
	}
	return a.Recipient
}

func (a *AutomationSendStep) GetTemplate() *string {
	if a == nil {
		return nil
	}
	return a.Template
}

func (a *AutomationSendStep) Action() string {
	return a.action
}

func (a *AutomationSendStep) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationSendStep) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationSendStep) SetIf(if_ *string) {
	a.If = if_
	a.require(automationSendStepFieldIf)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationSendStep) SetRef(ref *string) {
	a.Ref = ref
	a.require(automationSendStepFieldRef)
}

// SetBrand sets the Brand field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationSendStep) SetBrand(brand *string) {
	a.Brand = brand
	a.require(automationSendStepFieldBrand)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationSendStep) SetData(data map[string]interface{}) {
	a.Data = data
	a.require(automationSendStepFieldData)
}

// SetOverride sets the Override field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationSendStep) SetOverride(override map[string]interface{}) {
	a.Override = override
	a.require(automationSendStepFieldOverride)
}

// SetProfile sets the Profile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationSendStep) SetProfile(profile interface{}) {
	a.Profile = profile
	a.require(automationSendStepFieldProfile)
}

// SetRecipient sets the Recipient field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationSendStep) SetRecipient(recipient *string) {
	a.Recipient = recipient
	a.require(automationSendStepFieldRecipient)
}

// SetTemplate sets the Template field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationSendStep) SetTemplate(template *string) {
	a.Template = template
	a.require(automationSendStepFieldTemplate)
}

func (a *AutomationSendStep) UnmarshalJSON(data []byte) error {
	type embed AutomationSendStep
	var unmarshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationSendStep(unmarshaler.embed)
	if unmarshaler.Action != "send" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "send", unmarshaler.Action)
	}
	a.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "action")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationSendStep) MarshalJSON() ([]byte, error) {
	type embed AutomationSendStep
	var marshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed:  embed(*a),
		Action: "send",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationSendStep) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationStepFieldIf  = big.NewInt(1 << 0)
	automationStepFieldRef = big.NewInt(1 << 1)
)

type AutomationStep struct {
	If  *string `json:"if,omitempty" url:"if,omitempty"`
	Ref *string `json:"ref,omitempty" url:"ref,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationStep) GetIf() *string {
	if a == nil {
		return nil
	}
	return a.If
}

func (a *AutomationStep) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationStep) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationStep) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationStep) SetIf(if_ *string) {
	a.If = if_
	a.require(automationStepFieldIf)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationStep) SetRef(ref *string) {
	a.Ref = ref
	a.require(automationStepFieldRef)
}

func (a *AutomationStep) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationStep
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationStep(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationStep) MarshalJSON() ([]byte, error) {
	type embed AutomationStep
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationStep) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationStepOption struct {
	AutomationAddToDigestStep   *AutomationAddToDigestStep
	AutomationAddToBatchStep    *AutomationAddToBatchStep
	AutomationThrottleStep      *AutomationThrottleStep
	AutomationCancelStep        *AutomationCancelStep
	AutomationDelayStep         *AutomationDelayStep
	AutomationFetchDataStep     *AutomationFetchDataStep
	AutomationInvokeStep        *AutomationInvokeStep
	AutomationSendStep          *AutomationSendStep
	AutomationV2SendStep        *AutomationV2SendStep
	AutomationSendListStep      *AutomationSendListStep
	AutomationUpdateProfileStep *AutomationUpdateProfileStep

	typ string
}

func (a *AutomationStepOption) GetAutomationAddToDigestStep() *AutomationAddToDigestStep {
	if a == nil {
		return nil
	}
	return a.AutomationAddToDigestStep
}

func (a *AutomationStepOption) GetAutomationAddToBatchStep() *AutomationAddToBatchStep {
	if a == nil {
		return nil
	}
	return a.AutomationAddToBatchStep
}

func (a *AutomationStepOption) GetAutomationThrottleStep() *AutomationThrottleStep {
	if a == nil {
		return nil
	}
	return a.AutomationThrottleStep
}

func (a *AutomationStepOption) GetAutomationCancelStep() *AutomationCancelStep {
	if a == nil {
		return nil
	}
	return a.AutomationCancelStep
}

func (a *AutomationStepOption) GetAutomationDelayStep() *AutomationDelayStep {
	if a == nil {
		return nil
	}
	return a.AutomationDelayStep
}

func (a *AutomationStepOption) GetAutomationFetchDataStep() *AutomationFetchDataStep {
	if a == nil {
		return nil
	}
	return a.AutomationFetchDataStep
}

func (a *AutomationStepOption) GetAutomationInvokeStep() *AutomationInvokeStep {
	if a == nil {
		return nil
	}
	return a.AutomationInvokeStep
}

func (a *AutomationStepOption) GetAutomationSendStep() *AutomationSendStep {
	if a == nil {
		return nil
	}
	return a.AutomationSendStep
}

func (a *AutomationStepOption) GetAutomationV2SendStep() *AutomationV2SendStep {
	if a == nil {
		return nil
	}
	return a.AutomationV2SendStep
}

func (a *AutomationStepOption) GetAutomationSendListStep() *AutomationSendListStep {
	if a == nil {
		return nil
	}
	return a.AutomationSendListStep
}

func (a *AutomationStepOption) GetAutomationUpdateProfileStep() *AutomationUpdateProfileStep {
	if a == nil {
		return nil
	}
	return a.AutomationUpdateProfileStep
}

func (a *AutomationStepOption) UnmarshalJSON(data []byte) error {
	valueAutomationAddToDigestStep := new(AutomationAddToDigestStep)
	if err := json.Unmarshal(data, &valueAutomationAddToDigestStep); err == nil {
		a.typ = "AutomationAddToDigestStep"
		a.AutomationAddToDigestStep = valueAutomationAddToDigestStep
		return nil
	}
	valueAutomationAddToBatchStep := new(AutomationAddToBatchStep)
	if err := json.Unmarshal(data, &valueAutomationAddToBatchStep); err == nil {
		a.typ = "AutomationAddToBatchStep"
		a.AutomationAddToBatchStep = valueAutomationAddToBatchStep
		return nil
	}
	valueAutomationThrottleStep := new(AutomationThrottleStep)
	if err := json.Unmarshal(data, &valueAutomationThrottleStep); err == nil {
		a.typ = "AutomationThrottleStep"
		a.AutomationThrottleStep = valueAutomationThrottleStep
		return nil
	}
	valueAutomationCancelStep := new(AutomationCancelStep)
	if err := json.Unmarshal(data, &valueAutomationCancelStep); err == nil {
		a.typ = "AutomationCancelStep"
		a.AutomationCancelStep = valueAutomationCancelStep
		return nil
	}
	valueAutomationDelayStep := new(AutomationDelayStep)
	if err := json.Unmarshal(data, &valueAutomationDelayStep); err == nil {
		a.typ = "AutomationDelayStep"
		a.AutomationDelayStep = valueAutomationDelayStep
		return nil
	}
	valueAutomationFetchDataStep := new(AutomationFetchDataStep)
	if err := json.Unmarshal(data, &valueAutomationFetchDataStep); err == nil {
		a.typ = "AutomationFetchDataStep"
		a.AutomationFetchDataStep = valueAutomationFetchDataStep
		return nil
	}
	valueAutomationInvokeStep := new(AutomationInvokeStep)
	if err := json.Unmarshal(data, &valueAutomationInvokeStep); err == nil {
		a.typ = "AutomationInvokeStep"
		a.AutomationInvokeStep = valueAutomationInvokeStep
		return nil
	}
	valueAutomationSendStep := new(AutomationSendStep)
	if err := json.Unmarshal(data, &valueAutomationSendStep); err == nil {
		a.typ = "AutomationSendStep"
		a.AutomationSendStep = valueAutomationSendStep
		return nil
	}
	valueAutomationV2SendStep := new(AutomationV2SendStep)
	if err := json.Unmarshal(data, &valueAutomationV2SendStep); err == nil {
		a.typ = "AutomationV2SendStep"
		a.AutomationV2SendStep = valueAutomationV2SendStep
		return nil
	}
	valueAutomationSendListStep := new(AutomationSendListStep)
	if err := json.Unmarshal(data, &valueAutomationSendListStep); err == nil {
		a.typ = "AutomationSendListStep"
		a.AutomationSendListStep = valueAutomationSendListStep
		return nil
	}
	valueAutomationUpdateProfileStep := new(AutomationUpdateProfileStep)
	if err := json.Unmarshal(data, &valueAutomationUpdateProfileStep); err == nil {
		a.typ = "AutomationUpdateProfileStep"
		a.AutomationUpdateProfileStep = valueAutomationUpdateProfileStep
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AutomationStepOption) MarshalJSON() ([]byte, error) {
	if a.typ == "AutomationAddToDigestStep" || a.AutomationAddToDigestStep != nil {
		return json.Marshal(a.AutomationAddToDigestStep)
	}
	if a.typ == "AutomationAddToBatchStep" || a.AutomationAddToBatchStep != nil {
		return json.Marshal(a.AutomationAddToBatchStep)
	}
	if a.typ == "AutomationThrottleStep" || a.AutomationThrottleStep != nil {
		return json.Marshal(a.AutomationThrottleStep)
	}
	if a.typ == "AutomationCancelStep" || a.AutomationCancelStep != nil {
		return json.Marshal(a.AutomationCancelStep)
	}
	if a.typ == "AutomationDelayStep" || a.AutomationDelayStep != nil {
		return json.Marshal(a.AutomationDelayStep)
	}
	if a.typ == "AutomationFetchDataStep" || a.AutomationFetchDataStep != nil {
		return json.Marshal(a.AutomationFetchDataStep)
	}
	if a.typ == "AutomationInvokeStep" || a.AutomationInvokeStep != nil {
		return json.Marshal(a.AutomationInvokeStep)
	}
	if a.typ == "AutomationSendStep" || a.AutomationSendStep != nil {
		return json.Marshal(a.AutomationSendStep)
	}
	if a.typ == "AutomationV2SendStep" || a.AutomationV2SendStep != nil {
		return json.Marshal(a.AutomationV2SendStep)
	}
	if a.typ == "AutomationSendListStep" || a.AutomationSendListStep != nil {
		return json.Marshal(a.AutomationSendListStep)
	}
	if a.typ == "AutomationUpdateProfileStep" || a.AutomationUpdateProfileStep != nil {
		return json.Marshal(a.AutomationUpdateProfileStep)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AutomationStepOptionVisitor interface {
	VisitAutomationAddToDigestStep(*AutomationAddToDigestStep) error
	VisitAutomationAddToBatchStep(*AutomationAddToBatchStep) error
	VisitAutomationThrottleStep(*AutomationThrottleStep) error
	VisitAutomationCancelStep(*AutomationCancelStep) error
	VisitAutomationDelayStep(*AutomationDelayStep) error
	VisitAutomationFetchDataStep(*AutomationFetchDataStep) error
	VisitAutomationInvokeStep(*AutomationInvokeStep) error
	VisitAutomationSendStep(*AutomationSendStep) error
	VisitAutomationV2SendStep(*AutomationV2SendStep) error
	VisitAutomationSendListStep(*AutomationSendListStep) error
	VisitAutomationUpdateProfileStep(*AutomationUpdateProfileStep) error
}

func (a *AutomationStepOption) Accept(visitor AutomationStepOptionVisitor) error {
	if a.typ == "AutomationAddToDigestStep" || a.AutomationAddToDigestStep != nil {
		return visitor.VisitAutomationAddToDigestStep(a.AutomationAddToDigestStep)
	}
	if a.typ == "AutomationAddToBatchStep" || a.AutomationAddToBatchStep != nil {
		return visitor.VisitAutomationAddToBatchStep(a.AutomationAddToBatchStep)
	}
	if a.typ == "AutomationThrottleStep" || a.AutomationThrottleStep != nil {
		return visitor.VisitAutomationThrottleStep(a.AutomationThrottleStep)
	}
	if a.typ == "AutomationCancelStep" || a.AutomationCancelStep != nil {
		return visitor.VisitAutomationCancelStep(a.AutomationCancelStep)
	}
	if a.typ == "AutomationDelayStep" || a.AutomationDelayStep != nil {
		return visitor.VisitAutomationDelayStep(a.AutomationDelayStep)
	}
	if a.typ == "AutomationFetchDataStep" || a.AutomationFetchDataStep != nil {
		return visitor.VisitAutomationFetchDataStep(a.AutomationFetchDataStep)
	}
	if a.typ == "AutomationInvokeStep" || a.AutomationInvokeStep != nil {
		return visitor.VisitAutomationInvokeStep(a.AutomationInvokeStep)
	}
	if a.typ == "AutomationSendStep" || a.AutomationSendStep != nil {
		return visitor.VisitAutomationSendStep(a.AutomationSendStep)
	}
	if a.typ == "AutomationV2SendStep" || a.AutomationV2SendStep != nil {
		return visitor.VisitAutomationV2SendStep(a.AutomationV2SendStep)
	}
	if a.typ == "AutomationSendListStep" || a.AutomationSendListStep != nil {
		return visitor.VisitAutomationSendListStep(a.AutomationSendListStep)
	}
	if a.typ == "AutomationUpdateProfileStep" || a.AutomationUpdateProfileStep != nil {
		return visitor.VisitAutomationUpdateProfileStep(a.AutomationUpdateProfileStep)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

var (
	automationThrottleOnThrottleFieldNodeId = big.NewInt(1 << 0)
)

type AutomationThrottleOnThrottle struct {
	// The node to go to if the request is throttled
	NodeId string `json:"$node_id" url:"$node_id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationThrottleOnThrottle) GetNodeId() string {
	if a == nil {
		return ""
	}
	return a.NodeId
}

func (a *AutomationThrottleOnThrottle) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationThrottleOnThrottle) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetNodeId sets the NodeId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationThrottleOnThrottle) SetNodeId(nodeId string) {
	a.NodeId = nodeId
	a.require(automationThrottleOnThrottleFieldNodeId)
}

func (a *AutomationThrottleOnThrottle) UnmarshalJSON(data []byte) error {
	type unmarshaler AutomationThrottleOnThrottle
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutomationThrottleOnThrottle(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationThrottleOnThrottle) MarshalJSON() ([]byte, error) {
	type embed AutomationThrottleOnThrottle
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationThrottleOnThrottle) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AutomationThrottleScope string

const (
	AutomationThrottleScopeUser    AutomationThrottleScope = "user"
	AutomationThrottleScopeGlobal  AutomationThrottleScope = "global"
	AutomationThrottleScopeDynamic AutomationThrottleScope = "dynamic"
)

func NewAutomationThrottleScopeFromString(s string) (AutomationThrottleScope, error) {
	switch s {
	case "user":
		return AutomationThrottleScopeUser, nil
	case "global":
		return AutomationThrottleScopeGlobal, nil
	case "dynamic":
		return AutomationThrottleScopeDynamic, nil
	}
	var t AutomationThrottleScope
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AutomationThrottleScope) Ptr() *AutomationThrottleScope {
	return &a
}

var (
	automationThrottleStepFieldIf          = big.NewInt(1 << 0)
	automationThrottleStepFieldRef         = big.NewInt(1 << 1)
	automationThrottleStepFieldMaxAllowed  = big.NewInt(1 << 2)
	automationThrottleStepFieldPeriod      = big.NewInt(1 << 3)
	automationThrottleStepFieldScope       = big.NewInt(1 << 4)
	automationThrottleStepFieldThrottleKey = big.NewInt(1 << 5)
	automationThrottleStepFieldOnThrottle  = big.NewInt(1 << 6)
)

type AutomationThrottleStep struct {
	If  *string `json:"if,omitempty" url:"if,omitempty"`
	Ref *string `json:"ref,omitempty" url:"ref,omitempty"`
	// Maximum number of allowed notifications in that timeframe
	MaxAllowed int `json:"max_allowed" url:"max_allowed"`
	// Defines the throttle period which corresponds to the max_allowed. Specified as an ISO 8601 duration, https://en.wikipedia.org/wiki/ISO_8601#Durations
	Period string                  `json:"period" url:"period"`
	Scope  AutomationThrottleScope `json:"scope" url:"scope"`
	// If using scope=dynamic, provide the reference (e.g., refs.data.throttle_key) to the how the throttle should be identified
	ThrottleKey *string `json:"throttle_key,omitempty" url:"throttle_key,omitempty"`
	// Value must be true
	OnThrottle *AutomationThrottleOnThrottle `json:"on_throttle" url:"on_throttle"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	action         string
	shouldAlert    bool

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationThrottleStep) GetIf() *string {
	if a == nil {
		return nil
	}
	return a.If
}

func (a *AutomationThrottleStep) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationThrottleStep) GetMaxAllowed() int {
	if a == nil {
		return 0
	}
	return a.MaxAllowed
}

func (a *AutomationThrottleStep) GetPeriod() string {
	if a == nil {
		return ""
	}
	return a.Period
}

func (a *AutomationThrottleStep) GetScope() AutomationThrottleScope {
	if a == nil {
		return ""
	}
	return a.Scope
}

func (a *AutomationThrottleStep) GetThrottleKey() *string {
	if a == nil {
		return nil
	}
	return a.ThrottleKey
}

func (a *AutomationThrottleStep) GetOnThrottle() *AutomationThrottleOnThrottle {
	if a == nil {
		return nil
	}
	return a.OnThrottle
}

func (a *AutomationThrottleStep) Action() string {
	return a.action
}

func (a *AutomationThrottleStep) ShouldAlert() bool {
	return a.shouldAlert
}

func (a *AutomationThrottleStep) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationThrottleStep) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationThrottleStep) SetIf(if_ *string) {
	a.If = if_
	a.require(automationThrottleStepFieldIf)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationThrottleStep) SetRef(ref *string) {
	a.Ref = ref
	a.require(automationThrottleStepFieldRef)
}

// SetMaxAllowed sets the MaxAllowed field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationThrottleStep) SetMaxAllowed(maxAllowed int) {
	a.MaxAllowed = maxAllowed
	a.require(automationThrottleStepFieldMaxAllowed)
}

// SetPeriod sets the Period field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationThrottleStep) SetPeriod(period string) {
	a.Period = period
	a.require(automationThrottleStepFieldPeriod)
}

// SetScope sets the Scope field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationThrottleStep) SetScope(scope AutomationThrottleScope) {
	a.Scope = scope
	a.require(automationThrottleStepFieldScope)
}

// SetThrottleKey sets the ThrottleKey field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationThrottleStep) SetThrottleKey(throttleKey *string) {
	a.ThrottleKey = throttleKey
	a.require(automationThrottleStepFieldThrottleKey)
}

// SetOnThrottle sets the OnThrottle field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationThrottleStep) SetOnThrottle(onThrottle *AutomationThrottleOnThrottle) {
	a.OnThrottle = onThrottle
	a.require(automationThrottleStepFieldOnThrottle)
}

func (a *AutomationThrottleStep) UnmarshalJSON(data []byte) error {
	type embed AutomationThrottleStep
	var unmarshaler = struct {
		embed
		Action      string `json:"action"`
		ShouldAlert bool   `json:"should_alert"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationThrottleStep(unmarshaler.embed)
	if unmarshaler.Action != "throttle" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "throttle", unmarshaler.Action)
	}
	a.action = unmarshaler.Action
	if unmarshaler.ShouldAlert != false {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, false, unmarshaler.ShouldAlert)
	}
	a.shouldAlert = unmarshaler.ShouldAlert
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "action", "should_alert")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationThrottleStep) MarshalJSON() ([]byte, error) {
	type embed AutomationThrottleStep
	var marshaler = struct {
		embed
		Action      string `json:"action"`
		ShouldAlert bool   `json:"should_alert"`
	}{
		embed:       embed(*a),
		Action:      "throttle",
		ShouldAlert: false,
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationThrottleStep) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationUpdateProfileStepFieldRecipientId = big.NewInt(1 << 0)
	automationUpdateProfileStepFieldProfile     = big.NewInt(1 << 1)
	automationUpdateProfileStepFieldMerge       = big.NewInt(1 << 2)
)

type AutomationUpdateProfileStep struct {
	RecipientId string         `json:"recipient_id" url:"recipient_id"`
	Profile     Profile        `json:"profile" url:"profile"`
	Merge       MergeAlgorithm `json:"merge" url:"merge"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationUpdateProfileStep) GetRecipientId() string {
	if a == nil {
		return ""
	}
	return a.RecipientId
}

func (a *AutomationUpdateProfileStep) GetProfile() Profile {
	if a == nil {
		return nil
	}
	return a.Profile
}

func (a *AutomationUpdateProfileStep) GetMerge() MergeAlgorithm {
	if a == nil {
		return ""
	}
	return a.Merge
}

func (a *AutomationUpdateProfileStep) Action() string {
	return a.action
}

func (a *AutomationUpdateProfileStep) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationUpdateProfileStep) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetRecipientId sets the RecipientId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationUpdateProfileStep) SetRecipientId(recipientId string) {
	a.RecipientId = recipientId
	a.require(automationUpdateProfileStepFieldRecipientId)
}

// SetProfile sets the Profile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationUpdateProfileStep) SetProfile(profile Profile) {
	a.Profile = profile
	a.require(automationUpdateProfileStepFieldProfile)
}

// SetMerge sets the Merge field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationUpdateProfileStep) SetMerge(merge MergeAlgorithm) {
	a.Merge = merge
	a.require(automationUpdateProfileStepFieldMerge)
}

func (a *AutomationUpdateProfileStep) UnmarshalJSON(data []byte) error {
	type embed AutomationUpdateProfileStep
	var unmarshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationUpdateProfileStep(unmarshaler.embed)
	if unmarshaler.Action != "update-profile" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "update-profile", unmarshaler.Action)
	}
	a.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "action")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationUpdateProfileStep) MarshalJSON() ([]byte, error) {
	type embed AutomationUpdateProfileStep
	var marshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed:  embed(*a),
		Action: "update-profile",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationUpdateProfileStep) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	automationV2SendStepFieldIf      = big.NewInt(1 << 0)
	automationV2SendStepFieldRef     = big.NewInt(1 << 1)
	automationV2SendStepFieldMessage = big.NewInt(1 << 2)
)

type AutomationV2SendStep struct {
	If      *string  `json:"if,omitempty" url:"if,omitempty"`
	Ref     *string  `json:"ref,omitempty" url:"ref,omitempty"`
	Message *Message `json:"message" url:"message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	action         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AutomationV2SendStep) GetIf() *string {
	if a == nil {
		return nil
	}
	return a.If
}

func (a *AutomationV2SendStep) GetRef() *string {
	if a == nil {
		return nil
	}
	return a.Ref
}

func (a *AutomationV2SendStep) GetMessage() *Message {
	if a == nil {
		return nil
	}
	return a.Message
}

func (a *AutomationV2SendStep) Action() string {
	return a.action
}

func (a *AutomationV2SendStep) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutomationV2SendStep) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationV2SendStep) SetIf(if_ *string) {
	a.If = if_
	a.require(automationV2SendStepFieldIf)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationV2SendStep) SetRef(ref *string) {
	a.Ref = ref
	a.require(automationV2SendStepFieldRef)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutomationV2SendStep) SetMessage(message *Message) {
	a.Message = message
	a.require(automationV2SendStepFieldMessage)
}

func (a *AutomationV2SendStep) UnmarshalJSON(data []byte) error {
	type embed AutomationV2SendStep
	var unmarshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AutomationV2SendStep(unmarshaler.embed)
	if unmarshaler.Action != "send" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "send", unmarshaler.Action)
	}
	a.action = unmarshaler.Action
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "action")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AutomationV2SendStep) MarshalJSON() ([]byte, error) {
	type embed AutomationV2SendStep
	var marshaler = struct {
		embed
		Action string `json:"action"`
	}{
		embed:  embed(*a),
		Action: "send",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutomationV2SendStep) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type MergeAlgorithm string

const (
	MergeAlgorithmReplace   MergeAlgorithm = "replace"
	MergeAlgorithmNone      MergeAlgorithm = "none"
	MergeAlgorithmOverwrite MergeAlgorithm = "overwrite"
	MergeAlgorithmSoftMerge MergeAlgorithm = "soft-merge"
)

func NewMergeAlgorithmFromString(s string) (MergeAlgorithm, error) {
	switch s {
	case "replace":
		return MergeAlgorithmReplace, nil
	case "none":
		return MergeAlgorithmNone, nil
	case "overwrite":
		return MergeAlgorithmOverwrite, nil
	case "soft-merge":
		return MergeAlgorithmSoftMerge, nil
	}
	var t MergeAlgorithm
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MergeAlgorithm) Ptr() *MergeAlgorithm {
	return &m
}

type Profile = interface{}
