// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

type Attachment = map[string]interface{}

var (
	audienceFilterFieldValue = big.NewInt(1 << 0)
)

type AudienceFilter struct {
	// Send to users only if they are member of the account
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	operator       string
	path           string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AudienceFilter) GetValue() string {
	if a == nil {
		return ""
	}
	return a.Value
}

func (a *AudienceFilter) Operator() string {
	return a.operator
}

func (a *AudienceFilter) Path() string {
	return a.path
}

func (a *AudienceFilter) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudienceFilter) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AudienceFilter) SetValue(value string) {
	a.Value = value
	a.require(audienceFilterFieldValue)
}

func (a *AudienceFilter) UnmarshalJSON(data []byte) error {
	type embed AudienceFilter
	var unmarshaler = struct {
		embed
		Operator string `json:"operator"`
		Path     string `json:"path"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AudienceFilter(unmarshaler.embed)
	if unmarshaler.Operator != "MEMBER_OF" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "MEMBER_OF", unmarshaler.Operator)
	}
	a.operator = unmarshaler.Operator
	if unmarshaler.Path != "account_id" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "account_id", unmarshaler.Path)
	}
	a.path = unmarshaler.Path
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "operator", "path")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudienceFilter) MarshalJSON() ([]byte, error) {
	type embed AudienceFilter
	var marshaler = struct {
		embed
		Operator string `json:"operator"`
		Path     string `json:"path"`
	}{
		embed:    embed(*a),
		Operator: "MEMBER_OF",
		Path:     "account_id",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AudienceFilter) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	audienceRecipientFieldAudienceId = big.NewInt(1 << 0)
	audienceRecipientFieldData       = big.NewInt(1 << 1)
	audienceRecipientFieldFilters    = big.NewInt(1 << 2)
)

type AudienceRecipient struct {
	// A unique identifier associated with an Audience. A message will be sent to each user in the audience.
	AudienceId string            `json:"audience_id" url:"audience_id"`
	Data       *MessageData      `json:"data,omitempty" url:"data,omitempty"`
	Filters    []*AudienceFilter `json:"filters,omitempty" url:"filters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AudienceRecipient) GetAudienceId() string {
	if a == nil {
		return ""
	}
	return a.AudienceId
}

func (a *AudienceRecipient) GetData() *MessageData {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AudienceRecipient) GetFilters() []*AudienceFilter {
	if a == nil {
		return nil
	}
	return a.Filters
}

func (a *AudienceRecipient) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudienceRecipient) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetAudienceId sets the AudienceId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AudienceRecipient) SetAudienceId(audienceId string) {
	a.AudienceId = audienceId
	a.require(audienceRecipientFieldAudienceId)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AudienceRecipient) SetData(data *MessageData) {
	a.Data = data
	a.require(audienceRecipientFieldData)
}

// SetFilters sets the Filters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AudienceRecipient) SetFilters(filters []*AudienceFilter) {
	a.Filters = filters
	a.require(audienceRecipientFieldFilters)
}

func (a *AudienceRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler AudienceRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AudienceRecipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudienceRecipient) MarshalJSON() ([]byte, error) {
	type embed AudienceRecipient
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AudienceRecipient) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	baseMessageFieldData        = big.NewInt(1 << 0)
	baseMessageFieldBrandId     = big.NewInt(1 << 1)
	baseMessageFieldChannels    = big.NewInt(1 << 2)
	baseMessageFieldContext     = big.NewInt(1 << 3)
	baseMessageFieldMetadata    = big.NewInt(1 << 4)
	baseMessageFieldPreferences = big.NewInt(1 << 5)
	baseMessageFieldProviders   = big.NewInt(1 << 6)
	baseMessageFieldRouting     = big.NewInt(1 << 7)
	baseMessageFieldTimeout     = big.NewInt(1 << 8)
	baseMessageFieldDelay       = big.NewInt(1 << 9)
	baseMessageFieldExpiry      = big.NewInt(1 << 10)
)

type BaseMessage struct {
	// An arbitrary object that includes any data you want to pass to the message.
	// The data will populate the corresponding template or elements variables.
	Data    *MessageData `json:"data,omitempty" url:"data,omitempty"`
	BrandId *string      `json:"brand_id,omitempty" url:"brand_id,omitempty"`
	// "Define run-time configuration for one or more channels. If you don't specify channels, the default configuration for each channel will be used. Valid ChannelId's are: email, sms, push, inbox, direct_message, banner, and webhook."
	Channels *MessageChannels `json:"channels,omitempty" url:"channels,omitempty"`
	// Context to load with this recipient. Will override any context set on message.context.
	Context *MessageContext `json:"context,omitempty" url:"context,omitempty"`
	// Metadata such as utm tracking attached with the notification through this channel.
	Metadata    *MessageMetadata    `json:"metadata,omitempty" url:"metadata,omitempty"`
	Preferences *MessagePreferences `json:"preferences,omitempty" url:"preferences,omitempty"`
	// An object whose keys are valid provider identifiers which map to an object.
	Providers *MessageProviders `json:"providers,omitempty" url:"providers,omitempty"`
	Routing   *Routing          `json:"routing,omitempty" url:"routing,omitempty"`
	// Time in ms to attempt the channel before failing over to the next available channel.
	Timeout *Timeout `json:"timeout,omitempty" url:"timeout,omitempty"`
	// Defines the time to wait before delivering the message. You can specify one of the following options. Duration with the number of milliseconds to delay. Until with an ISO 8601 timestamp that specifies when it should be delivered. Until with an OpenStreetMap opening_hours-like format that specifies the [Delivery Window](https://www.courier.com/docs/platform/sending/failover/#delivery-window) (e.g., 'Mo-Fr 08:00-18:00pm')
	Delay *Delay `json:"delay,omitempty" url:"delay,omitempty"`
	// "Expiry allows you to set an absolute or relative time in which a message expires.
	// Note: This is only valid for the Courier Inbox channel as of 12-08-2022."
	Expiry *Expiry `json:"expiry,omitempty" url:"expiry,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BaseMessage) GetData() *MessageData {
	if b == nil {
		return nil
	}
	return b.Data
}

func (b *BaseMessage) GetBrandId() *string {
	if b == nil {
		return nil
	}
	return b.BrandId
}

func (b *BaseMessage) GetChannels() *MessageChannels {
	if b == nil {
		return nil
	}
	return b.Channels
}

func (b *BaseMessage) GetContext() *MessageContext {
	if b == nil {
		return nil
	}
	return b.Context
}

func (b *BaseMessage) GetMetadata() *MessageMetadata {
	if b == nil {
		return nil
	}
	return b.Metadata
}

func (b *BaseMessage) GetPreferences() *MessagePreferences {
	if b == nil {
		return nil
	}
	return b.Preferences
}

func (b *BaseMessage) GetProviders() *MessageProviders {
	if b == nil {
		return nil
	}
	return b.Providers
}

func (b *BaseMessage) GetRouting() *Routing {
	if b == nil {
		return nil
	}
	return b.Routing
}

func (b *BaseMessage) GetTimeout() *Timeout {
	if b == nil {
		return nil
	}
	return b.Timeout
}

func (b *BaseMessage) GetDelay() *Delay {
	if b == nil {
		return nil
	}
	return b.Delay
}

func (b *BaseMessage) GetExpiry() *Expiry {
	if b == nil {
		return nil
	}
	return b.Expiry
}

func (b *BaseMessage) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BaseMessage) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseMessage) SetData(data *MessageData) {
	b.Data = data
	b.require(baseMessageFieldData)
}

// SetBrandId sets the BrandId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseMessage) SetBrandId(brandId *string) {
	b.BrandId = brandId
	b.require(baseMessageFieldBrandId)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseMessage) SetChannels(channels *MessageChannels) {
	b.Channels = channels
	b.require(baseMessageFieldChannels)
}

// SetContext sets the Context field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseMessage) SetContext(context *MessageContext) {
	b.Context = context
	b.require(baseMessageFieldContext)
}

// SetMetadata sets the Metadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseMessage) SetMetadata(metadata *MessageMetadata) {
	b.Metadata = metadata
	b.require(baseMessageFieldMetadata)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseMessage) SetPreferences(preferences *MessagePreferences) {
	b.Preferences = preferences
	b.require(baseMessageFieldPreferences)
}

// SetProviders sets the Providers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseMessage) SetProviders(providers *MessageProviders) {
	b.Providers = providers
	b.require(baseMessageFieldProviders)
}

// SetRouting sets the Routing field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseMessage) SetRouting(routing *Routing) {
	b.Routing = routing
	b.require(baseMessageFieldRouting)
}

// SetTimeout sets the Timeout field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseMessage) SetTimeout(timeout *Timeout) {
	b.Timeout = timeout
	b.require(baseMessageFieldTimeout)
}

// SetDelay sets the Delay field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseMessage) SetDelay(delay *Delay) {
	b.Delay = delay
	b.require(baseMessageFieldDelay)
}

// SetExpiry sets the Expiry field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseMessage) SetExpiry(expiry *Expiry) {
	b.Expiry = expiry
	b.require(baseMessageFieldExpiry)
}

func (b *BaseMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler BaseMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BaseMessage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BaseMessage) MarshalJSON() ([]byte, error) {
	type embed BaseMessage
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BaseMessage) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	baseMessageSendToFieldTo = big.NewInt(1 << 0)
)

type BaseMessageSendTo struct {
	// The recipient or a list of recipients of the message
	To *MessageRecipient `json:"to,omitempty" url:"to,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BaseMessageSendTo) GetTo() *MessageRecipient {
	if b == nil {
		return nil
	}
	return b.To
}

func (b *BaseMessageSendTo) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BaseMessageSendTo) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetTo sets the To field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseMessageSendTo) SetTo(to *MessageRecipient) {
	b.To = to
	b.require(baseMessageSendToFieldTo)
}

func (b *BaseMessageSendTo) UnmarshalJSON(data []byte) error {
	type unmarshaler BaseMessageSendTo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BaseMessageSendTo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BaseMessageSendTo) MarshalJSON() ([]byte, error) {
	type embed BaseMessageSendTo
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BaseMessageSendTo) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	baseSocialPresenceFieldUrl = big.NewInt(1 << 0)
)

type BaseSocialPresence struct {
	Url string `json:"url" url:"url"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BaseSocialPresence) GetUrl() string {
	if b == nil {
		return ""
	}
	return b.Url
}

func (b *BaseSocialPresence) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BaseSocialPresence) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetUrl sets the Url field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseSocialPresence) SetUrl(url string) {
	b.Url = url
	b.require(baseSocialPresenceFieldUrl)
}

func (b *BaseSocialPresence) UnmarshalJSON(data []byte) error {
	type unmarshaler BaseSocialPresence
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BaseSocialPresence(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BaseSocialPresence) MarshalJSON() ([]byte, error) {
	type embed BaseSocialPresence
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BaseSocialPresence) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	brandSettingsEmailFieldTemplateOverride = big.NewInt(1 << 0)
	brandSettingsEmailFieldHead             = big.NewInt(1 << 1)
	brandSettingsEmailFieldFooter           = big.NewInt(1 << 2)
	brandSettingsEmailFieldHeader           = big.NewInt(1 << 3)
)

type BrandSettingsEmail struct {
	TemplateOverride *BrandTemplateOverride `json:"templateOverride,omitempty" url:"templateOverride,omitempty"`
	Head             *EmailHead             `json:"head,omitempty" url:"head,omitempty"`
	Footer           *EmailFooter           `json:"footer,omitempty" url:"footer,omitempty"`
	Header           *EmailHeader           `json:"header,omitempty" url:"header,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandSettingsEmail) GetTemplateOverride() *BrandTemplateOverride {
	if b == nil {
		return nil
	}
	return b.TemplateOverride
}

func (b *BrandSettingsEmail) GetHead() *EmailHead {
	if b == nil {
		return nil
	}
	return b.Head
}

func (b *BrandSettingsEmail) GetFooter() *EmailFooter {
	if b == nil {
		return nil
	}
	return b.Footer
}

func (b *BrandSettingsEmail) GetHeader() *EmailHeader {
	if b == nil {
		return nil
	}
	return b.Header
}

func (b *BrandSettingsEmail) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandSettingsEmail) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetTemplateOverride sets the TemplateOverride field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsEmail) SetTemplateOverride(templateOverride *BrandTemplateOverride) {
	b.TemplateOverride = templateOverride
	b.require(brandSettingsEmailFieldTemplateOverride)
}

// SetHead sets the Head field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsEmail) SetHead(head *EmailHead) {
	b.Head = head
	b.require(brandSettingsEmailFieldHead)
}

// SetFooter sets the Footer field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsEmail) SetFooter(footer *EmailFooter) {
	b.Footer = footer
	b.require(brandSettingsEmailFieldFooter)
}

// SetHeader sets the Header field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsEmail) SetHeader(header *EmailHeader) {
	b.Header = header
	b.require(brandSettingsEmailFieldHeader)
}

func (b *BrandSettingsEmail) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandSettingsEmail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandSettingsEmail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandSettingsEmail) MarshalJSON() ([]byte, error) {
	type embed BrandSettingsEmail
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BrandSettingsEmail) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	brandSettingsInAppFieldBorderRadius       = big.NewInt(1 << 0)
	brandSettingsInAppFieldDisableMessageIcon = big.NewInt(1 << 1)
	brandSettingsInAppFieldFontFamily         = big.NewInt(1 << 2)
	brandSettingsInAppFieldPlacement          = big.NewInt(1 << 3)
	brandSettingsInAppFieldWidgetBackground   = big.NewInt(1 << 4)
	brandSettingsInAppFieldColors             = big.NewInt(1 << 5)
	brandSettingsInAppFieldIcons              = big.NewInt(1 << 6)
	brandSettingsInAppFieldPreferences        = big.NewInt(1 << 7)
)

type BrandSettingsInApp struct {
	BorderRadius       *string           `json:"borderRadius,omitempty" url:"borderRadius,omitempty"`
	DisableMessageIcon *bool             `json:"disableMessageIcon,omitempty" url:"disableMessageIcon,omitempty"`
	FontFamily         *string           `json:"fontFamily,omitempty" url:"fontFamily,omitempty"`
	Placement          *InAppPlacement   `json:"placement,omitempty" url:"placement,omitempty"`
	WidgetBackground   *WidgetBackground `json:"widgetBackground" url:"widgetBackground"`
	Colors             *BrandColors      `json:"colors" url:"colors"`
	Icons              *Icons            `json:"icons" url:"icons"`
	Preferences        *Preferences      `json:"preferences" url:"preferences"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandSettingsInApp) GetBorderRadius() *string {
	if b == nil {
		return nil
	}
	return b.BorderRadius
}

func (b *BrandSettingsInApp) GetDisableMessageIcon() *bool {
	if b == nil {
		return nil
	}
	return b.DisableMessageIcon
}

func (b *BrandSettingsInApp) GetFontFamily() *string {
	if b == nil {
		return nil
	}
	return b.FontFamily
}

func (b *BrandSettingsInApp) GetPlacement() *InAppPlacement {
	if b == nil {
		return nil
	}
	return b.Placement
}

func (b *BrandSettingsInApp) GetWidgetBackground() *WidgetBackground {
	if b == nil {
		return nil
	}
	return b.WidgetBackground
}

func (b *BrandSettingsInApp) GetColors() *BrandColors {
	if b == nil {
		return nil
	}
	return b.Colors
}

func (b *BrandSettingsInApp) GetIcons() *Icons {
	if b == nil {
		return nil
	}
	return b.Icons
}

func (b *BrandSettingsInApp) GetPreferences() *Preferences {
	if b == nil {
		return nil
	}
	return b.Preferences
}

func (b *BrandSettingsInApp) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandSettingsInApp) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetBorderRadius sets the BorderRadius field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsInApp) SetBorderRadius(borderRadius *string) {
	b.BorderRadius = borderRadius
	b.require(brandSettingsInAppFieldBorderRadius)
}

// SetDisableMessageIcon sets the DisableMessageIcon field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsInApp) SetDisableMessageIcon(disableMessageIcon *bool) {
	b.DisableMessageIcon = disableMessageIcon
	b.require(brandSettingsInAppFieldDisableMessageIcon)
}

// SetFontFamily sets the FontFamily field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsInApp) SetFontFamily(fontFamily *string) {
	b.FontFamily = fontFamily
	b.require(brandSettingsInAppFieldFontFamily)
}

// SetPlacement sets the Placement field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsInApp) SetPlacement(placement *InAppPlacement) {
	b.Placement = placement
	b.require(brandSettingsInAppFieldPlacement)
}

// SetWidgetBackground sets the WidgetBackground field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsInApp) SetWidgetBackground(widgetBackground *WidgetBackground) {
	b.WidgetBackground = widgetBackground
	b.require(brandSettingsInAppFieldWidgetBackground)
}

// SetColors sets the Colors field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsInApp) SetColors(colors *BrandColors) {
	b.Colors = colors
	b.require(brandSettingsInAppFieldColors)
}

// SetIcons sets the Icons field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsInApp) SetIcons(icons *Icons) {
	b.Icons = icons
	b.require(brandSettingsInAppFieldIcons)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsInApp) SetPreferences(preferences *Preferences) {
	b.Preferences = preferences
	b.require(brandSettingsInAppFieldPreferences)
}

func (b *BrandSettingsInApp) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandSettingsInApp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandSettingsInApp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandSettingsInApp) MarshalJSON() ([]byte, error) {
	type embed BrandSettingsInApp
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BrandSettingsInApp) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	brandSettingsSocialPresenceFieldInheritDefault = big.NewInt(1 << 0)
	brandSettingsSocialPresenceFieldFacebook       = big.NewInt(1 << 1)
	brandSettingsSocialPresenceFieldInstagram      = big.NewInt(1 << 2)
	brandSettingsSocialPresenceFieldLinkedin       = big.NewInt(1 << 3)
	brandSettingsSocialPresenceFieldMedium         = big.NewInt(1 << 4)
	brandSettingsSocialPresenceFieldTwitter        = big.NewInt(1 << 5)
)

type BrandSettingsSocialPresence struct {
	InheritDefault *bool               `json:"inheritDefault,omitempty" url:"inheritDefault,omitempty"`
	Facebook       *BaseSocialPresence `json:"facebook,omitempty" url:"facebook,omitempty"`
	Instagram      *BaseSocialPresence `json:"instagram,omitempty" url:"instagram,omitempty"`
	Linkedin       *BaseSocialPresence `json:"linkedin,omitempty" url:"linkedin,omitempty"`
	Medium         *BaseSocialPresence `json:"medium,omitempty" url:"medium,omitempty"`
	Twitter        *BaseSocialPresence `json:"twitter,omitempty" url:"twitter,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandSettingsSocialPresence) GetInheritDefault() *bool {
	if b == nil {
		return nil
	}
	return b.InheritDefault
}

func (b *BrandSettingsSocialPresence) GetFacebook() *BaseSocialPresence {
	if b == nil {
		return nil
	}
	return b.Facebook
}

func (b *BrandSettingsSocialPresence) GetInstagram() *BaseSocialPresence {
	if b == nil {
		return nil
	}
	return b.Instagram
}

func (b *BrandSettingsSocialPresence) GetLinkedin() *BaseSocialPresence {
	if b == nil {
		return nil
	}
	return b.Linkedin
}

func (b *BrandSettingsSocialPresence) GetMedium() *BaseSocialPresence {
	if b == nil {
		return nil
	}
	return b.Medium
}

func (b *BrandSettingsSocialPresence) GetTwitter() *BaseSocialPresence {
	if b == nil {
		return nil
	}
	return b.Twitter
}

func (b *BrandSettingsSocialPresence) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandSettingsSocialPresence) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetInheritDefault sets the InheritDefault field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsSocialPresence) SetInheritDefault(inheritDefault *bool) {
	b.InheritDefault = inheritDefault
	b.require(brandSettingsSocialPresenceFieldInheritDefault)
}

// SetFacebook sets the Facebook field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsSocialPresence) SetFacebook(facebook *BaseSocialPresence) {
	b.Facebook = facebook
	b.require(brandSettingsSocialPresenceFieldFacebook)
}

// SetInstagram sets the Instagram field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsSocialPresence) SetInstagram(instagram *BaseSocialPresence) {
	b.Instagram = instagram
	b.require(brandSettingsSocialPresenceFieldInstagram)
}

// SetLinkedin sets the Linkedin field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsSocialPresence) SetLinkedin(linkedin *BaseSocialPresence) {
	b.Linkedin = linkedin
	b.require(brandSettingsSocialPresenceFieldLinkedin)
}

// SetMedium sets the Medium field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsSocialPresence) SetMedium(medium *BaseSocialPresence) {
	b.Medium = medium
	b.require(brandSettingsSocialPresenceFieldMedium)
}

// SetTwitter sets the Twitter field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandSettingsSocialPresence) SetTwitter(twitter *BaseSocialPresence) {
	b.Twitter = twitter
	b.require(brandSettingsSocialPresenceFieldTwitter)
}

func (b *BrandSettingsSocialPresence) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandSettingsSocialPresence
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandSettingsSocialPresence(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandSettingsSocialPresence) MarshalJSON() ([]byte, error) {
	type embed BrandSettingsSocialPresence
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BrandSettingsSocialPresence) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	brandTemplateFieldBackgroundColor       = big.NewInt(1 << 0)
	brandTemplateFieldBlocksBackgroundColor = big.NewInt(1 << 1)
	brandTemplateFieldEnabled               = big.NewInt(1 << 2)
	brandTemplateFieldFooter                = big.NewInt(1 << 3)
	brandTemplateFieldHead                  = big.NewInt(1 << 4)
	brandTemplateFieldHeader                = big.NewInt(1 << 5)
	brandTemplateFieldWidth                 = big.NewInt(1 << 6)
)

type BrandTemplate struct {
	BackgroundColor       *string `json:"backgroundColor,omitempty" url:"backgroundColor,omitempty"`
	BlocksBackgroundColor *string `json:"blocksBackgroundColor,omitempty" url:"blocksBackgroundColor,omitempty"`
	Enabled               bool    `json:"enabled" url:"enabled"`
	Footer                *string `json:"footer,omitempty" url:"footer,omitempty"`
	Head                  *string `json:"head,omitempty" url:"head,omitempty"`
	Header                *string `json:"header,omitempty" url:"header,omitempty"`
	Width                 *string `json:"width,omitempty" url:"width,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandTemplate) GetBackgroundColor() *string {
	if b == nil {
		return nil
	}
	return b.BackgroundColor
}

func (b *BrandTemplate) GetBlocksBackgroundColor() *string {
	if b == nil {
		return nil
	}
	return b.BlocksBackgroundColor
}

func (b *BrandTemplate) GetEnabled() bool {
	if b == nil {
		return false
	}
	return b.Enabled
}

func (b *BrandTemplate) GetFooter() *string {
	if b == nil {
		return nil
	}
	return b.Footer
}

func (b *BrandTemplate) GetHead() *string {
	if b == nil {
		return nil
	}
	return b.Head
}

func (b *BrandTemplate) GetHeader() *string {
	if b == nil {
		return nil
	}
	return b.Header
}

func (b *BrandTemplate) GetWidth() *string {
	if b == nil {
		return nil
	}
	return b.Width
}

func (b *BrandTemplate) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandTemplate) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetBackgroundColor sets the BackgroundColor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplate) SetBackgroundColor(backgroundColor *string) {
	b.BackgroundColor = backgroundColor
	b.require(brandTemplateFieldBackgroundColor)
}

// SetBlocksBackgroundColor sets the BlocksBackgroundColor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplate) SetBlocksBackgroundColor(blocksBackgroundColor *string) {
	b.BlocksBackgroundColor = blocksBackgroundColor
	b.require(brandTemplateFieldBlocksBackgroundColor)
}

// SetEnabled sets the Enabled field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplate) SetEnabled(enabled bool) {
	b.Enabled = enabled
	b.require(brandTemplateFieldEnabled)
}

// SetFooter sets the Footer field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplate) SetFooter(footer *string) {
	b.Footer = footer
	b.require(brandTemplateFieldFooter)
}

// SetHead sets the Head field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplate) SetHead(head *string) {
	b.Head = head
	b.require(brandTemplateFieldHead)
}

// SetHeader sets the Header field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplate) SetHeader(header *string) {
	b.Header = header
	b.require(brandTemplateFieldHeader)
}

// SetWidth sets the Width field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplate) SetWidth(width *string) {
	b.Width = width
	b.require(brandTemplateFieldWidth)
}

func (b *BrandTemplate) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandTemplate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandTemplate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandTemplate) MarshalJSON() ([]byte, error) {
	type embed BrandTemplate
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BrandTemplate) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	brandTemplateOverrideFieldBackgroundColor       = big.NewInt(1 << 0)
	brandTemplateOverrideFieldBlocksBackgroundColor = big.NewInt(1 << 1)
	brandTemplateOverrideFieldEnabled               = big.NewInt(1 << 2)
	brandTemplateOverrideFieldFooter                = big.NewInt(1 << 3)
	brandTemplateOverrideFieldHead                  = big.NewInt(1 << 4)
	brandTemplateOverrideFieldHeader                = big.NewInt(1 << 5)
	brandTemplateOverrideFieldWidth                 = big.NewInt(1 << 6)
	brandTemplateOverrideFieldMjml                  = big.NewInt(1 << 7)
	brandTemplateOverrideFieldFooterBackgroundColor = big.NewInt(1 << 8)
	brandTemplateOverrideFieldFooterFullWidth       = big.NewInt(1 << 9)
)

type BrandTemplateOverride struct {
	BackgroundColor       *string        `json:"backgroundColor,omitempty" url:"backgroundColor,omitempty"`
	BlocksBackgroundColor *string        `json:"blocksBackgroundColor,omitempty" url:"blocksBackgroundColor,omitempty"`
	Enabled               bool           `json:"enabled" url:"enabled"`
	Footer                *string        `json:"footer,omitempty" url:"footer,omitempty"`
	Head                  *string        `json:"head,omitempty" url:"head,omitempty"`
	Header                *string        `json:"header,omitempty" url:"header,omitempty"`
	Width                 *string        `json:"width,omitempty" url:"width,omitempty"`
	Mjml                  *BrandTemplate `json:"mjml" url:"mjml"`
	FooterBackgroundColor *string        `json:"footerBackgroundColor,omitempty" url:"footerBackgroundColor,omitempty"`
	FooterFullWidth       *bool          `json:"footerFullWidth,omitempty" url:"footerFullWidth,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BrandTemplateOverride) GetBackgroundColor() *string {
	if b == nil {
		return nil
	}
	return b.BackgroundColor
}

func (b *BrandTemplateOverride) GetBlocksBackgroundColor() *string {
	if b == nil {
		return nil
	}
	return b.BlocksBackgroundColor
}

func (b *BrandTemplateOverride) GetEnabled() bool {
	if b == nil {
		return false
	}
	return b.Enabled
}

func (b *BrandTemplateOverride) GetFooter() *string {
	if b == nil {
		return nil
	}
	return b.Footer
}

func (b *BrandTemplateOverride) GetHead() *string {
	if b == nil {
		return nil
	}
	return b.Head
}

func (b *BrandTemplateOverride) GetHeader() *string {
	if b == nil {
		return nil
	}
	return b.Header
}

func (b *BrandTemplateOverride) GetWidth() *string {
	if b == nil {
		return nil
	}
	return b.Width
}

func (b *BrandTemplateOverride) GetMjml() *BrandTemplate {
	if b == nil {
		return nil
	}
	return b.Mjml
}

func (b *BrandTemplateOverride) GetFooterBackgroundColor() *string {
	if b == nil {
		return nil
	}
	return b.FooterBackgroundColor
}

func (b *BrandTemplateOverride) GetFooterFullWidth() *bool {
	if b == nil {
		return nil
	}
	return b.FooterFullWidth
}

func (b *BrandTemplateOverride) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BrandTemplateOverride) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetBackgroundColor sets the BackgroundColor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplateOverride) SetBackgroundColor(backgroundColor *string) {
	b.BackgroundColor = backgroundColor
	b.require(brandTemplateOverrideFieldBackgroundColor)
}

// SetBlocksBackgroundColor sets the BlocksBackgroundColor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplateOverride) SetBlocksBackgroundColor(blocksBackgroundColor *string) {
	b.BlocksBackgroundColor = blocksBackgroundColor
	b.require(brandTemplateOverrideFieldBlocksBackgroundColor)
}

// SetEnabled sets the Enabled field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplateOverride) SetEnabled(enabled bool) {
	b.Enabled = enabled
	b.require(brandTemplateOverrideFieldEnabled)
}

// SetFooter sets the Footer field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplateOverride) SetFooter(footer *string) {
	b.Footer = footer
	b.require(brandTemplateOverrideFieldFooter)
}

// SetHead sets the Head field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplateOverride) SetHead(head *string) {
	b.Head = head
	b.require(brandTemplateOverrideFieldHead)
}

// SetHeader sets the Header field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplateOverride) SetHeader(header *string) {
	b.Header = header
	b.require(brandTemplateOverrideFieldHeader)
}

// SetWidth sets the Width field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplateOverride) SetWidth(width *string) {
	b.Width = width
	b.require(brandTemplateOverrideFieldWidth)
}

// SetMjml sets the Mjml field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplateOverride) SetMjml(mjml *BrandTemplate) {
	b.Mjml = mjml
	b.require(brandTemplateOverrideFieldMjml)
}

// SetFooterBackgroundColor sets the FooterBackgroundColor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplateOverride) SetFooterBackgroundColor(footerBackgroundColor *string) {
	b.FooterBackgroundColor = footerBackgroundColor
	b.require(brandTemplateOverrideFieldFooterBackgroundColor)
}

// SetFooterFullWidth sets the FooterFullWidth field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BrandTemplateOverride) SetFooterFullWidth(footerFullWidth *bool) {
	b.FooterFullWidth = footerFullWidth
	b.require(brandTemplateOverrideFieldFooterFullWidth)
}

func (b *BrandTemplateOverride) UnmarshalJSON(data []byte) error {
	type unmarshaler BrandTemplateOverride
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BrandTemplateOverride(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BrandTemplateOverride) MarshalJSON() ([]byte, error) {
	type embed BrandTemplateOverride
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BrandTemplateOverride) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	channelFieldBrandId       = big.NewInt(1 << 0)
	channelFieldProviders     = big.NewInt(1 << 1)
	channelFieldRoutingMethod = big.NewInt(1 << 2)
	channelFieldIf            = big.NewInt(1 << 3)
	channelFieldTimeouts      = big.NewInt(1 << 4)
	channelFieldOverride      = big.NewInt(1 << 5)
	channelFieldMetadata      = big.NewInt(1 << 6)
)

type Channel struct {
	// Id of the brand that should be used for rendering the message.
	// If not specified, the brand configured as default brand will be used.
	BrandId *string `json:"brand_id,omitempty" url:"brand_id,omitempty"`
	// A list of providers enabled for this channel. Courier will select
	// one provider to send through unless routing_method is set to all.
	Providers []string `json:"providers,omitempty" url:"providers,omitempty"`
	// The method for selecting the providers to send the message with.
	// Single will send to one of the available providers for this channel,
	// all will send the message through all channels. Defaults to `single`.
	RoutingMethod *RoutingMethod `json:"routing_method,omitempty" url:"routing_method,omitempty"`
	// A JavaScript conditional expression to determine if the message should
	// be sent through the channel. Has access to the data and profile object.
	// Only applies when a custom routing strategy is defined.
	// For example, `data.name === profile.name`
	If       *string   `json:"if,omitempty" url:"if,omitempty"`
	Timeouts *Timeouts `json:"timeouts,omitempty" url:"timeouts,omitempty"`
	// Channel specific overrides.
	Override map[string]interface{} `json:"override,omitempty" url:"override,omitempty"`
	Metadata *ChannelMetadata       `json:"metadata,omitempty" url:"metadata,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Channel) GetBrandId() *string {
	if c == nil {
		return nil
	}
	return c.BrandId
}

func (c *Channel) GetProviders() []string {
	if c == nil {
		return nil
	}
	return c.Providers
}

func (c *Channel) GetRoutingMethod() *RoutingMethod {
	if c == nil {
		return nil
	}
	return c.RoutingMethod
}

func (c *Channel) GetIf() *string {
	if c == nil {
		return nil
	}
	return c.If
}

func (c *Channel) GetTimeouts() *Timeouts {
	if c == nil {
		return nil
	}
	return c.Timeouts
}

func (c *Channel) GetOverride() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Override
}

func (c *Channel) GetMetadata() *ChannelMetadata {
	if c == nil {
		return nil
	}
	return c.Metadata
}

func (c *Channel) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Channel) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetBrandId sets the BrandId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Channel) SetBrandId(brandId *string) {
	c.BrandId = brandId
	c.require(channelFieldBrandId)
}

// SetProviders sets the Providers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Channel) SetProviders(providers []string) {
	c.Providers = providers
	c.require(channelFieldProviders)
}

// SetRoutingMethod sets the RoutingMethod field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Channel) SetRoutingMethod(routingMethod *RoutingMethod) {
	c.RoutingMethod = routingMethod
	c.require(channelFieldRoutingMethod)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Channel) SetIf(if_ *string) {
	c.If = if_
	c.require(channelFieldIf)
}

// SetTimeouts sets the Timeouts field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Channel) SetTimeouts(timeouts *Timeouts) {
	c.Timeouts = timeouts
	c.require(channelFieldTimeouts)
}

// SetOverride sets the Override field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Channel) SetOverride(override map[string]interface{}) {
	c.Override = override
	c.require(channelFieldOverride)
}

// SetMetadata sets the Metadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Channel) SetMetadata(metadata *ChannelMetadata) {
	c.Metadata = metadata
	c.require(channelFieldMetadata)
}

func (c *Channel) UnmarshalJSON(data []byte) error {
	type unmarshaler Channel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Channel(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Channel) MarshalJSON() ([]byte, error) {
	type embed Channel
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *Channel) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	channelMetadataFieldUtm = big.NewInt(1 << 0)
)

type ChannelMetadata struct {
	Utm *Utm `json:"utm,omitempty" url:"utm,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ChannelMetadata) GetUtm() *Utm {
	if c == nil {
		return nil
	}
	return c.Utm
}

func (c *ChannelMetadata) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChannelMetadata) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetUtm sets the Utm field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ChannelMetadata) SetUtm(utm *Utm) {
	c.Utm = utm
	c.require(channelMetadataFieldUtm)
}

func (c *ChannelMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler ChannelMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChannelMetadata(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChannelMetadata) MarshalJSON() ([]byte, error) {
	type embed ChannelMetadata
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *ChannelMetadata) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChannelSource string

const (
	ChannelSourceSubscription ChannelSource = "subscription"
	ChannelSourceList         ChannelSource = "list"
	ChannelSourceRecipient    ChannelSource = "recipient"
)

func NewChannelSourceFromString(s string) (ChannelSource, error) {
	switch s {
	case "subscription":
		return ChannelSourceSubscription, nil
	case "list":
		return ChannelSourceList, nil
	case "recipient":
		return ChannelSourceRecipient, nil
	}
	var t ChannelSource
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ChannelSource) Ptr() *ChannelSource {
	return &c
}

type Content struct {
	ElementalContent      *ElementalContent
	ElementalContentSugar *ElementalContentSugar

	typ string
}

func (c *Content) GetElementalContent() *ElementalContent {
	if c == nil {
		return nil
	}
	return c.ElementalContent
}

func (c *Content) GetElementalContentSugar() *ElementalContentSugar {
	if c == nil {
		return nil
	}
	return c.ElementalContentSugar
}

func (c *Content) UnmarshalJSON(data []byte) error {
	valueElementalContent := new(ElementalContent)
	if err := json.Unmarshal(data, &valueElementalContent); err == nil {
		c.typ = "ElementalContent"
		c.ElementalContent = valueElementalContent
		return nil
	}
	valueElementalContentSugar := new(ElementalContentSugar)
	if err := json.Unmarshal(data, &valueElementalContentSugar); err == nil {
		c.typ = "ElementalContentSugar"
		c.ElementalContentSugar = valueElementalContentSugar
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c Content) MarshalJSON() ([]byte, error) {
	if c.typ == "ElementalContent" || c.ElementalContent != nil {
		return json.Marshal(c.ElementalContent)
	}
	if c.typ == "ElementalContentSugar" || c.ElementalContentSugar != nil {
		return json.Marshal(c.ElementalContentSugar)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type ContentVisitor interface {
	VisitElementalContent(*ElementalContent) error
	VisitElementalContentSugar(*ElementalContentSugar) error
}

func (c *Content) Accept(visitor ContentVisitor) error {
	if c.typ == "ElementalContent" || c.ElementalContent != nil {
		return visitor.VisitElementalContent(c.ElementalContent)
	}
	if c.typ == "ElementalContentSugar" || c.ElementalContentSugar != nil {
		return visitor.VisitElementalContentSugar(c.ElementalContentSugar)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

// The message property has the following primary top-level properties. They define the destination and content of the message.
// Additional advanced configuration fields [are defined below](https://www.courier.com/docs/reference/send/message/#other-message-properties).
var (
	contentMessageFieldData        = big.NewInt(1 << 0)
	contentMessageFieldBrandId     = big.NewInt(1 << 1)
	contentMessageFieldChannels    = big.NewInt(1 << 2)
	contentMessageFieldContext     = big.NewInt(1 << 3)
	contentMessageFieldMetadata    = big.NewInt(1 << 4)
	contentMessageFieldPreferences = big.NewInt(1 << 5)
	contentMessageFieldProviders   = big.NewInt(1 << 6)
	contentMessageFieldRouting     = big.NewInt(1 << 7)
	contentMessageFieldTimeout     = big.NewInt(1 << 8)
	contentMessageFieldDelay       = big.NewInt(1 << 9)
	contentMessageFieldExpiry      = big.NewInt(1 << 10)
	contentMessageFieldTo          = big.NewInt(1 << 11)
	contentMessageFieldContent     = big.NewInt(1 << 12)
)

type ContentMessage struct {
	// An arbitrary object that includes any data you want to pass to the message.
	// The data will populate the corresponding template or elements variables.
	Data    *MessageData `json:"data,omitempty" url:"data,omitempty"`
	BrandId *string      `json:"brand_id,omitempty" url:"brand_id,omitempty"`
	// "Define run-time configuration for one or more channels. If you don't specify channels, the default configuration for each channel will be used. Valid ChannelId's are: email, sms, push, inbox, direct_message, banner, and webhook."
	Channels *MessageChannels `json:"channels,omitempty" url:"channels,omitempty"`
	// Context to load with this recipient. Will override any context set on message.context.
	Context *MessageContext `json:"context,omitempty" url:"context,omitempty"`
	// Metadata such as utm tracking attached with the notification through this channel.
	Metadata    *MessageMetadata    `json:"metadata,omitempty" url:"metadata,omitempty"`
	Preferences *MessagePreferences `json:"preferences,omitempty" url:"preferences,omitempty"`
	// An object whose keys are valid provider identifiers which map to an object.
	Providers *MessageProviders `json:"providers,omitempty" url:"providers,omitempty"`
	Routing   *Routing          `json:"routing,omitempty" url:"routing,omitempty"`
	// Time in ms to attempt the channel before failing over to the next available channel.
	Timeout *Timeout `json:"timeout,omitempty" url:"timeout,omitempty"`
	// Defines the time to wait before delivering the message. You can specify one of the following options. Duration with the number of milliseconds to delay. Until with an ISO 8601 timestamp that specifies when it should be delivered. Until with an OpenStreetMap opening_hours-like format that specifies the [Delivery Window](https://www.courier.com/docs/platform/sending/failover/#delivery-window) (e.g., 'Mo-Fr 08:00-18:00pm')
	Delay *Delay `json:"delay,omitempty" url:"delay,omitempty"`
	// "Expiry allows you to set an absolute or relative time in which a message expires.
	// Note: This is only valid for the Courier Inbox channel as of 12-08-2022."
	Expiry *Expiry `json:"expiry,omitempty" url:"expiry,omitempty"`
	// The recipient or a list of recipients of the message
	To *MessageRecipient `json:"to,omitempty" url:"to,omitempty"`
	// Describes the content of the message in a way that will work for email, push,
	// chat, or any channel. Either this or template must be specified.
	Content *Content `json:"content" url:"content"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ContentMessage) GetData() *MessageData {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ContentMessage) GetBrandId() *string {
	if c == nil {
		return nil
	}
	return c.BrandId
}

func (c *ContentMessage) GetChannels() *MessageChannels {
	if c == nil {
		return nil
	}
	return c.Channels
}

func (c *ContentMessage) GetContext() *MessageContext {
	if c == nil {
		return nil
	}
	return c.Context
}

func (c *ContentMessage) GetMetadata() *MessageMetadata {
	if c == nil {
		return nil
	}
	return c.Metadata
}

func (c *ContentMessage) GetPreferences() *MessagePreferences {
	if c == nil {
		return nil
	}
	return c.Preferences
}

func (c *ContentMessage) GetProviders() *MessageProviders {
	if c == nil {
		return nil
	}
	return c.Providers
}

func (c *ContentMessage) GetRouting() *Routing {
	if c == nil {
		return nil
	}
	return c.Routing
}

func (c *ContentMessage) GetTimeout() *Timeout {
	if c == nil {
		return nil
	}
	return c.Timeout
}

func (c *ContentMessage) GetDelay() *Delay {
	if c == nil {
		return nil
	}
	return c.Delay
}

func (c *ContentMessage) GetExpiry() *Expiry {
	if c == nil {
		return nil
	}
	return c.Expiry
}

func (c *ContentMessage) GetTo() *MessageRecipient {
	if c == nil {
		return nil
	}
	return c.To
}

func (c *ContentMessage) GetContent() *Content {
	if c == nil {
		return nil
	}
	return c.Content
}

func (c *ContentMessage) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ContentMessage) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ContentMessage) SetData(data *MessageData) {
	c.Data = data
	c.require(contentMessageFieldData)
}

// SetBrandId sets the BrandId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ContentMessage) SetBrandId(brandId *string) {
	c.BrandId = brandId
	c.require(contentMessageFieldBrandId)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ContentMessage) SetChannels(channels *MessageChannels) {
	c.Channels = channels
	c.require(contentMessageFieldChannels)
}

// SetContext sets the Context field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ContentMessage) SetContext(context *MessageContext) {
	c.Context = context
	c.require(contentMessageFieldContext)
}

// SetMetadata sets the Metadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ContentMessage) SetMetadata(metadata *MessageMetadata) {
	c.Metadata = metadata
	c.require(contentMessageFieldMetadata)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ContentMessage) SetPreferences(preferences *MessagePreferences) {
	c.Preferences = preferences
	c.require(contentMessageFieldPreferences)
}

// SetProviders sets the Providers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ContentMessage) SetProviders(providers *MessageProviders) {
	c.Providers = providers
	c.require(contentMessageFieldProviders)
}

// SetRouting sets the Routing field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ContentMessage) SetRouting(routing *Routing) {
	c.Routing = routing
	c.require(contentMessageFieldRouting)
}

// SetTimeout sets the Timeout field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ContentMessage) SetTimeout(timeout *Timeout) {
	c.Timeout = timeout
	c.require(contentMessageFieldTimeout)
}

// SetDelay sets the Delay field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ContentMessage) SetDelay(delay *Delay) {
	c.Delay = delay
	c.require(contentMessageFieldDelay)
}

// SetExpiry sets the Expiry field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ContentMessage) SetExpiry(expiry *Expiry) {
	c.Expiry = expiry
	c.require(contentMessageFieldExpiry)
}

// SetTo sets the To field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ContentMessage) SetTo(to *MessageRecipient) {
	c.To = to
	c.require(contentMessageFieldTo)
}

// SetContent sets the Content field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ContentMessage) SetContent(content *Content) {
	c.Content = content
	c.require(contentMessageFieldContent)
}

func (c *ContentMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler ContentMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ContentMessage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ContentMessage) MarshalJSON() ([]byte, error) {
	type embed ContentMessage
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *ContentMessage) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Criteria string

const (
	CriteriaNoEscalation Criteria = "no-escalation"
	CriteriaDelivered    Criteria = "delivered"
	CriteriaViewed       Criteria = "viewed"
	CriteriaEngaged      Criteria = "engaged"
)

func NewCriteriaFromString(s string) (Criteria, error) {
	switch s {
	case "no-escalation":
		return CriteriaNoEscalation, nil
	case "delivered":
		return CriteriaDelivered, nil
	case "viewed":
		return CriteriaViewed, nil
	case "engaged":
		return CriteriaEngaged, nil
	}
	var t Criteria
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c Criteria) Ptr() *Criteria {
	return &c
}

var (
	delayFieldDuration = big.NewInt(1 << 0)
	delayFieldUntil    = big.NewInt(1 << 1)
)

type Delay struct {
	// The duration of the delay in milliseconds.
	Duration *int `json:"duration,omitempty" url:"duration,omitempty"`
	// An ISO 8601 timestamp that specifies when it should be delivered or an OpenStreetMap opening_hours-like format that specifies the [Delivery Window](https://www.courier.com/docs/platform/sending/failover/#delivery-window) (e.g., 'Mo-Fr 08:00-18:00pm')
	Until *string `json:"until,omitempty" url:"until,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *Delay) GetDuration() *int {
	if d == nil {
		return nil
	}
	return d.Duration
}

func (d *Delay) GetUntil() *string {
	if d == nil {
		return nil
	}
	return d.Until
}

func (d *Delay) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *Delay) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetDuration sets the Duration field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *Delay) SetDuration(duration *int) {
	d.Duration = duration
	d.require(delayFieldDuration)
}

// SetUntil sets the Until field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *Delay) SetUntil(until *string) {
	d.Until = until
	d.require(delayFieldUntil)
}

func (d *Delay) UnmarshalJSON(data []byte) error {
	type unmarshaler Delay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = Delay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *Delay) MarshalJSON() ([]byte, error) {
	type embed Delay
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *Delay) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Allows the user to execute an action. Can be a button or a link.
var (
	elementalActionNodeFieldChannels        = big.NewInt(1 << 0)
	elementalActionNodeFieldRef             = big.NewInt(1 << 1)
	elementalActionNodeFieldIf              = big.NewInt(1 << 2)
	elementalActionNodeFieldLoop            = big.NewInt(1 << 3)
	elementalActionNodeFieldContent         = big.NewInt(1 << 4)
	elementalActionNodeFieldHref            = big.NewInt(1 << 5)
	elementalActionNodeFieldActionId        = big.NewInt(1 << 6)
	elementalActionNodeFieldAlign           = big.NewInt(1 << 7)
	elementalActionNodeFieldBackgroundColor = big.NewInt(1 << 8)
	elementalActionNodeFieldStyle           = big.NewInt(1 << 9)
	elementalActionNodeFieldLocales         = big.NewInt(1 << 10)
)

type ElementalActionNode struct {
	Channels []string `json:"channels,omitempty" url:"channels,omitempty"`
	Ref      *string  `json:"ref,omitempty" url:"ref,omitempty"`
	If       *string  `json:"if,omitempty" url:"if,omitempty"`
	Loop     *string  `json:"loop,omitempty" url:"loop,omitempty"`
	// The text content of the action shown to the user.
	Content string `json:"content" url:"content"`
	// The target URL of the action.
	Href string `json:"href" url:"href"`
	// A unique id used to identify the action when it is executed.
	ActionId *string `json:"action_id,omitempty" url:"action_id,omitempty"`
	// The alignment of the action button. Defaults to "center".
	Align *IAlignment `json:"align,omitempty" url:"align,omitempty"`
	// The background color of the action button.
	BackgroundColor *string `json:"background_color,omitempty" url:"background_color,omitempty"`
	// Defaults to `button`.
	Style *IActionButtonStyle `json:"style,omitempty" url:"style,omitempty"`
	// Region specific content. See [locales docs](https://www.courier.com/docs/platform/content/elemental/locales/) for more details.
	Locales Locales `json:"locales,omitempty" url:"locales,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ElementalActionNode) GetChannels() []string {
	if e == nil {
		return nil
	}
	return e.Channels
}

func (e *ElementalActionNode) GetRef() *string {
	if e == nil {
		return nil
	}
	return e.Ref
}

func (e *ElementalActionNode) GetIf() *string {
	if e == nil {
		return nil
	}
	return e.If
}

func (e *ElementalActionNode) GetLoop() *string {
	if e == nil {
		return nil
	}
	return e.Loop
}

func (e *ElementalActionNode) GetContent() string {
	if e == nil {
		return ""
	}
	return e.Content
}

func (e *ElementalActionNode) GetHref() string {
	if e == nil {
		return ""
	}
	return e.Href
}

func (e *ElementalActionNode) GetActionId() *string {
	if e == nil {
		return nil
	}
	return e.ActionId
}

func (e *ElementalActionNode) GetAlign() *IAlignment {
	if e == nil {
		return nil
	}
	return e.Align
}

func (e *ElementalActionNode) GetBackgroundColor() *string {
	if e == nil {
		return nil
	}
	return e.BackgroundColor
}

func (e *ElementalActionNode) GetStyle() *IActionButtonStyle {
	if e == nil {
		return nil
	}
	return e.Style
}

func (e *ElementalActionNode) GetLocales() Locales {
	if e == nil {
		return nil
	}
	return e.Locales
}

func (e *ElementalActionNode) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ElementalActionNode) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalActionNode) SetChannels(channels []string) {
	e.Channels = channels
	e.require(elementalActionNodeFieldChannels)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalActionNode) SetRef(ref *string) {
	e.Ref = ref
	e.require(elementalActionNodeFieldRef)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalActionNode) SetIf(if_ *string) {
	e.If = if_
	e.require(elementalActionNodeFieldIf)
}

// SetLoop sets the Loop field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalActionNode) SetLoop(loop *string) {
	e.Loop = loop
	e.require(elementalActionNodeFieldLoop)
}

// SetContent sets the Content field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalActionNode) SetContent(content string) {
	e.Content = content
	e.require(elementalActionNodeFieldContent)
}

// SetHref sets the Href field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalActionNode) SetHref(href string) {
	e.Href = href
	e.require(elementalActionNodeFieldHref)
}

// SetActionId sets the ActionId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalActionNode) SetActionId(actionId *string) {
	e.ActionId = actionId
	e.require(elementalActionNodeFieldActionId)
}

// SetAlign sets the Align field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalActionNode) SetAlign(align *IAlignment) {
	e.Align = align
	e.require(elementalActionNodeFieldAlign)
}

// SetBackgroundColor sets the BackgroundColor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalActionNode) SetBackgroundColor(backgroundColor *string) {
	e.BackgroundColor = backgroundColor
	e.require(elementalActionNodeFieldBackgroundColor)
}

// SetStyle sets the Style field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalActionNode) SetStyle(style *IActionButtonStyle) {
	e.Style = style
	e.require(elementalActionNodeFieldStyle)
}

// SetLocales sets the Locales field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalActionNode) SetLocales(locales Locales) {
	e.Locales = locales
	e.require(elementalActionNodeFieldLocales)
}

func (e *ElementalActionNode) UnmarshalJSON(data []byte) error {
	type unmarshaler ElementalActionNode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ElementalActionNode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ElementalActionNode) MarshalJSON() ([]byte, error) {
	type embed ElementalActionNode
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ElementalActionNode) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	elementalBaseNodeFieldChannels = big.NewInt(1 << 0)
	elementalBaseNodeFieldRef      = big.NewInt(1 << 1)
	elementalBaseNodeFieldIf       = big.NewInt(1 << 2)
	elementalBaseNodeFieldLoop     = big.NewInt(1 << 3)
)

type ElementalBaseNode struct {
	Channels []string `json:"channels,omitempty" url:"channels,omitempty"`
	Ref      *string  `json:"ref,omitempty" url:"ref,omitempty"`
	If       *string  `json:"if,omitempty" url:"if,omitempty"`
	Loop     *string  `json:"loop,omitempty" url:"loop,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ElementalBaseNode) GetChannels() []string {
	if e == nil {
		return nil
	}
	return e.Channels
}

func (e *ElementalBaseNode) GetRef() *string {
	if e == nil {
		return nil
	}
	return e.Ref
}

func (e *ElementalBaseNode) GetIf() *string {
	if e == nil {
		return nil
	}
	return e.If
}

func (e *ElementalBaseNode) GetLoop() *string {
	if e == nil {
		return nil
	}
	return e.Loop
}

func (e *ElementalBaseNode) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ElementalBaseNode) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalBaseNode) SetChannels(channels []string) {
	e.Channels = channels
	e.require(elementalBaseNodeFieldChannels)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalBaseNode) SetRef(ref *string) {
	e.Ref = ref
	e.require(elementalBaseNodeFieldRef)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalBaseNode) SetIf(if_ *string) {
	e.If = if_
	e.require(elementalBaseNodeFieldIf)
}

// SetLoop sets the Loop field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalBaseNode) SetLoop(loop *string) {
	e.Loop = loop
	e.require(elementalBaseNodeFieldLoop)
}

func (e *ElementalBaseNode) UnmarshalJSON(data []byte) error {
	type unmarshaler ElementalBaseNode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ElementalBaseNode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ElementalBaseNode) MarshalJSON() ([]byte, error) {
	type embed ElementalBaseNode
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ElementalBaseNode) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The channel element allows a notification to be customized based on which channel it is sent through.
// For example, you may want to display a detailed message when the notification is sent through email,
// and a more concise message in a push notification. Channel elements are only valid as top-level
// elements; you cannot nest channel elements. If there is a channel element specified at the top-level
// of the document, all sibling elements must be channel elements.
// Note: As an alternative, most elements support a `channel` property. Which allows you to selectively
// display an individual element on a per channel basis. See the
// [control flow docs](https://www.courier.com/docs/platform/content/elemental/control-flow/) for more details.
var (
	elementalChannelNodeFieldChannels = big.NewInt(1 << 0)
	elementalChannelNodeFieldRef      = big.NewInt(1 << 1)
	elementalChannelNodeFieldIf       = big.NewInt(1 << 2)
	elementalChannelNodeFieldLoop     = big.NewInt(1 << 3)
	elementalChannelNodeFieldChannel  = big.NewInt(1 << 4)
	elementalChannelNodeFieldElements = big.NewInt(1 << 5)
	elementalChannelNodeFieldRaw      = big.NewInt(1 << 6)
)

type ElementalChannelNode struct {
	Channels []string `json:"channels,omitempty" url:"channels,omitempty"`
	Ref      *string  `json:"ref,omitempty" url:"ref,omitempty"`
	If       *string  `json:"if,omitempty" url:"if,omitempty"`
	Loop     *string  `json:"loop,omitempty" url:"loop,omitempty"`
	// The channel the contents of this element should be applied to. Can be `email`,
	// `push`, `direct_message`, `sms` or a provider such as slack
	Channel string `json:"channel" url:"channel"`
	// An array of elements to apply to the channel. If `raw` has not been
	// specified, `elements` is `required`.
	Elements []*ElementalNode `json:"elements,omitempty" url:"elements,omitempty"`
	// Raw data to apply to the channel. If `elements` has not been
	// specified, `raw` is `required`.
	Raw map[string]interface{} `json:"raw,omitempty" url:"raw,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ElementalChannelNode) GetChannels() []string {
	if e == nil {
		return nil
	}
	return e.Channels
}

func (e *ElementalChannelNode) GetRef() *string {
	if e == nil {
		return nil
	}
	return e.Ref
}

func (e *ElementalChannelNode) GetIf() *string {
	if e == nil {
		return nil
	}
	return e.If
}

func (e *ElementalChannelNode) GetLoop() *string {
	if e == nil {
		return nil
	}
	return e.Loop
}

func (e *ElementalChannelNode) GetChannel() string {
	if e == nil {
		return ""
	}
	return e.Channel
}

func (e *ElementalChannelNode) GetElements() []*ElementalNode {
	if e == nil {
		return nil
	}
	return e.Elements
}

func (e *ElementalChannelNode) GetRaw() map[string]interface{} {
	if e == nil {
		return nil
	}
	return e.Raw
}

func (e *ElementalChannelNode) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ElementalChannelNode) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalChannelNode) SetChannels(channels []string) {
	e.Channels = channels
	e.require(elementalChannelNodeFieldChannels)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalChannelNode) SetRef(ref *string) {
	e.Ref = ref
	e.require(elementalChannelNodeFieldRef)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalChannelNode) SetIf(if_ *string) {
	e.If = if_
	e.require(elementalChannelNodeFieldIf)
}

// SetLoop sets the Loop field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalChannelNode) SetLoop(loop *string) {
	e.Loop = loop
	e.require(elementalChannelNodeFieldLoop)
}

// SetChannel sets the Channel field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalChannelNode) SetChannel(channel string) {
	e.Channel = channel
	e.require(elementalChannelNodeFieldChannel)
}

// SetElements sets the Elements field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalChannelNode) SetElements(elements []*ElementalNode) {
	e.Elements = elements
	e.require(elementalChannelNodeFieldElements)
}

// SetRaw sets the Raw field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalChannelNode) SetRaw(raw map[string]interface{}) {
	e.Raw = raw
	e.require(elementalChannelNodeFieldRaw)
}

func (e *ElementalChannelNode) UnmarshalJSON(data []byte) error {
	type unmarshaler ElementalChannelNode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ElementalChannelNode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ElementalChannelNode) MarshalJSON() ([]byte, error) {
	type embed ElementalChannelNode
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ElementalChannelNode) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	elementalContentFieldVersion  = big.NewInt(1 << 0)
	elementalContentFieldBrand    = big.NewInt(1 << 1)
	elementalContentFieldElements = big.NewInt(1 << 2)
)

type ElementalContent struct {
	// For example, "2022-01-01"
	Version  string           `json:"version" url:"version"`
	Brand    interface{}      `json:"brand,omitempty" url:"brand,omitempty"`
	Elements []*ElementalNode `json:"elements" url:"elements"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ElementalContent) GetVersion() string {
	if e == nil {
		return ""
	}
	return e.Version
}

func (e *ElementalContent) GetBrand() interface{} {
	if e == nil {
		return nil
	}
	return e.Brand
}

func (e *ElementalContent) GetElements() []*ElementalNode {
	if e == nil {
		return nil
	}
	return e.Elements
}

func (e *ElementalContent) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ElementalContent) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetVersion sets the Version field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalContent) SetVersion(version string) {
	e.Version = version
	e.require(elementalContentFieldVersion)
}

// SetBrand sets the Brand field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalContent) SetBrand(brand interface{}) {
	e.Brand = brand
	e.require(elementalContentFieldBrand)
}

// SetElements sets the Elements field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalContent) SetElements(elements []*ElementalNode) {
	e.Elements = elements
	e.require(elementalContentFieldElements)
}

func (e *ElementalContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ElementalContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ElementalContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ElementalContent) MarshalJSON() ([]byte, error) {
	type embed ElementalContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ElementalContent) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Syntatic Sugar to provide a fast shorthand for Courier Elemental Blocks.
var (
	elementalContentSugarFieldTitle = big.NewInt(1 << 0)
	elementalContentSugarFieldBody  = big.NewInt(1 << 1)
)

type ElementalContentSugar struct {
	// The title to be displayed by supported channels i.e. push, email (as subject)
	Title string `json:"title" url:"title"`
	// The text content displayed in the notification.
	Body string `json:"body" url:"body"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ElementalContentSugar) GetTitle() string {
	if e == nil {
		return ""
	}
	return e.Title
}

func (e *ElementalContentSugar) GetBody() string {
	if e == nil {
		return ""
	}
	return e.Body
}

func (e *ElementalContentSugar) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ElementalContentSugar) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetTitle sets the Title field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalContentSugar) SetTitle(title string) {
	e.Title = title
	e.require(elementalContentSugarFieldTitle)
}

// SetBody sets the Body field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalContentSugar) SetBody(body string) {
	e.Body = body
	e.require(elementalContentSugarFieldBody)
}

func (e *ElementalContentSugar) UnmarshalJSON(data []byte) error {
	type unmarshaler ElementalContentSugar
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ElementalContentSugar(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ElementalContentSugar) MarshalJSON() ([]byte, error) {
	type embed ElementalContentSugar
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ElementalContentSugar) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Renders a dividing line between elements.
var (
	elementalDividerNodeFieldChannels = big.NewInt(1 << 0)
	elementalDividerNodeFieldRef      = big.NewInt(1 << 1)
	elementalDividerNodeFieldIf       = big.NewInt(1 << 2)
	elementalDividerNodeFieldLoop     = big.NewInt(1 << 3)
	elementalDividerNodeFieldColor    = big.NewInt(1 << 4)
)

type ElementalDividerNode struct {
	Channels []string `json:"channels,omitempty" url:"channels,omitempty"`
	Ref      *string  `json:"ref,omitempty" url:"ref,omitempty"`
	If       *string  `json:"if,omitempty" url:"if,omitempty"`
	Loop     *string  `json:"loop,omitempty" url:"loop,omitempty"`
	// The CSS color to render the line with. For example, `#fff`
	Color *string `json:"color,omitempty" url:"color,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ElementalDividerNode) GetChannels() []string {
	if e == nil {
		return nil
	}
	return e.Channels
}

func (e *ElementalDividerNode) GetRef() *string {
	if e == nil {
		return nil
	}
	return e.Ref
}

func (e *ElementalDividerNode) GetIf() *string {
	if e == nil {
		return nil
	}
	return e.If
}

func (e *ElementalDividerNode) GetLoop() *string {
	if e == nil {
		return nil
	}
	return e.Loop
}

func (e *ElementalDividerNode) GetColor() *string {
	if e == nil {
		return nil
	}
	return e.Color
}

func (e *ElementalDividerNode) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ElementalDividerNode) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalDividerNode) SetChannels(channels []string) {
	e.Channels = channels
	e.require(elementalDividerNodeFieldChannels)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalDividerNode) SetRef(ref *string) {
	e.Ref = ref
	e.require(elementalDividerNodeFieldRef)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalDividerNode) SetIf(if_ *string) {
	e.If = if_
	e.require(elementalDividerNodeFieldIf)
}

// SetLoop sets the Loop field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalDividerNode) SetLoop(loop *string) {
	e.Loop = loop
	e.require(elementalDividerNodeFieldLoop)
}

// SetColor sets the Color field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalDividerNode) SetColor(color *string) {
	e.Color = color
	e.require(elementalDividerNodeFieldColor)
}

func (e *ElementalDividerNode) UnmarshalJSON(data []byte) error {
	type unmarshaler ElementalDividerNode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ElementalDividerNode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ElementalDividerNode) MarshalJSON() ([]byte, error) {
	type embed ElementalDividerNode
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ElementalDividerNode) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Allows you to group elements together. This can be useful when used in combination with "if" or "loop". See [control flow docs](https://www.courier.com/docs/platform/content/elemental/control-flow/) for more details.
var (
	elementalGroupNodeFieldChannels = big.NewInt(1 << 0)
	elementalGroupNodeFieldRef      = big.NewInt(1 << 1)
	elementalGroupNodeFieldIf       = big.NewInt(1 << 2)
	elementalGroupNodeFieldLoop     = big.NewInt(1 << 3)
	elementalGroupNodeFieldElements = big.NewInt(1 << 4)
)

type ElementalGroupNode struct {
	Channels []string `json:"channels,omitempty" url:"channels,omitempty"`
	Ref      *string  `json:"ref,omitempty" url:"ref,omitempty"`
	If       *string  `json:"if,omitempty" url:"if,omitempty"`
	Loop     *string  `json:"loop,omitempty" url:"loop,omitempty"`
	// Sub elements to render.
	Elements []*ElementalNode `json:"elements" url:"elements"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ElementalGroupNode) GetChannels() []string {
	if e == nil {
		return nil
	}
	return e.Channels
}

func (e *ElementalGroupNode) GetRef() *string {
	if e == nil {
		return nil
	}
	return e.Ref
}

func (e *ElementalGroupNode) GetIf() *string {
	if e == nil {
		return nil
	}
	return e.If
}

func (e *ElementalGroupNode) GetLoop() *string {
	if e == nil {
		return nil
	}
	return e.Loop
}

func (e *ElementalGroupNode) GetElements() []*ElementalNode {
	if e == nil {
		return nil
	}
	return e.Elements
}

func (e *ElementalGroupNode) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ElementalGroupNode) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalGroupNode) SetChannels(channels []string) {
	e.Channels = channels
	e.require(elementalGroupNodeFieldChannels)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalGroupNode) SetRef(ref *string) {
	e.Ref = ref
	e.require(elementalGroupNodeFieldRef)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalGroupNode) SetIf(if_ *string) {
	e.If = if_
	e.require(elementalGroupNodeFieldIf)
}

// SetLoop sets the Loop field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalGroupNode) SetLoop(loop *string) {
	e.Loop = loop
	e.require(elementalGroupNodeFieldLoop)
}

// SetElements sets the Elements field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalGroupNode) SetElements(elements []*ElementalNode) {
	e.Elements = elements
	e.require(elementalGroupNodeFieldElements)
}

func (e *ElementalGroupNode) UnmarshalJSON(data []byte) error {
	type unmarshaler ElementalGroupNode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ElementalGroupNode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ElementalGroupNode) MarshalJSON() ([]byte, error) {
	type embed ElementalGroupNode
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ElementalGroupNode) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Used to embed an image into the notification.
var (
	elementalImageNodeFieldChannels = big.NewInt(1 << 0)
	elementalImageNodeFieldRef      = big.NewInt(1 << 1)
	elementalImageNodeFieldIf       = big.NewInt(1 << 2)
	elementalImageNodeFieldLoop     = big.NewInt(1 << 3)
	elementalImageNodeFieldSrc      = big.NewInt(1 << 4)
	elementalImageNodeFieldHref     = big.NewInt(1 << 5)
	elementalImageNodeFieldAlign    = big.NewInt(1 << 6)
	elementalImageNodeFieldAltText  = big.NewInt(1 << 7)
	elementalImageNodeFieldWidth    = big.NewInt(1 << 8)
)

type ElementalImageNode struct {
	Channels []string `json:"channels,omitempty" url:"channels,omitempty"`
	Ref      *string  `json:"ref,omitempty" url:"ref,omitempty"`
	If       *string  `json:"if,omitempty" url:"if,omitempty"`
	Loop     *string  `json:"loop,omitempty" url:"loop,omitempty"`
	// The source of the image.
	Src string `json:"src" url:"src"`
	// A URL to link to when the image is clicked.
	Href *string `json:"href,omitempty" url:"href,omitempty"`
	// The alignment of the image.
	Align *IAlignment `json:"align,omitempty" url:"align,omitempty"`
	// Alternate text for the image.
	AltText *string `json:"altText,omitempty" url:"altText,omitempty"`
	// CSS width properties to apply to the image. For example, 50px
	Width *string `json:"width,omitempty" url:"width,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ElementalImageNode) GetChannels() []string {
	if e == nil {
		return nil
	}
	return e.Channels
}

func (e *ElementalImageNode) GetRef() *string {
	if e == nil {
		return nil
	}
	return e.Ref
}

func (e *ElementalImageNode) GetIf() *string {
	if e == nil {
		return nil
	}
	return e.If
}

func (e *ElementalImageNode) GetLoop() *string {
	if e == nil {
		return nil
	}
	return e.Loop
}

func (e *ElementalImageNode) GetSrc() string {
	if e == nil {
		return ""
	}
	return e.Src
}

func (e *ElementalImageNode) GetHref() *string {
	if e == nil {
		return nil
	}
	return e.Href
}

func (e *ElementalImageNode) GetAlign() *IAlignment {
	if e == nil {
		return nil
	}
	return e.Align
}

func (e *ElementalImageNode) GetAltText() *string {
	if e == nil {
		return nil
	}
	return e.AltText
}

func (e *ElementalImageNode) GetWidth() *string {
	if e == nil {
		return nil
	}
	return e.Width
}

func (e *ElementalImageNode) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ElementalImageNode) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalImageNode) SetChannels(channels []string) {
	e.Channels = channels
	e.require(elementalImageNodeFieldChannels)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalImageNode) SetRef(ref *string) {
	e.Ref = ref
	e.require(elementalImageNodeFieldRef)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalImageNode) SetIf(if_ *string) {
	e.If = if_
	e.require(elementalImageNodeFieldIf)
}

// SetLoop sets the Loop field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalImageNode) SetLoop(loop *string) {
	e.Loop = loop
	e.require(elementalImageNodeFieldLoop)
}

// SetSrc sets the Src field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalImageNode) SetSrc(src string) {
	e.Src = src
	e.require(elementalImageNodeFieldSrc)
}

// SetHref sets the Href field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalImageNode) SetHref(href *string) {
	e.Href = href
	e.require(elementalImageNodeFieldHref)
}

// SetAlign sets the Align field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalImageNode) SetAlign(align *IAlignment) {
	e.Align = align
	e.require(elementalImageNodeFieldAlign)
}

// SetAltText sets the AltText field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalImageNode) SetAltText(altText *string) {
	e.AltText = altText
	e.require(elementalImageNodeFieldAltText)
}

// SetWidth sets the Width field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalImageNode) SetWidth(width *string) {
	e.Width = width
	e.require(elementalImageNodeFieldWidth)
}

func (e *ElementalImageNode) UnmarshalJSON(data []byte) error {
	type unmarshaler ElementalImageNode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ElementalImageNode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ElementalImageNode) MarshalJSON() ([]byte, error) {
	type embed ElementalImageNode
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ElementalImageNode) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The meta element contains information describing the notification that may
// be used by a particular channel or provider. One important field is the title
// field which will be used as the title for channels that support it.
var (
	elementalMetaNodeFieldChannels = big.NewInt(1 << 0)
	elementalMetaNodeFieldRef      = big.NewInt(1 << 1)
	elementalMetaNodeFieldIf       = big.NewInt(1 << 2)
	elementalMetaNodeFieldLoop     = big.NewInt(1 << 3)
	elementalMetaNodeFieldTitle    = big.NewInt(1 << 4)
)

type ElementalMetaNode struct {
	Channels []string `json:"channels,omitempty" url:"channels,omitempty"`
	Ref      *string  `json:"ref,omitempty" url:"ref,omitempty"`
	If       *string  `json:"if,omitempty" url:"if,omitempty"`
	Loop     *string  `json:"loop,omitempty" url:"loop,omitempty"`
	// The title to be displayed by supported channels. For example, the email subject.
	Title *string `json:"title,omitempty" url:"title,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ElementalMetaNode) GetChannels() []string {
	if e == nil {
		return nil
	}
	return e.Channels
}

func (e *ElementalMetaNode) GetRef() *string {
	if e == nil {
		return nil
	}
	return e.Ref
}

func (e *ElementalMetaNode) GetIf() *string {
	if e == nil {
		return nil
	}
	return e.If
}

func (e *ElementalMetaNode) GetLoop() *string {
	if e == nil {
		return nil
	}
	return e.Loop
}

func (e *ElementalMetaNode) GetTitle() *string {
	if e == nil {
		return nil
	}
	return e.Title
}

func (e *ElementalMetaNode) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ElementalMetaNode) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalMetaNode) SetChannels(channels []string) {
	e.Channels = channels
	e.require(elementalMetaNodeFieldChannels)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalMetaNode) SetRef(ref *string) {
	e.Ref = ref
	e.require(elementalMetaNodeFieldRef)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalMetaNode) SetIf(if_ *string) {
	e.If = if_
	e.require(elementalMetaNodeFieldIf)
}

// SetLoop sets the Loop field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalMetaNode) SetLoop(loop *string) {
	e.Loop = loop
	e.require(elementalMetaNodeFieldLoop)
}

// SetTitle sets the Title field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalMetaNode) SetTitle(title *string) {
	e.Title = title
	e.require(elementalMetaNodeFieldTitle)
}

func (e *ElementalMetaNode) UnmarshalJSON(data []byte) error {
	type unmarshaler ElementalMetaNode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ElementalMetaNode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ElementalMetaNode) MarshalJSON() ([]byte, error) {
	type embed ElementalMetaNode
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ElementalMetaNode) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ElementalNode struct {
	Type    string
	Text    *ElementalTextNode
	Meta    *ElementalMetaNode
	Channel *ElementalChannelNode
	Image   *ElementalImageNode
	Action  *ElementalActionNode
	Divider *ElementalDividerNode
	Group   *ElementalGroupNode
	Quote   *ElementalQuoteNode
}

func (e *ElementalNode) GetType() string {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *ElementalNode) GetText() *ElementalTextNode {
	if e == nil {
		return nil
	}
	return e.Text
}

func (e *ElementalNode) GetMeta() *ElementalMetaNode {
	if e == nil {
		return nil
	}
	return e.Meta
}

func (e *ElementalNode) GetChannel() *ElementalChannelNode {
	if e == nil {
		return nil
	}
	return e.Channel
}

func (e *ElementalNode) GetImage() *ElementalImageNode {
	if e == nil {
		return nil
	}
	return e.Image
}

func (e *ElementalNode) GetAction() *ElementalActionNode {
	if e == nil {
		return nil
	}
	return e.Action
}

func (e *ElementalNode) GetDivider() *ElementalDividerNode {
	if e == nil {
		return nil
	}
	return e.Divider
}

func (e *ElementalNode) GetGroup() *ElementalGroupNode {
	if e == nil {
		return nil
	}
	return e.Group
}

func (e *ElementalNode) GetQuote() *ElementalQuoteNode {
	if e == nil {
		return nil
	}
	return e.Quote
}

func (e *ElementalNode) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", e)
	}
	switch unmarshaler.Type {
	case "text":
		value := new(ElementalTextNode)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Text = value
	case "meta":
		value := new(ElementalMetaNode)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Meta = value
	case "channel":
		value := new(ElementalChannelNode)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Channel = value
	case "image":
		value := new(ElementalImageNode)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Image = value
	case "action":
		value := new(ElementalActionNode)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Action = value
	case "divider":
		value := new(ElementalDividerNode)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Divider = value
	case "group":
		value := new(ElementalGroupNode)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Group = value
	case "quote":
		value := new(ElementalQuoteNode)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Quote = value
	}
	return nil
}

func (e ElementalNode) MarshalJSON() ([]byte, error) {
	if err := e.validate(); err != nil {
		return nil, err
	}
	if e.Text != nil {
		return internal.MarshalJSONWithExtraProperty(e.Text, "type", "text")
	}
	if e.Meta != nil {
		return internal.MarshalJSONWithExtraProperty(e.Meta, "type", "meta")
	}
	if e.Channel != nil {
		return internal.MarshalJSONWithExtraProperty(e.Channel, "type", "channel")
	}
	if e.Image != nil {
		return internal.MarshalJSONWithExtraProperty(e.Image, "type", "image")
	}
	if e.Action != nil {
		return internal.MarshalJSONWithExtraProperty(e.Action, "type", "action")
	}
	if e.Divider != nil {
		return internal.MarshalJSONWithExtraProperty(e.Divider, "type", "divider")
	}
	if e.Group != nil {
		return internal.MarshalJSONWithExtraProperty(e.Group, "type", "group")
	}
	if e.Quote != nil {
		return internal.MarshalJSONWithExtraProperty(e.Quote, "type", "quote")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ElementalNodeVisitor interface {
	VisitText(*ElementalTextNode) error
	VisitMeta(*ElementalMetaNode) error
	VisitChannel(*ElementalChannelNode) error
	VisitImage(*ElementalImageNode) error
	VisitAction(*ElementalActionNode) error
	VisitDivider(*ElementalDividerNode) error
	VisitGroup(*ElementalGroupNode) error
	VisitQuote(*ElementalQuoteNode) error
}

func (e *ElementalNode) Accept(visitor ElementalNodeVisitor) error {
	if e.Text != nil {
		return visitor.VisitText(e.Text)
	}
	if e.Meta != nil {
		return visitor.VisitMeta(e.Meta)
	}
	if e.Channel != nil {
		return visitor.VisitChannel(e.Channel)
	}
	if e.Image != nil {
		return visitor.VisitImage(e.Image)
	}
	if e.Action != nil {
		return visitor.VisitAction(e.Action)
	}
	if e.Divider != nil {
		return visitor.VisitDivider(e.Divider)
	}
	if e.Group != nil {
		return visitor.VisitGroup(e.Group)
	}
	if e.Quote != nil {
		return visitor.VisitQuote(e.Quote)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

func (e *ElementalNode) validate() error {
	if e == nil {
		return fmt.Errorf("type %T is nil", e)
	}
	var fields []string
	if e.Text != nil {
		fields = append(fields, "text")
	}
	if e.Meta != nil {
		fields = append(fields, "meta")
	}
	if e.Channel != nil {
		fields = append(fields, "channel")
	}
	if e.Image != nil {
		fields = append(fields, "image")
	}
	if e.Action != nil {
		fields = append(fields, "action")
	}
	if e.Divider != nil {
		fields = append(fields, "divider")
	}
	if e.Group != nil {
		fields = append(fields, "group")
	}
	if e.Quote != nil {
		fields = append(fields, "quote")
	}
	if len(fields) == 0 {
		if e.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", e, e.Type)
		}
		return fmt.Errorf("type %T is empty", e)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", e, fields)
	}
	if e.Type != "" {
		field := fields[0]
		if e.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				e,
				e.Type,
				e,
			)
		}
	}
	return nil
}

// Renders a quote block.
var (
	elementalQuoteNodeFieldChannels    = big.NewInt(1 << 0)
	elementalQuoteNodeFieldRef         = big.NewInt(1 << 1)
	elementalQuoteNodeFieldIf          = big.NewInt(1 << 2)
	elementalQuoteNodeFieldLoop        = big.NewInt(1 << 3)
	elementalQuoteNodeFieldContent     = big.NewInt(1 << 4)
	elementalQuoteNodeFieldAlign       = big.NewInt(1 << 5)
	elementalQuoteNodeFieldBorderColor = big.NewInt(1 << 6)
	elementalQuoteNodeFieldTextStyle   = big.NewInt(1 << 7)
	elementalQuoteNodeFieldLocales     = big.NewInt(1 << 8)
)

type ElementalQuoteNode struct {
	Channels []string `json:"channels,omitempty" url:"channels,omitempty"`
	Ref      *string  `json:"ref,omitempty" url:"ref,omitempty"`
	If       *string  `json:"if,omitempty" url:"if,omitempty"`
	Loop     *string  `json:"loop,omitempty" url:"loop,omitempty"`
	// The text value of the quote.
	Content string `json:"content" url:"content"`
	// Alignment of the quote.
	Align *IAlignment `json:"align,omitempty" url:"align,omitempty"`
	// CSS border color property. For example, `#fff`
	BorderColor *string   `json:"borderColor,omitempty" url:"borderColor,omitempty"`
	TextStyle   TextStyle `json:"text_style" url:"text_style"`
	// Region specific content. See [locales docs](https://www.courier.com/docs/platform/content/elemental/locales/) for more details.
	Locales Locales `json:"locales,omitempty" url:"locales,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ElementalQuoteNode) GetChannels() []string {
	if e == nil {
		return nil
	}
	return e.Channels
}

func (e *ElementalQuoteNode) GetRef() *string {
	if e == nil {
		return nil
	}
	return e.Ref
}

func (e *ElementalQuoteNode) GetIf() *string {
	if e == nil {
		return nil
	}
	return e.If
}

func (e *ElementalQuoteNode) GetLoop() *string {
	if e == nil {
		return nil
	}
	return e.Loop
}

func (e *ElementalQuoteNode) GetContent() string {
	if e == nil {
		return ""
	}
	return e.Content
}

func (e *ElementalQuoteNode) GetAlign() *IAlignment {
	if e == nil {
		return nil
	}
	return e.Align
}

func (e *ElementalQuoteNode) GetBorderColor() *string {
	if e == nil {
		return nil
	}
	return e.BorderColor
}

func (e *ElementalQuoteNode) GetTextStyle() TextStyle {
	if e == nil {
		return ""
	}
	return e.TextStyle
}

func (e *ElementalQuoteNode) GetLocales() Locales {
	if e == nil {
		return nil
	}
	return e.Locales
}

func (e *ElementalQuoteNode) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ElementalQuoteNode) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalQuoteNode) SetChannels(channels []string) {
	e.Channels = channels
	e.require(elementalQuoteNodeFieldChannels)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalQuoteNode) SetRef(ref *string) {
	e.Ref = ref
	e.require(elementalQuoteNodeFieldRef)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalQuoteNode) SetIf(if_ *string) {
	e.If = if_
	e.require(elementalQuoteNodeFieldIf)
}

// SetLoop sets the Loop field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalQuoteNode) SetLoop(loop *string) {
	e.Loop = loop
	e.require(elementalQuoteNodeFieldLoop)
}

// SetContent sets the Content field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalQuoteNode) SetContent(content string) {
	e.Content = content
	e.require(elementalQuoteNodeFieldContent)
}

// SetAlign sets the Align field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalQuoteNode) SetAlign(align *IAlignment) {
	e.Align = align
	e.require(elementalQuoteNodeFieldAlign)
}

// SetBorderColor sets the BorderColor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalQuoteNode) SetBorderColor(borderColor *string) {
	e.BorderColor = borderColor
	e.require(elementalQuoteNodeFieldBorderColor)
}

// SetTextStyle sets the TextStyle field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalQuoteNode) SetTextStyle(textStyle TextStyle) {
	e.TextStyle = textStyle
	e.require(elementalQuoteNodeFieldTextStyle)
}

// SetLocales sets the Locales field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalQuoteNode) SetLocales(locales Locales) {
	e.Locales = locales
	e.require(elementalQuoteNodeFieldLocales)
}

func (e *ElementalQuoteNode) UnmarshalJSON(data []byte) error {
	type unmarshaler ElementalQuoteNode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ElementalQuoteNode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ElementalQuoteNode) MarshalJSON() ([]byte, error) {
	type embed ElementalQuoteNode
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ElementalQuoteNode) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Represents a body of text to be rendered inside of the notification.
var (
	elementalTextNodeFieldChannels      = big.NewInt(1 << 0)
	elementalTextNodeFieldRef           = big.NewInt(1 << 1)
	elementalTextNodeFieldIf            = big.NewInt(1 << 2)
	elementalTextNodeFieldLoop          = big.NewInt(1 << 3)
	elementalTextNodeFieldContent       = big.NewInt(1 << 4)
	elementalTextNodeFieldAlign         = big.NewInt(1 << 5)
	elementalTextNodeFieldTextStyle     = big.NewInt(1 << 6)
	elementalTextNodeFieldColor         = big.NewInt(1 << 7)
	elementalTextNodeFieldBold          = big.NewInt(1 << 8)
	elementalTextNodeFieldItalic        = big.NewInt(1 << 9)
	elementalTextNodeFieldStrikethrough = big.NewInt(1 << 10)
	elementalTextNodeFieldUnderline     = big.NewInt(1 << 11)
	elementalTextNodeFieldLocales       = big.NewInt(1 << 12)
	elementalTextNodeFieldFormat        = big.NewInt(1 << 13)
)

type ElementalTextNode struct {
	Channels []string `json:"channels,omitempty" url:"channels,omitempty"`
	Ref      *string  `json:"ref,omitempty" url:"ref,omitempty"`
	If       *string  `json:"if,omitempty" url:"if,omitempty"`
	Loop     *string  `json:"loop,omitempty" url:"loop,omitempty"`
	// The text content displayed in the notification. Either this
	// field must be specified, or the elements field
	Content string `json:"content" url:"content"`
	// Text alignment.
	Align TextAlign `json:"align" url:"align"`
	// Allows the text to be rendered as a heading level.
	TextStyle *TextStyle `json:"text_style,omitempty" url:"text_style,omitempty"`
	// Specifies the color of text. Can be any valid css color value
	Color *string `json:"color,omitempty" url:"color,omitempty"`
	// Apply bold to the text
	Bold *string `json:"bold,omitempty" url:"bold,omitempty"`
	// Apply italics to the text
	Italic *string `json:"italic,omitempty" url:"italic,omitempty"`
	// Apply a strike through the text
	Strikethrough *string `json:"strikethrough,omitempty" url:"strikethrough,omitempty"`
	// Apply an underline to the text
	Underline *string `json:"underline,omitempty" url:"underline,omitempty"`
	// Region specific content. See [locales docs](https://www.courier.com/docs/platform/content/elemental/locales/) for more details.
	Locales *Locales `json:"locales,omitempty" url:"locales,omitempty"`
	Format  *string  `json:"format,omitempty" url:"format,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ElementalTextNode) GetChannels() []string {
	if e == nil {
		return nil
	}
	return e.Channels
}

func (e *ElementalTextNode) GetRef() *string {
	if e == nil {
		return nil
	}
	return e.Ref
}

func (e *ElementalTextNode) GetIf() *string {
	if e == nil {
		return nil
	}
	return e.If
}

func (e *ElementalTextNode) GetLoop() *string {
	if e == nil {
		return nil
	}
	return e.Loop
}

func (e *ElementalTextNode) GetContent() string {
	if e == nil {
		return ""
	}
	return e.Content
}

func (e *ElementalTextNode) GetAlign() TextAlign {
	if e == nil {
		return ""
	}
	return e.Align
}

func (e *ElementalTextNode) GetTextStyle() *TextStyle {
	if e == nil {
		return nil
	}
	return e.TextStyle
}

func (e *ElementalTextNode) GetColor() *string {
	if e == nil {
		return nil
	}
	return e.Color
}

func (e *ElementalTextNode) GetBold() *string {
	if e == nil {
		return nil
	}
	return e.Bold
}

func (e *ElementalTextNode) GetItalic() *string {
	if e == nil {
		return nil
	}
	return e.Italic
}

func (e *ElementalTextNode) GetStrikethrough() *string {
	if e == nil {
		return nil
	}
	return e.Strikethrough
}

func (e *ElementalTextNode) GetUnderline() *string {
	if e == nil {
		return nil
	}
	return e.Underline
}

func (e *ElementalTextNode) GetLocales() *Locales {
	if e == nil {
		return nil
	}
	return e.Locales
}

func (e *ElementalTextNode) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ElementalTextNode) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalTextNode) SetChannels(channels []string) {
	e.Channels = channels
	e.require(elementalTextNodeFieldChannels)
}

// SetRef sets the Ref field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalTextNode) SetRef(ref *string) {
	e.Ref = ref
	e.require(elementalTextNodeFieldRef)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalTextNode) SetIf(if_ *string) {
	e.If = if_
	e.require(elementalTextNodeFieldIf)
}

// SetLoop sets the Loop field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalTextNode) SetLoop(loop *string) {
	e.Loop = loop
	e.require(elementalTextNodeFieldLoop)
}

// SetContent sets the Content field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalTextNode) SetContent(content string) {
	e.Content = content
	e.require(elementalTextNodeFieldContent)
}

// SetAlign sets the Align field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalTextNode) SetAlign(align TextAlign) {
	e.Align = align
	e.require(elementalTextNodeFieldAlign)
}

// SetTextStyle sets the TextStyle field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalTextNode) SetTextStyle(textStyle *TextStyle) {
	e.TextStyle = textStyle
	e.require(elementalTextNodeFieldTextStyle)
}

// SetColor sets the Color field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalTextNode) SetColor(color *string) {
	e.Color = color
	e.require(elementalTextNodeFieldColor)
}

// SetBold sets the Bold field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalTextNode) SetBold(bold *string) {
	e.Bold = bold
	e.require(elementalTextNodeFieldBold)
}

// SetItalic sets the Italic field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalTextNode) SetItalic(italic *string) {
	e.Italic = italic
	e.require(elementalTextNodeFieldItalic)
}

// SetStrikethrough sets the Strikethrough field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalTextNode) SetStrikethrough(strikethrough *string) {
	e.Strikethrough = strikethrough
	e.require(elementalTextNodeFieldStrikethrough)
}

// SetUnderline sets the Underline field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalTextNode) SetUnderline(underline *string) {
	e.Underline = underline
	e.require(elementalTextNodeFieldUnderline)
}

// SetLocales sets the Locales field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalTextNode) SetLocales(locales *Locales) {
	e.Locales = locales
	e.require(elementalTextNodeFieldLocales)
}

// SetFormat sets the Format field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ElementalTextNode) SetFormat(format *string) {
	e.Format = format
	e.require(elementalTextNodeFieldFormat)
}

func (e *ElementalTextNode) UnmarshalJSON(data []byte) error {
	type unmarshaler ElementalTextNode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ElementalTextNode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ElementalTextNode) MarshalJSON() ([]byte, error) {
	type embed ElementalTextNode
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ElementalTextNode) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	emailFooterFieldContent        = big.NewInt(1 << 0)
	emailFooterFieldInheritDefault = big.NewInt(1 << 1)
)

type EmailFooter struct {
	Content        interface{} `json:"content,omitempty" url:"content,omitempty"`
	InheritDefault *bool       `json:"inheritDefault,omitempty" url:"inheritDefault,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailFooter) GetContent() interface{} {
	if e == nil {
		return nil
	}
	return e.Content
}

func (e *EmailFooter) GetInheritDefault() *bool {
	if e == nil {
		return nil
	}
	return e.InheritDefault
}

func (e *EmailFooter) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailFooter) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetContent sets the Content field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EmailFooter) SetContent(content interface{}) {
	e.Content = content
	e.require(emailFooterFieldContent)
}

// SetInheritDefault sets the InheritDefault field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EmailFooter) SetInheritDefault(inheritDefault *bool) {
	e.InheritDefault = inheritDefault
	e.require(emailFooterFieldInheritDefault)
}

func (e *EmailFooter) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailFooter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailFooter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailFooter) MarshalJSON() ([]byte, error) {
	type embed EmailFooter
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *EmailFooter) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	emailHeadFieldInheritDefault = big.NewInt(1 << 0)
	emailHeadFieldContent        = big.NewInt(1 << 1)
)

type EmailHead struct {
	InheritDefault bool    `json:"inheritDefault" url:"inheritDefault"`
	Content        *string `json:"content,omitempty" url:"content,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailHead) GetInheritDefault() bool {
	if e == nil {
		return false
	}
	return e.InheritDefault
}

func (e *EmailHead) GetContent() *string {
	if e == nil {
		return nil
	}
	return e.Content
}

func (e *EmailHead) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailHead) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetInheritDefault sets the InheritDefault field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EmailHead) SetInheritDefault(inheritDefault bool) {
	e.InheritDefault = inheritDefault
	e.require(emailHeadFieldInheritDefault)
}

// SetContent sets the Content field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EmailHead) SetContent(content *string) {
	e.Content = content
	e.require(emailHeadFieldContent)
}

func (e *EmailHead) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailHead
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailHead(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailHead) MarshalJSON() ([]byte, error) {
	type embed EmailHead
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *EmailHead) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	emailHeaderFieldInheritDefault = big.NewInt(1 << 0)
	emailHeaderFieldBarColor       = big.NewInt(1 << 1)
	emailHeaderFieldLogo           = big.NewInt(1 << 2)
)

type EmailHeader struct {
	InheritDefault *bool   `json:"inheritDefault,omitempty" url:"inheritDefault,omitempty"`
	BarColor       *string `json:"barColor,omitempty" url:"barColor,omitempty"`
	Logo           *Logo   `json:"logo" url:"logo"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailHeader) GetInheritDefault() *bool {
	if e == nil {
		return nil
	}
	return e.InheritDefault
}

func (e *EmailHeader) GetBarColor() *string {
	if e == nil {
		return nil
	}
	return e.BarColor
}

func (e *EmailHeader) GetLogo() *Logo {
	if e == nil {
		return nil
	}
	return e.Logo
}

func (e *EmailHeader) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailHeader) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetInheritDefault sets the InheritDefault field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EmailHeader) SetInheritDefault(inheritDefault *bool) {
	e.InheritDefault = inheritDefault
	e.require(emailHeaderFieldInheritDefault)
}

// SetBarColor sets the BarColor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EmailHeader) SetBarColor(barColor *string) {
	e.BarColor = barColor
	e.require(emailHeaderFieldBarColor)
}

// SetLogo sets the Logo field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EmailHeader) SetLogo(logo *Logo) {
	e.Logo = logo
	e.require(emailHeaderFieldLogo)
}

func (e *EmailHeader) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailHeader
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailHeader(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailHeader) MarshalJSON() ([]byte, error) {
	type embed EmailHeader
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *EmailHeader) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExpiresInType struct {
	String  string
	Integer int

	typ string
}

func (e *ExpiresInType) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *ExpiresInType) GetInteger() int {
	if e == nil {
		return 0
	}
	return e.Integer
}

func (e *ExpiresInType) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		e.typ = "Integer"
		e.Integer = valueInteger
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExpiresInType) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "Integer" || e.Integer != 0 {
		return json.Marshal(e.Integer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExpiresInTypeVisitor interface {
	VisitString(string) error
	VisitInteger(int) error
}

func (e *ExpiresInType) Accept(visitor ExpiresInTypeVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "Integer" || e.Integer != 0 {
		return visitor.VisitInteger(e.Integer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

var (
	expiryFieldExpiresAt = big.NewInt(1 << 0)
	expiryFieldExpiresIn = big.NewInt(1 << 1)
)

type Expiry struct {
	// An epoch timestamp or ISO8601 timestamp with timezone `(YYYY-MM-DDThh:mm:ss.sTZD)` that describes the time in which a message expires.
	ExpiresAt *string `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	// A duration in the form of milliseconds or an ISO8601 Duration format (i.e. P1DT4H).
	ExpiresIn *ExpiresInType `json:"expires_in" url:"expires_in"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *Expiry) GetExpiresAt() *string {
	if e == nil {
		return nil
	}
	return e.ExpiresAt
}

func (e *Expiry) GetExpiresIn() *ExpiresInType {
	if e == nil {
		return nil
	}
	return e.ExpiresIn
}

func (e *Expiry) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Expiry) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetExpiresAt sets the ExpiresAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *Expiry) SetExpiresAt(expiresAt *string) {
	e.ExpiresAt = expiresAt
	e.require(expiryFieldExpiresAt)
}

// SetExpiresIn sets the ExpiresIn field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *Expiry) SetExpiresIn(expiresIn *ExpiresInType) {
	e.ExpiresIn = expiresIn
	e.require(expiryFieldExpiresIn)
}

func (e *Expiry) UnmarshalJSON(data []byte) error {
	type unmarshaler Expiry
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Expiry(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *Expiry) MarshalJSON() ([]byte, error) {
	type embed Expiry
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *Expiry) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type IActionButtonStyle string

const (
	IActionButtonStyleButton IActionButtonStyle = "button"
	IActionButtonStyleLink   IActionButtonStyle = "link"
)

func NewIActionButtonStyleFromString(s string) (IActionButtonStyle, error) {
	switch s {
	case "button":
		return IActionButtonStyleButton, nil
	case "link":
		return IActionButtonStyleLink, nil
	}
	var t IActionButtonStyle
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IActionButtonStyle) Ptr() *IActionButtonStyle {
	return &i
}

type IAlignment string

const (
	IAlignmentCenter IAlignment = "center"
	IAlignmentLeft   IAlignment = "left"
	IAlignmentRight  IAlignment = "right"
	IAlignmentFull   IAlignment = "full"
)

func NewIAlignmentFromString(s string) (IAlignment, error) {
	switch s {
	case "center":
		return IAlignmentCenter, nil
	case "left":
		return IAlignmentLeft, nil
	case "right":
		return IAlignmentRight, nil
	case "full":
		return IAlignmentFull, nil
	}
	var t IAlignment
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IAlignment) Ptr() *IAlignment {
	return &i
}

type IPreferences = map[string]*Preference

var (
	iProfilePreferencesFieldCategories    = big.NewInt(1 << 0)
	iProfilePreferencesFieldNotifications = big.NewInt(1 << 1)
	iProfilePreferencesFieldTemplateId    = big.NewInt(1 << 2)
)

type IProfilePreferences struct {
	Categories    *IPreferences `json:"categories,omitempty" url:"categories,omitempty"`
	Notifications IPreferences  `json:"notifications" url:"notifications"`
	TemplateId    *string       `json:"templateId,omitempty" url:"templateId,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IProfilePreferences) GetCategories() *IPreferences {
	if i == nil {
		return nil
	}
	return i.Categories
}

func (i *IProfilePreferences) GetNotifications() IPreferences {
	if i == nil {
		return nil
	}
	return i.Notifications
}

func (i *IProfilePreferences) GetTemplateId() *string {
	if i == nil {
		return nil
	}
	return i.TemplateId
}

func (i *IProfilePreferences) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IProfilePreferences) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetCategories sets the Categories field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *IProfilePreferences) SetCategories(categories *IPreferences) {
	i.Categories = categories
	i.require(iProfilePreferencesFieldCategories)
}

// SetNotifications sets the Notifications field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *IProfilePreferences) SetNotifications(notifications IPreferences) {
	i.Notifications = notifications
	i.require(iProfilePreferencesFieldNotifications)
}

// SetTemplateId sets the TemplateId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *IProfilePreferences) SetTemplateId(templateId *string) {
	i.TemplateId = templateId
	i.require(iProfilePreferencesFieldTemplateId)
}

func (i *IProfilePreferences) UnmarshalJSON(data []byte) error {
	type unmarshaler IProfilePreferences
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IProfilePreferences(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IProfilePreferences) MarshalJSON() ([]byte, error) {
	type embed IProfilePreferences
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *IProfilePreferences) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

var (
	iconsFieldBell    = big.NewInt(1 << 0)
	iconsFieldMessage = big.NewInt(1 << 1)
)

type Icons struct {
	Bell    *string `json:"bell,omitempty" url:"bell,omitempty"`
	Message *string `json:"message,omitempty" url:"message,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *Icons) GetBell() *string {
	if i == nil {
		return nil
	}
	return i.Bell
}

func (i *Icons) GetMessage() *string {
	if i == nil {
		return nil
	}
	return i.Message
}

func (i *Icons) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Icons) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetBell sets the Bell field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *Icons) SetBell(bell *string) {
	i.Bell = bell
	i.require(iconsFieldBell)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *Icons) SetMessage(message *string) {
	i.Message = message
	i.require(iconsFieldMessage)
}

func (i *Icons) UnmarshalJSON(data []byte) error {
	type unmarshaler Icons
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = Icons(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *Icons) MarshalJSON() ([]byte, error) {
	type embed Icons
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *Icons) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type InAppPlacement string

const (
	InAppPlacementTop    InAppPlacement = "top"
	InAppPlacementBottom InAppPlacement = "bottom"
	InAppPlacementLeft   InAppPlacement = "left"
	InAppPlacementRight  InAppPlacement = "right"
)

func NewInAppPlacementFromString(s string) (InAppPlacement, error) {
	switch s {
	case "top":
		return InAppPlacementTop, nil
	case "bottom":
		return InAppPlacementBottom, nil
	case "left":
		return InAppPlacementLeft, nil
	case "right":
		return InAppPlacementRight, nil
	}
	var t InAppPlacement
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InAppPlacement) Ptr() *InAppPlacement {
	return &i
}

var (
	invalidListPatternRecipientFieldUserId = big.NewInt(1 << 0)
	invalidListPatternRecipientFieldListId = big.NewInt(1 << 1)
)

type InvalidListPatternRecipient struct {
	UserId string `json:"user_id" url:"user_id"`
	ListId string `json:"list_id" url:"list_id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvalidListPatternRecipient) GetUserId() string {
	if i == nil {
		return ""
	}
	return i.UserId
}

func (i *InvalidListPatternRecipient) GetListId() string {
	if i == nil {
		return ""
	}
	return i.ListId
}

func (i *InvalidListPatternRecipient) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvalidListPatternRecipient) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetUserId sets the UserId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InvalidListPatternRecipient) SetUserId(userId string) {
	i.UserId = userId
	i.require(invalidListPatternRecipientFieldUserId)
}

// SetListId sets the ListId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InvalidListPatternRecipient) SetListId(listId string) {
	i.ListId = listId
	i.require(invalidListPatternRecipientFieldListId)
}

func (i *InvalidListPatternRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler InvalidListPatternRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvalidListPatternRecipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvalidListPatternRecipient) MarshalJSON() ([]byte, error) {
	type embed InvalidListPatternRecipient
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InvalidListPatternRecipient) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

var (
	invalidListRecipientFieldUserId      = big.NewInt(1 << 0)
	invalidListRecipientFieldListPattern = big.NewInt(1 << 1)
)

type InvalidListRecipient struct {
	UserId      string `json:"user_id" url:"user_id"`
	ListPattern string `json:"list_pattern" url:"list_pattern"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvalidListRecipient) GetUserId() string {
	if i == nil {
		return ""
	}
	return i.UserId
}

func (i *InvalidListRecipient) GetListPattern() string {
	if i == nil {
		return ""
	}
	return i.ListPattern
}

func (i *InvalidListRecipient) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvalidListRecipient) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetUserId sets the UserId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InvalidListRecipient) SetUserId(userId string) {
	i.UserId = userId
	i.require(invalidListRecipientFieldUserId)
}

// SetListPattern sets the ListPattern field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InvalidListRecipient) SetListPattern(listPattern string) {
	i.ListPattern = listPattern
	i.require(invalidListRecipientFieldListPattern)
}

func (i *InvalidListRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler InvalidListRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvalidListRecipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvalidListRecipient) MarshalJSON() ([]byte, error) {
	type embed InvalidListRecipient
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InvalidListRecipient) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

var (
	invalidUserRecipientFieldListId      = big.NewInt(1 << 0)
	invalidUserRecipientFieldListPattern = big.NewInt(1 << 1)
)

type InvalidUserRecipient struct {
	ListId      string `json:"list_id" url:"list_id"`
	ListPattern string `json:"list_pattern" url:"list_pattern"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvalidUserRecipient) GetListId() string {
	if i == nil {
		return ""
	}
	return i.ListId
}

func (i *InvalidUserRecipient) GetListPattern() string {
	if i == nil {
		return ""
	}
	return i.ListPattern
}

func (i *InvalidUserRecipient) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvalidUserRecipient) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetListId sets the ListId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InvalidUserRecipient) SetListId(listId string) {
	i.ListId = listId
	i.require(invalidUserRecipientFieldListId)
}

// SetListPattern sets the ListPattern field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InvalidUserRecipient) SetListPattern(listPattern string) {
	i.ListPattern = listPattern
	i.require(invalidUserRecipientFieldListPattern)
}

func (i *InvalidUserRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler InvalidUserRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvalidUserRecipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvalidUserRecipient) MarshalJSON() ([]byte, error) {
	type embed InvalidUserRecipient
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InvalidUserRecipient) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

var (
	listFilterFieldValue = big.NewInt(1 << 0)
)

type ListFilter struct {
	// Send to users only if they are member of the account
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	operator       string
	path           string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListFilter) GetValue() string {
	if l == nil {
		return ""
	}
	return l.Value
}

func (l *ListFilter) Operator() string {
	return l.operator
}

func (l *ListFilter) Path() string {
	return l.path
}

func (l *ListFilter) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListFilter) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListFilter) SetValue(value string) {
	l.Value = value
	l.require(listFilterFieldValue)
}

func (l *ListFilter) UnmarshalJSON(data []byte) error {
	type embed ListFilter
	var unmarshaler = struct {
		embed
		Operator string `json:"operator"`
		Path     string `json:"path"`
	}{
		embed: embed(*l),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*l = ListFilter(unmarshaler.embed)
	if unmarshaler.Operator != "MEMBER_OF" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", l, "MEMBER_OF", unmarshaler.Operator)
	}
	l.operator = unmarshaler.Operator
	if unmarshaler.Path != "account_id" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", l, "account_id", unmarshaler.Path)
	}
	l.path = unmarshaler.Path
	extraProperties, err := internal.ExtractExtraProperties(data, *l, "operator", "path")
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFilter) MarshalJSON() ([]byte, error) {
	type embed ListFilter
	var marshaler = struct {
		embed
		Operator string `json:"operator"`
		Path     string `json:"path"`
	}{
		embed:    embed(*l),
		Operator: "MEMBER_OF",
		Path:     "account_id",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListFilter) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	listPatternRecipientFieldListPattern = big.NewInt(1 << 0)
	listPatternRecipientFieldData        = big.NewInt(1 << 1)
)

type ListPatternRecipient struct {
	ListPattern *string      `json:"list_pattern,omitempty" url:"list_pattern,omitempty"`
	Data        *MessageData `json:"data,omitempty" url:"data,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListPatternRecipient) GetListPattern() *string {
	if l == nil {
		return nil
	}
	return l.ListPattern
}

func (l *ListPatternRecipient) GetData() *MessageData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListPatternRecipient) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPatternRecipient) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetListPattern sets the ListPattern field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListPatternRecipient) SetListPattern(listPattern *string) {
	l.ListPattern = listPattern
	l.require(listPatternRecipientFieldListPattern)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListPatternRecipient) SetData(data *MessageData) {
	l.Data = data
	l.require(listPatternRecipientFieldData)
}

func (l *ListPatternRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPatternRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPatternRecipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPatternRecipient) MarshalJSON() ([]byte, error) {
	type embed ListPatternRecipient
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListPatternRecipient) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListPatternRecipientType struct {

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListPatternRecipientType) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPatternRecipientType) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

func (l *ListPatternRecipientType) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPatternRecipientType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPatternRecipientType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPatternRecipientType) MarshalJSON() ([]byte, error) {
	type embed ListPatternRecipientType
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListPatternRecipientType) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	listRecipientFieldListId  = big.NewInt(1 << 0)
	listRecipientFieldData    = big.NewInt(1 << 1)
	listRecipientFieldFilters = big.NewInt(1 << 2)
)

type ListRecipient struct {
	ListId  *string       `json:"list_id,omitempty" url:"list_id,omitempty"`
	Data    *MessageData  `json:"data,omitempty" url:"data,omitempty"`
	Filters []*ListFilter `json:"filters,omitempty" url:"filters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListRecipient) GetListId() *string {
	if l == nil {
		return nil
	}
	return l.ListId
}

func (l *ListRecipient) GetData() *MessageData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListRecipient) GetFilters() []*ListFilter {
	if l == nil {
		return nil
	}
	return l.Filters
}

func (l *ListRecipient) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListRecipient) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetListId sets the ListId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListRecipient) SetListId(listId *string) {
	l.ListId = listId
	l.require(listRecipientFieldListId)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListRecipient) SetData(data *MessageData) {
	l.Data = data
	l.require(listRecipientFieldData)
}

// SetFilters sets the Filters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListRecipient) SetFilters(filters []*ListFilter) {
	l.Filters = filters
	l.require(listRecipientFieldFilters)
}

func (l *ListRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler ListRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListRecipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListRecipient) MarshalJSON() ([]byte, error) {
	type embed ListRecipient
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListRecipient) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListRecipientType struct {

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListRecipientType) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListRecipientType) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

func (l *ListRecipientType) UnmarshalJSON(data []byte) error {
	type unmarshaler ListRecipientType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListRecipientType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListRecipientType) MarshalJSON() ([]byte, error) {
	type embed ListRecipientType
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListRecipientType) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	localeFieldContent = big.NewInt(1 << 0)
)

type Locale struct {
	Content string `json:"content" url:"content"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *Locale) GetContent() string {
	if l == nil {
		return ""
	}
	return l.Content
}

func (l *Locale) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *Locale) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetContent sets the Content field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *Locale) SetContent(content string) {
	l.Content = content
	l.require(localeFieldContent)
}

func (l *Locale) UnmarshalJSON(data []byte) error {
	type unmarshaler Locale
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = Locale(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *Locale) MarshalJSON() ([]byte, error) {
	type embed Locale
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *Locale) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type Locales = map[string]*Locale

var (
	logoFieldHref  = big.NewInt(1 << 0)
	logoFieldImage = big.NewInt(1 << 1)
)

type Logo struct {
	Href  *string `json:"href,omitempty" url:"href,omitempty"`
	Image *string `json:"image,omitempty" url:"image,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *Logo) GetHref() *string {
	if l == nil {
		return nil
	}
	return l.Href
}

func (l *Logo) GetImage() *string {
	if l == nil {
		return nil
	}
	return l.Image
}

func (l *Logo) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *Logo) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetHref sets the Href field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *Logo) SetHref(href *string) {
	l.Href = href
	l.require(logoFieldHref)
}

// SetImage sets the Image field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *Logo) SetImage(image *string) {
	l.Image = image
	l.require(logoFieldImage)
}

func (l *Logo) UnmarshalJSON(data []byte) error {
	type unmarshaler Logo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = Logo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *Logo) MarshalJSON() ([]byte, error) {
	type embed Logo
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *Logo) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type Message struct {
	// Describes the content of the message in a way that will work for email, push, chat, or any channel.
	ContentMessage *ContentMessage
	// A template for a type of message that can be sent more than once. For example, you might create an "Appointment Reminder" Notification or “Reset Password” Notifications.
	TemplateMessage *TemplateMessage

	typ string
}

func (m *Message) GetContentMessage() *ContentMessage {
	if m == nil {
		return nil
	}
	return m.ContentMessage
}

func (m *Message) GetTemplateMessage() *TemplateMessage {
	if m == nil {
		return nil
	}
	return m.TemplateMessage
}

func (m *Message) UnmarshalJSON(data []byte) error {
	valueContentMessage := new(ContentMessage)
	if err := json.Unmarshal(data, &valueContentMessage); err == nil {
		m.typ = "ContentMessage"
		m.ContentMessage = valueContentMessage
		return nil
	}
	valueTemplateMessage := new(TemplateMessage)
	if err := json.Unmarshal(data, &valueTemplateMessage); err == nil {
		m.typ = "TemplateMessage"
		m.TemplateMessage = valueTemplateMessage
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, m)
}

func (m Message) MarshalJSON() ([]byte, error) {
	if m.typ == "ContentMessage" || m.ContentMessage != nil {
		return json.Marshal(m.ContentMessage)
	}
	if m.typ == "TemplateMessage" || m.TemplateMessage != nil {
		return json.Marshal(m.TemplateMessage)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", m)
}

type MessageVisitor interface {
	VisitContentMessage(*ContentMessage) error
	VisitTemplateMessage(*TemplateMessage) error
}

func (m *Message) Accept(visitor MessageVisitor) error {
	if m.typ == "ContentMessage" || m.ContentMessage != nil {
		return visitor.VisitContentMessage(m.ContentMessage)
	}
	if m.typ == "TemplateMessage" || m.TemplateMessage != nil {
		return visitor.VisitTemplateMessage(m.TemplateMessage)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", m)
}

type MessageChannels = map[string]*Channel

var (
	messageContextFieldTenantId = big.NewInt(1 << 0)
)

type MessageContext struct {
	// An id of a tenant, see [tenants api docs](https://www.courier.com/docs/reference/tenants/).
	// Will load brand, default preferences and any other base context data associated with this tenant.
	TenantId *string `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MessageContext) GetTenantId() *string {
	if m == nil {
		return nil
	}
	return m.TenantId
}

func (m *MessageContext) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MessageContext) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetTenantId sets the TenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageContext) SetTenantId(tenantId *string) {
	m.TenantId = tenantId
	m.require(messageContextFieldTenantId)
}

func (m *MessageContext) UnmarshalJSON(data []byte) error {
	type unmarshaler MessageContext
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MessageContext(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MessageContext) MarshalJSON() ([]byte, error) {
	type embed MessageContext
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MessageContext) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MessageData = map[string]interface{}

var (
	messageMetadataFieldEvent   = big.NewInt(1 << 0)
	messageMetadataFieldTags    = big.NewInt(1 << 1)
	messageMetadataFieldUtm     = big.NewInt(1 << 2)
	messageMetadataFieldTraceId = big.NewInt(1 << 3)
)

type MessageMetadata struct {
	// An arbitrary string to tracks the event that generated this request (e.g. 'signup').
	Event *string `json:"event,omitempty" url:"event,omitempty"`
	// An array of up to 9 tags you wish to associate with this request (and corresponding messages) for later analysis. Individual tags cannot be more than 30 characters in length.
	Tags []string `json:"tags,omitempty" url:"tags,omitempty"`
	// Identify the campaign that refers traffic to a specific website, and attributes the browser's website session.
	Utm *Utm `json:"utm,omitempty" url:"utm,omitempty"`
	// A unique ID used to correlate this request to processing on your servers. Note: Courier does not verify the uniqueness of this ID.
	TraceId *string `json:"trace_id,omitempty" url:"trace_id,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MessageMetadata) GetEvent() *string {
	if m == nil {
		return nil
	}
	return m.Event
}

func (m *MessageMetadata) GetTags() []string {
	if m == nil {
		return nil
	}
	return m.Tags
}

func (m *MessageMetadata) GetUtm() *Utm {
	if m == nil {
		return nil
	}
	return m.Utm
}

func (m *MessageMetadata) GetTraceId() *string {
	if m == nil {
		return nil
	}
	return m.TraceId
}

func (m *MessageMetadata) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MessageMetadata) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetEvent sets the Event field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageMetadata) SetEvent(event *string) {
	m.Event = event
	m.require(messageMetadataFieldEvent)
}

// SetTags sets the Tags field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageMetadata) SetTags(tags []string) {
	m.Tags = tags
	m.require(messageMetadataFieldTags)
}

// SetUtm sets the Utm field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageMetadata) SetUtm(utm *Utm) {
	m.Utm = utm
	m.require(messageMetadataFieldUtm)
}

// SetTraceId sets the TraceId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageMetadata) SetTraceId(traceId *string) {
	m.TraceId = traceId
	m.require(messageMetadataFieldTraceId)
}

func (m *MessageMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler MessageMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MessageMetadata(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MessageMetadata) MarshalJSON() ([]byte, error) {
	type embed MessageMetadata
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MessageMetadata) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

var (
	messagePreferencesFieldSubscriptionTopicId = big.NewInt(1 << 0)
)

type MessagePreferences struct {
	// The ID of the subscription topic you want to apply to the message. If this is a templated message, it will override the subscription topic if already associated
	SubscriptionTopicId string `json:"subscription_topic_id" url:"subscription_topic_id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MessagePreferences) GetSubscriptionTopicId() string {
	if m == nil {
		return ""
	}
	return m.SubscriptionTopicId
}

func (m *MessagePreferences) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MessagePreferences) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetSubscriptionTopicId sets the SubscriptionTopicId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessagePreferences) SetSubscriptionTopicId(subscriptionTopicId string) {
	m.SubscriptionTopicId = subscriptionTopicId
	m.require(messagePreferencesFieldSubscriptionTopicId)
}

func (m *MessagePreferences) UnmarshalJSON(data []byte) error {
	type unmarshaler MessagePreferences
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MessagePreferences(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MessagePreferences) MarshalJSON() ([]byte, error) {
	type embed MessagePreferences
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MessagePreferences) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MessageProviders = map[string]*MessageProvidersType

var (
	messageProvidersTypeFieldOverride = big.NewInt(1 << 0)
	messageProvidersTypeFieldIf       = big.NewInt(1 << 1)
	messageProvidersTypeFieldTimeouts = big.NewInt(1 << 2)
	messageProvidersTypeFieldMetadata = big.NewInt(1 << 3)
)

type MessageProvidersType struct {
	// Provider specific overrides.
	Override map[string]interface{} `json:"override,omitempty" url:"override,omitempty"`
	// A JavaScript conditional expression to determine if the message should
	// be sent through the provider. Has access to the data and profile object.
	// Only applies when a custom routing strategy is defined.
	// For example, `data.name === profile.name`
	If       *string   `json:"if,omitempty" url:"if,omitempty"`
	Timeouts *int      `json:"timeouts,omitempty" url:"timeouts,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty" url:"metadata,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MessageProvidersType) GetOverride() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Override
}

func (m *MessageProvidersType) GetIf() *string {
	if m == nil {
		return nil
	}
	return m.If
}

func (m *MessageProvidersType) GetTimeouts() *int {
	if m == nil {
		return nil
	}
	return m.Timeouts
}

func (m *MessageProvidersType) GetMetadata() *Metadata {
	if m == nil {
		return nil
	}
	return m.Metadata
}

func (m *MessageProvidersType) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MessageProvidersType) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetOverride sets the Override field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageProvidersType) SetOverride(override map[string]interface{}) {
	m.Override = override
	m.require(messageProvidersTypeFieldOverride)
}

// SetIf sets the If field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageProvidersType) SetIf(if_ *string) {
	m.If = if_
	m.require(messageProvidersTypeFieldIf)
}

// SetTimeouts sets the Timeouts field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageProvidersType) SetTimeouts(timeouts *int) {
	m.Timeouts = timeouts
	m.require(messageProvidersTypeFieldTimeouts)
}

// SetMetadata sets the Metadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageProvidersType) SetMetadata(metadata *Metadata) {
	m.Metadata = metadata
	m.require(messageProvidersTypeFieldMetadata)
}

func (m *MessageProvidersType) UnmarshalJSON(data []byte) error {
	type unmarshaler MessageProvidersType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MessageProvidersType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MessageProvidersType) MarshalJSON() ([]byte, error) {
	type embed MessageProvidersType
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MessageProvidersType) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MessageRecipient struct {
	Recipient     *Recipient
	RecipientList []*Recipient

	typ string
}

func (m *MessageRecipient) GetRecipient() *Recipient {
	if m == nil {
		return nil
	}
	return m.Recipient
}

func (m *MessageRecipient) GetRecipientList() []*Recipient {
	if m == nil {
		return nil
	}
	return m.RecipientList
}

func (m *MessageRecipient) UnmarshalJSON(data []byte) error {
	valueRecipient := new(Recipient)
	if err := json.Unmarshal(data, &valueRecipient); err == nil {
		m.typ = "Recipient"
		m.Recipient = valueRecipient
		return nil
	}
	var valueRecipientList []*Recipient
	if err := json.Unmarshal(data, &valueRecipientList); err == nil {
		m.typ = "RecipientList"
		m.RecipientList = valueRecipientList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, m)
}

func (m MessageRecipient) MarshalJSON() ([]byte, error) {
	if m.typ == "Recipient" || m.Recipient != nil {
		return json.Marshal(m.Recipient)
	}
	if m.typ == "RecipientList" || m.RecipientList != nil {
		return json.Marshal(m.RecipientList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", m)
}

type MessageRecipientVisitor interface {
	VisitRecipient(*Recipient) error
	VisitRecipientList([]*Recipient) error
}

func (m *MessageRecipient) Accept(visitor MessageRecipientVisitor) error {
	if m.typ == "Recipient" || m.Recipient != nil {
		return visitor.VisitRecipient(m.Recipient)
	}
	if m.typ == "RecipientList" || m.RecipientList != nil {
		return visitor.VisitRecipientList(m.RecipientList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", m)
}

var (
	metadataFieldUtm = big.NewInt(1 << 0)
)

type Metadata struct {
	Utm *Utm `json:"utm,omitempty" url:"utm,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *Metadata) GetUtm() *Utm {
	if m == nil {
		return nil
	}
	return m.Utm
}

func (m *Metadata) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *Metadata) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetUtm sets the Utm field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *Metadata) SetUtm(utm *Utm) {
	m.Utm = utm
	m.require(metadataFieldUtm)
}

func (m *Metadata) UnmarshalJSON(data []byte) error {
	type unmarshaler Metadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = Metadata(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *Metadata) MarshalJSON() ([]byte, error) {
	type embed Metadata
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *Metadata) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

var (
	msTeamsRecipientFieldMsTeams = big.NewInt(1 << 0)
)

type MsTeamsRecipient struct {
	MsTeams *MsTeams `json:"ms_teams" url:"ms_teams"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MsTeamsRecipient) GetMsTeams() *MsTeams {
	if m == nil {
		return nil
	}
	return m.MsTeams
}

func (m *MsTeamsRecipient) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MsTeamsRecipient) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetMsTeams sets the MsTeams field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MsTeamsRecipient) SetMsTeams(msTeams *MsTeams) {
	m.MsTeams = msTeams
	m.require(msTeamsRecipientFieldMsTeams)
}

func (m *MsTeamsRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler MsTeamsRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MsTeamsRecipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MsTeamsRecipient) MarshalJSON() ([]byte, error) {
	type embed MsTeamsRecipient
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MsTeamsRecipient) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

var (
	pagerdutyRecipientFieldPagerduty = big.NewInt(1 << 0)
)

type PagerdutyRecipient struct {
	Pagerduty *Pagerduty `json:"pagerduty" url:"pagerduty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PagerdutyRecipient) GetPagerduty() *Pagerduty {
	if p == nil {
		return nil
	}
	return p.Pagerduty
}

func (p *PagerdutyRecipient) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PagerdutyRecipient) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetPagerduty sets the Pagerduty field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PagerdutyRecipient) SetPagerduty(pagerduty *Pagerduty) {
	p.Pagerduty = pagerduty
	p.require(pagerdutyRecipientFieldPagerduty)
}

func (p *PagerdutyRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler PagerdutyRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PagerdutyRecipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PagerdutyRecipient) MarshalJSON() ([]byte, error) {
	type embed PagerdutyRecipient
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PagerdutyRecipient) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	preferenceFieldStatus             = big.NewInt(1 << 0)
	preferenceFieldRules              = big.NewInt(1 << 1)
	preferenceFieldChannelPreferences = big.NewInt(1 << 2)
	preferenceFieldSource             = big.NewInt(1 << 3)
)

type Preference struct {
	Status             PreferenceStatus     `json:"status" url:"status"`
	Rules              []*Rule              `json:"rules,omitempty" url:"rules,omitempty"`
	ChannelPreferences []*ChannelPreference `json:"channel_preferences,omitempty" url:"channel_preferences,omitempty"`
	Source             *ChannelSource       `json:"source,omitempty" url:"source,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *Preference) GetStatus() PreferenceStatus {
	if p == nil {
		return ""
	}
	return p.Status
}

func (p *Preference) GetRules() []*Rule {
	if p == nil {
		return nil
	}
	return p.Rules
}

func (p *Preference) GetChannelPreferences() []*ChannelPreference {
	if p == nil {
		return nil
	}
	return p.ChannelPreferences
}

func (p *Preference) GetSource() *ChannelSource {
	if p == nil {
		return nil
	}
	return p.Source
}

func (p *Preference) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Preference) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetStatus sets the Status field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *Preference) SetStatus(status PreferenceStatus) {
	p.Status = status
	p.require(preferenceFieldStatus)
}

// SetRules sets the Rules field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *Preference) SetRules(rules []*Rule) {
	p.Rules = rules
	p.require(preferenceFieldRules)
}

// SetChannelPreferences sets the ChannelPreferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *Preference) SetChannelPreferences(channelPreferences []*ChannelPreference) {
	p.ChannelPreferences = channelPreferences
	p.require(preferenceFieldChannelPreferences)
}

// SetSource sets the Source field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *Preference) SetSource(source *ChannelSource) {
	p.Source = source
	p.require(preferenceFieldSource)
}

func (p *Preference) UnmarshalJSON(data []byte) error {
	type unmarshaler Preference
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Preference(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *Preference) MarshalJSON() ([]byte, error) {
	type embed Preference
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *Preference) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	preferencesFieldTemplateIds = big.NewInt(1 << 0)
)

type Preferences struct {
	TemplateIds []string `json:"templateIds" url:"templateIds"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *Preferences) GetTemplateIds() []string {
	if p == nil {
		return nil
	}
	return p.TemplateIds
}

func (p *Preferences) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Preferences) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetTemplateIds sets the TemplateIds field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *Preferences) SetTemplateIds(templateIds []string) {
	p.TemplateIds = templateIds
	p.require(preferencesFieldTemplateIds)
}

func (p *Preferences) UnmarshalJSON(data []byte) error {
	type unmarshaler Preferences
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Preferences(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *Preferences) MarshalJSON() ([]byte, error) {
	type embed Preferences
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *Preferences) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type Recipient struct {
	AudienceRecipient    *AudienceRecipient
	ListRecipient        *ListRecipient
	ListPatternRecipient *ListPatternRecipient
	UserRecipient        *UserRecipient
	SlackRecipient       *SlackRecipient
	MsTeamsRecipient     *MsTeamsRecipient
	RecipientData        RecipientData
	PagerdutyRecipient   *PagerdutyRecipient
	WebhookRecipient     *WebhookRecipient

	typ string
}

func (r *Recipient) GetAudienceRecipient() *AudienceRecipient {
	if r == nil {
		return nil
	}
	return r.AudienceRecipient
}

func (r *Recipient) GetListRecipient() *ListRecipient {
	if r == nil {
		return nil
	}
	return r.ListRecipient
}

func (r *Recipient) GetListPatternRecipient() *ListPatternRecipient {
	if r == nil {
		return nil
	}
	return r.ListPatternRecipient
}

func (r *Recipient) GetUserRecipient() *UserRecipient {
	if r == nil {
		return nil
	}
	return r.UserRecipient
}

func (r *Recipient) GetSlackRecipient() *SlackRecipient {
	if r == nil {
		return nil
	}
	return r.SlackRecipient
}

func (r *Recipient) GetMsTeamsRecipient() *MsTeamsRecipient {
	if r == nil {
		return nil
	}
	return r.MsTeamsRecipient
}

func (r *Recipient) GetRecipientData() RecipientData {
	if r == nil {
		return nil
	}
	return r.RecipientData
}

func (r *Recipient) GetPagerdutyRecipient() *PagerdutyRecipient {
	if r == nil {
		return nil
	}
	return r.PagerdutyRecipient
}

func (r *Recipient) GetWebhookRecipient() *WebhookRecipient {
	if r == nil {
		return nil
	}
	return r.WebhookRecipient
}

func (r *Recipient) UnmarshalJSON(data []byte) error {
	valueAudienceRecipient := new(AudienceRecipient)
	if err := json.Unmarshal(data, &valueAudienceRecipient); err == nil {
		r.typ = "AudienceRecipient"
		r.AudienceRecipient = valueAudienceRecipient
		return nil
	}
	valueListRecipient := new(ListRecipient)
	if err := json.Unmarshal(data, &valueListRecipient); err == nil {
		r.typ = "ListRecipient"
		r.ListRecipient = valueListRecipient
		return nil
	}
	valueListPatternRecipient := new(ListPatternRecipient)
	if err := json.Unmarshal(data, &valueListPatternRecipient); err == nil {
		r.typ = "ListPatternRecipient"
		r.ListPatternRecipient = valueListPatternRecipient
		return nil
	}
	valueUserRecipient := new(UserRecipient)
	if err := json.Unmarshal(data, &valueUserRecipient); err == nil {
		r.typ = "UserRecipient"
		r.UserRecipient = valueUserRecipient
		return nil
	}
	valueSlackRecipient := new(SlackRecipient)
	if err := json.Unmarshal(data, &valueSlackRecipient); err == nil {
		r.typ = "SlackRecipient"
		r.SlackRecipient = valueSlackRecipient
		return nil
	}
	valueMsTeamsRecipient := new(MsTeamsRecipient)
	if err := json.Unmarshal(data, &valueMsTeamsRecipient); err == nil {
		r.typ = "MsTeamsRecipient"
		r.MsTeamsRecipient = valueMsTeamsRecipient
		return nil
	}
	var valueRecipientData RecipientData
	if err := json.Unmarshal(data, &valueRecipientData); err == nil {
		r.typ = "RecipientData"
		r.RecipientData = valueRecipientData
		return nil
	}
	valuePagerdutyRecipient := new(PagerdutyRecipient)
	if err := json.Unmarshal(data, &valuePagerdutyRecipient); err == nil {
		r.typ = "PagerdutyRecipient"
		r.PagerdutyRecipient = valuePagerdutyRecipient
		return nil
	}
	valueWebhookRecipient := new(WebhookRecipient)
	if err := json.Unmarshal(data, &valueWebhookRecipient); err == nil {
		r.typ = "WebhookRecipient"
		r.WebhookRecipient = valueWebhookRecipient
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r Recipient) MarshalJSON() ([]byte, error) {
	if r.typ == "AudienceRecipient" || r.AudienceRecipient != nil {
		return json.Marshal(r.AudienceRecipient)
	}
	if r.typ == "ListRecipient" || r.ListRecipient != nil {
		return json.Marshal(r.ListRecipient)
	}
	if r.typ == "ListPatternRecipient" || r.ListPatternRecipient != nil {
		return json.Marshal(r.ListPatternRecipient)
	}
	if r.typ == "UserRecipient" || r.UserRecipient != nil {
		return json.Marshal(r.UserRecipient)
	}
	if r.typ == "SlackRecipient" || r.SlackRecipient != nil {
		return json.Marshal(r.SlackRecipient)
	}
	if r.typ == "MsTeamsRecipient" || r.MsTeamsRecipient != nil {
		return json.Marshal(r.MsTeamsRecipient)
	}
	if r.typ == "RecipientData" || r.RecipientData != nil {
		return json.Marshal(r.RecipientData)
	}
	if r.typ == "PagerdutyRecipient" || r.PagerdutyRecipient != nil {
		return json.Marshal(r.PagerdutyRecipient)
	}
	if r.typ == "WebhookRecipient" || r.WebhookRecipient != nil {
		return json.Marshal(r.WebhookRecipient)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RecipientVisitor interface {
	VisitAudienceRecipient(*AudienceRecipient) error
	VisitListRecipient(*ListRecipient) error
	VisitListPatternRecipient(*ListPatternRecipient) error
	VisitUserRecipient(*UserRecipient) error
	VisitSlackRecipient(*SlackRecipient) error
	VisitMsTeamsRecipient(*MsTeamsRecipient) error
	VisitRecipientData(RecipientData) error
	VisitPagerdutyRecipient(*PagerdutyRecipient) error
	VisitWebhookRecipient(*WebhookRecipient) error
}

func (r *Recipient) Accept(visitor RecipientVisitor) error {
	if r.typ == "AudienceRecipient" || r.AudienceRecipient != nil {
		return visitor.VisitAudienceRecipient(r.AudienceRecipient)
	}
	if r.typ == "ListRecipient" || r.ListRecipient != nil {
		return visitor.VisitListRecipient(r.ListRecipient)
	}
	if r.typ == "ListPatternRecipient" || r.ListPatternRecipient != nil {
		return visitor.VisitListPatternRecipient(r.ListPatternRecipient)
	}
	if r.typ == "UserRecipient" || r.UserRecipient != nil {
		return visitor.VisitUserRecipient(r.UserRecipient)
	}
	if r.typ == "SlackRecipient" || r.SlackRecipient != nil {
		return visitor.VisitSlackRecipient(r.SlackRecipient)
	}
	if r.typ == "MsTeamsRecipient" || r.MsTeamsRecipient != nil {
		return visitor.VisitMsTeamsRecipient(r.MsTeamsRecipient)
	}
	if r.typ == "RecipientData" || r.RecipientData != nil {
		return visitor.VisitRecipientData(r.RecipientData)
	}
	if r.typ == "PagerdutyRecipient" || r.PagerdutyRecipient != nil {
		return visitor.VisitPagerdutyRecipient(r.PagerdutyRecipient)
	}
	if r.typ == "WebhookRecipient" || r.WebhookRecipient != nil {
		return visitor.VisitWebhookRecipient(r.WebhookRecipient)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RecipientData = map[string]interface{}

// Allows you to customize which channel(s) Courier will potentially deliver the message.
// If no routing key is specified, Courier will use the default routing configuration or
// routing defined by the template.
var (
	routingFieldMethod   = big.NewInt(1 << 0)
	routingFieldChannels = big.NewInt(1 << 1)
)

type Routing struct {
	Method RoutingMethod `json:"method" url:"method"`
	// A list of channels or providers to send the message through. Can also recursively define
	// sub-routing methods, which can be useful for defining advanced push notification
	// delivery strategies.
	Channels []*MessageRoutingChannel `json:"channels" url:"channels"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *Routing) GetMethod() RoutingMethod {
	if r == nil {
		return ""
	}
	return r.Method
}

func (r *Routing) GetChannels() []*MessageRoutingChannel {
	if r == nil {
		return nil
	}
	return r.Channels
}

func (r *Routing) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *Routing) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetMethod sets the Method field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *Routing) SetMethod(method RoutingMethod) {
	r.Method = method
	r.require(routingFieldMethod)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *Routing) SetChannels(channels []*MessageRoutingChannel) {
	r.Channels = channels
	r.require(routingFieldChannels)
}

func (r *Routing) UnmarshalJSON(data []byte) error {
	type unmarshaler Routing
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Routing(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *Routing) MarshalJSON() ([]byte, error) {
	type embed Routing
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *Routing) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RoutingMethod string

const (
	RoutingMethodAll    RoutingMethod = "all"
	RoutingMethodSingle RoutingMethod = "single"
)

func NewRoutingMethodFromString(s string) (RoutingMethod, error) {
	switch s {
	case "all":
		return RoutingMethodAll, nil
	case "single":
		return RoutingMethodSingle, nil
	}
	var t RoutingMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RoutingMethod) Ptr() *RoutingMethod {
	return &r
}

type RuleType string

const (
	RuleTypeSnooze             RuleType = "snooze"
	RuleTypeChannelPreferences RuleType = "channel_preferences"
	RuleTypeStatus             RuleType = "status"
)

func NewRuleTypeFromString(s string) (RuleType, error) {
	switch s {
	case "snooze":
		return RuleTypeSnooze, nil
	case "channel_preferences":
		return RuleTypeChannelPreferences, nil
	case "status":
		return RuleTypeStatus, nil
	}
	var t RuleType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RuleType) Ptr() *RuleType {
	return &r
}

var (
	slackRecipientFieldSlack = big.NewInt(1 << 0)
)

type SlackRecipient struct {
	Slack *Slack `json:"slack" url:"slack"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SlackRecipient) GetSlack() *Slack {
	if s == nil {
		return nil
	}
	return s.Slack
}

func (s *SlackRecipient) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SlackRecipient) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetSlack sets the Slack field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SlackRecipient) SetSlack(slack *Slack) {
	s.Slack = slack
	s.require(slackRecipientFieldSlack)
}

func (s *SlackRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler SlackRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SlackRecipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlackRecipient) MarshalJSON() ([]byte, error) {
	type embed SlackRecipient
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SlackRecipient) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	templateMessageFieldData        = big.NewInt(1 << 0)
	templateMessageFieldBrandId     = big.NewInt(1 << 1)
	templateMessageFieldChannels    = big.NewInt(1 << 2)
	templateMessageFieldContext     = big.NewInt(1 << 3)
	templateMessageFieldMetadata    = big.NewInt(1 << 4)
	templateMessageFieldPreferences = big.NewInt(1 << 5)
	templateMessageFieldProviders   = big.NewInt(1 << 6)
	templateMessageFieldRouting     = big.NewInt(1 << 7)
	templateMessageFieldTimeout     = big.NewInt(1 << 8)
	templateMessageFieldDelay       = big.NewInt(1 << 9)
	templateMessageFieldExpiry      = big.NewInt(1 << 10)
	templateMessageFieldTo          = big.NewInt(1 << 11)
	templateMessageFieldTemplate    = big.NewInt(1 << 12)
)

type TemplateMessage struct {
	// An arbitrary object that includes any data you want to pass to the message.
	// The data will populate the corresponding template or elements variables.
	Data    *MessageData `json:"data,omitempty" url:"data,omitempty"`
	BrandId *string      `json:"brand_id,omitempty" url:"brand_id,omitempty"`
	// "Define run-time configuration for one or more channels. If you don't specify channels, the default configuration for each channel will be used. Valid ChannelId's are: email, sms, push, inbox, direct_message, banner, and webhook."
	Channels *MessageChannels `json:"channels,omitempty" url:"channels,omitempty"`
	// Context to load with this recipient. Will override any context set on message.context.
	Context *MessageContext `json:"context,omitempty" url:"context,omitempty"`
	// Metadata such as utm tracking attached with the notification through this channel.
	Metadata    *MessageMetadata    `json:"metadata,omitempty" url:"metadata,omitempty"`
	Preferences *MessagePreferences `json:"preferences,omitempty" url:"preferences,omitempty"`
	// An object whose keys are valid provider identifiers which map to an object.
	Providers *MessageProviders `json:"providers,omitempty" url:"providers,omitempty"`
	Routing   *Routing          `json:"routing,omitempty" url:"routing,omitempty"`
	// Time in ms to attempt the channel before failing over to the next available channel.
	Timeout *Timeout `json:"timeout,omitempty" url:"timeout,omitempty"`
	// Defines the time to wait before delivering the message. You can specify one of the following options. Duration with the number of milliseconds to delay. Until with an ISO 8601 timestamp that specifies when it should be delivered. Until with an OpenStreetMap opening_hours-like format that specifies the [Delivery Window](https://www.courier.com/docs/platform/sending/failover/#delivery-window) (e.g., 'Mo-Fr 08:00-18:00pm')
	Delay *Delay `json:"delay,omitempty" url:"delay,omitempty"`
	// "Expiry allows you to set an absolute or relative time in which a message expires.
	// Note: This is only valid for the Courier Inbox channel as of 12-08-2022."
	Expiry *Expiry `json:"expiry,omitempty" url:"expiry,omitempty"`
	// The recipient or a list of recipients of the message
	To *MessageRecipient `json:"to,omitempty" url:"to,omitempty"`
	// The id of the notification template to be rendered and sent to the recipient(s).
	// This field or the content field must be supplied.
	Template string `json:"template" url:"template"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateMessage) GetData() *MessageData {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *TemplateMessage) GetBrandId() *string {
	if t == nil {
		return nil
	}
	return t.BrandId
}

func (t *TemplateMessage) GetChannels() *MessageChannels {
	if t == nil {
		return nil
	}
	return t.Channels
}

func (t *TemplateMessage) GetContext() *MessageContext {
	if t == nil {
		return nil
	}
	return t.Context
}

func (t *TemplateMessage) GetMetadata() *MessageMetadata {
	if t == nil {
		return nil
	}
	return t.Metadata
}

func (t *TemplateMessage) GetPreferences() *MessagePreferences {
	if t == nil {
		return nil
	}
	return t.Preferences
}

func (t *TemplateMessage) GetProviders() *MessageProviders {
	if t == nil {
		return nil
	}
	return t.Providers
}

func (t *TemplateMessage) GetRouting() *Routing {
	if t == nil {
		return nil
	}
	return t.Routing
}

func (t *TemplateMessage) GetTimeout() *Timeout {
	if t == nil {
		return nil
	}
	return t.Timeout
}

func (t *TemplateMessage) GetDelay() *Delay {
	if t == nil {
		return nil
	}
	return t.Delay
}

func (t *TemplateMessage) GetExpiry() *Expiry {
	if t == nil {
		return nil
	}
	return t.Expiry
}

func (t *TemplateMessage) GetTo() *MessageRecipient {
	if t == nil {
		return nil
	}
	return t.To
}

func (t *TemplateMessage) GetTemplate() string {
	if t == nil {
		return ""
	}
	return t.Template
}

func (t *TemplateMessage) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateMessage) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateMessage) SetData(data *MessageData) {
	t.Data = data
	t.require(templateMessageFieldData)
}

// SetBrandId sets the BrandId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateMessage) SetBrandId(brandId *string) {
	t.BrandId = brandId
	t.require(templateMessageFieldBrandId)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateMessage) SetChannels(channels *MessageChannels) {
	t.Channels = channels
	t.require(templateMessageFieldChannels)
}

// SetContext sets the Context field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateMessage) SetContext(context *MessageContext) {
	t.Context = context
	t.require(templateMessageFieldContext)
}

// SetMetadata sets the Metadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateMessage) SetMetadata(metadata *MessageMetadata) {
	t.Metadata = metadata
	t.require(templateMessageFieldMetadata)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateMessage) SetPreferences(preferences *MessagePreferences) {
	t.Preferences = preferences
	t.require(templateMessageFieldPreferences)
}

// SetProviders sets the Providers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateMessage) SetProviders(providers *MessageProviders) {
	t.Providers = providers
	t.require(templateMessageFieldProviders)
}

// SetRouting sets the Routing field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateMessage) SetRouting(routing *Routing) {
	t.Routing = routing
	t.require(templateMessageFieldRouting)
}

// SetTimeout sets the Timeout field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateMessage) SetTimeout(timeout *Timeout) {
	t.Timeout = timeout
	t.require(templateMessageFieldTimeout)
}

// SetDelay sets the Delay field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateMessage) SetDelay(delay *Delay) {
	t.Delay = delay
	t.require(templateMessageFieldDelay)
}

// SetExpiry sets the Expiry field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateMessage) SetExpiry(expiry *Expiry) {
	t.Expiry = expiry
	t.require(templateMessageFieldExpiry)
}

// SetTo sets the To field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateMessage) SetTo(to *MessageRecipient) {
	t.To = to
	t.require(templateMessageFieldTo)
}

// SetTemplate sets the Template field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TemplateMessage) SetTemplate(template string) {
	t.Template = template
	t.require(templateMessageFieldTemplate)
}

func (t *TemplateMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateMessage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateMessage) MarshalJSON() ([]byte, error) {
	type embed TemplateMessage
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TemplateMessage) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TextAlign string

const (
	TextAlignLeft   TextAlign = "left"
	TextAlignCenter TextAlign = "center"
	TextAlignRight  TextAlign = "right"
)

func NewTextAlignFromString(s string) (TextAlign, error) {
	switch s {
	case "left":
		return TextAlignLeft, nil
	case "center":
		return TextAlignCenter, nil
	case "right":
		return TextAlignRight, nil
	}
	var t TextAlign
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TextAlign) Ptr() *TextAlign {
	return &t
}

type TextStyle string

const (
	TextStyleText    TextStyle = "text"
	TextStyleH1      TextStyle = "h1"
	TextStyleH2      TextStyle = "h2"
	TextStyleSubtext TextStyle = "subtext"
)

func NewTextStyleFromString(s string) (TextStyle, error) {
	switch s {
	case "text":
		return TextStyleText, nil
	case "h1":
		return TextStyleH1, nil
	case "h2":
		return TextStyleH2, nil
	case "subtext":
		return TextStyleSubtext, nil
	}
	var t TextStyle
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TextStyle) Ptr() *TextStyle {
	return &t
}

var (
	timeoutFieldProvider   = big.NewInt(1 << 0)
	timeoutFieldChannel    = big.NewInt(1 << 1)
	timeoutFieldMessage    = big.NewInt(1 << 2)
	timeoutFieldEscalation = big.NewInt(1 << 3)
	timeoutFieldCriteria   = big.NewInt(1 << 4)
)

type Timeout struct {
	Provider   map[string]int `json:"provider,omitempty" url:"provider,omitempty"`
	Channel    map[string]int `json:"channel,omitempty" url:"channel,omitempty"`
	Message    *int           `json:"message,omitempty" url:"message,omitempty"`
	Escalation *int           `json:"escalation,omitempty" url:"escalation,omitempty"`
	Criteria   *Criteria      `json:"criteria,omitempty" url:"criteria,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Timeout) GetProvider() map[string]int {
	if t == nil {
		return nil
	}
	return t.Provider
}

func (t *Timeout) GetChannel() map[string]int {
	if t == nil {
		return nil
	}
	return t.Channel
}

func (t *Timeout) GetMessage() *int {
	if t == nil {
		return nil
	}
	return t.Message
}

func (t *Timeout) GetEscalation() *int {
	if t == nil {
		return nil
	}
	return t.Escalation
}

func (t *Timeout) GetCriteria() *Criteria {
	if t == nil {
		return nil
	}
	return t.Criteria
}

func (t *Timeout) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Timeout) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetProvider sets the Provider field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Timeout) SetProvider(provider map[string]int) {
	t.Provider = provider
	t.require(timeoutFieldProvider)
}

// SetChannel sets the Channel field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Timeout) SetChannel(channel map[string]int) {
	t.Channel = channel
	t.require(timeoutFieldChannel)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Timeout) SetMessage(message *int) {
	t.Message = message
	t.require(timeoutFieldMessage)
}

// SetEscalation sets the Escalation field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Timeout) SetEscalation(escalation *int) {
	t.Escalation = escalation
	t.require(timeoutFieldEscalation)
}

// SetCriteria sets the Criteria field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Timeout) SetCriteria(criteria *Criteria) {
	t.Criteria = criteria
	t.require(timeoutFieldCriteria)
}

func (t *Timeout) UnmarshalJSON(data []byte) error {
	type unmarshaler Timeout
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Timeout(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Timeout) MarshalJSON() ([]byte, error) {
	type embed Timeout
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *Timeout) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	timeoutsFieldProvider = big.NewInt(1 << 0)
	timeoutsFieldChannel  = big.NewInt(1 << 1)
)

type Timeouts struct {
	Provider *int `json:"provider,omitempty" url:"provider,omitempty"`
	Channel  *int `json:"channel,omitempty" url:"channel,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Timeouts) GetProvider() *int {
	if t == nil {
		return nil
	}
	return t.Provider
}

func (t *Timeouts) GetChannel() *int {
	if t == nil {
		return nil
	}
	return t.Channel
}

func (t *Timeouts) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Timeouts) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetProvider sets the Provider field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Timeouts) SetProvider(provider *int) {
	t.Provider = provider
	t.require(timeoutsFieldProvider)
}

// SetChannel sets the Channel field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Timeouts) SetChannel(channel *int) {
	t.Channel = channel
	t.require(timeoutsFieldChannel)
}

func (t *Timeouts) UnmarshalJSON(data []byte) error {
	type unmarshaler Timeouts
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Timeouts(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Timeouts) MarshalJSON() ([]byte, error) {
	type embed Timeouts
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *Timeouts) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	trackingOverrideFieldOpen = big.NewInt(1 << 0)
)

type TrackingOverride struct {
	Open bool `json:"open" url:"open"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TrackingOverride) GetOpen() bool {
	if t == nil {
		return false
	}
	return t.Open
}

func (t *TrackingOverride) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TrackingOverride) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetOpen sets the Open field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TrackingOverride) SetOpen(open bool) {
	t.Open = open
	t.require(trackingOverrideFieldOpen)
}

func (t *TrackingOverride) UnmarshalJSON(data []byte) error {
	type unmarshaler TrackingOverride
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TrackingOverride(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TrackingOverride) MarshalJSON() ([]byte, error) {
	type embed TrackingOverride
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TrackingOverride) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	utmFieldSource   = big.NewInt(1 << 0)
	utmFieldMedium   = big.NewInt(1 << 1)
	utmFieldCampaign = big.NewInt(1 << 2)
	utmFieldTerm     = big.NewInt(1 << 3)
	utmFieldContent  = big.NewInt(1 << 4)
)

type Utm struct {
	Source   *string `json:"source,omitempty" url:"source,omitempty"`
	Medium   *string `json:"medium,omitempty" url:"medium,omitempty"`
	Campaign *string `json:"campaign,omitempty" url:"campaign,omitempty"`
	Term     *string `json:"term,omitempty" url:"term,omitempty"`
	Content  *string `json:"content,omitempty" url:"content,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *Utm) GetSource() *string {
	if u == nil {
		return nil
	}
	return u.Source
}

func (u *Utm) GetMedium() *string {
	if u == nil {
		return nil
	}
	return u.Medium
}

func (u *Utm) GetCampaign() *string {
	if u == nil {
		return nil
	}
	return u.Campaign
}

func (u *Utm) GetTerm() *string {
	if u == nil {
		return nil
	}
	return u.Term
}

func (u *Utm) GetContent() *string {
	if u == nil {
		return nil
	}
	return u.Content
}

func (u *Utm) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *Utm) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetSource sets the Source field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *Utm) SetSource(source *string) {
	u.Source = source
	u.require(utmFieldSource)
}

// SetMedium sets the Medium field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *Utm) SetMedium(medium *string) {
	u.Medium = medium
	u.require(utmFieldMedium)
}

// SetCampaign sets the Campaign field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *Utm) SetCampaign(campaign *string) {
	u.Campaign = campaign
	u.require(utmFieldCampaign)
}

// SetTerm sets the Term field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *Utm) SetTerm(term *string) {
	u.Term = term
	u.require(utmFieldTerm)
}

// SetContent sets the Content field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *Utm) SetContent(content *string) {
	u.Content = content
	u.require(utmFieldContent)
}

func (u *Utm) UnmarshalJSON(data []byte) error {
	type unmarshaler Utm
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = Utm(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *Utm) MarshalJSON() ([]byte, error) {
	type embed Utm
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *Utm) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

var (
	userRecipientFieldAccountId   = big.NewInt(1 << 0)
	userRecipientFieldContext     = big.NewInt(1 << 1)
	userRecipientFieldData        = big.NewInt(1 << 2)
	userRecipientFieldEmail       = big.NewInt(1 << 3)
	userRecipientFieldLocale      = big.NewInt(1 << 4)
	userRecipientFieldUserId      = big.NewInt(1 << 5)
	userRecipientFieldPhoneNumber = big.NewInt(1 << 6)
	userRecipientFieldPreferences = big.NewInt(1 << 7)
	userRecipientFieldTenantId    = big.NewInt(1 << 8)
)

type UserRecipient struct {
	// Use `tenant_id` instad.
	AccountId *string `json:"account_id,omitempty" url:"account_id,omitempty"`
	// Context information such as tenant_id to send the notification with.
	Context *MessageContext `json:"context,omitempty" url:"context,omitempty"`
	Data    *MessageData    `json:"data,omitempty" url:"data,omitempty"`
	Email   *string         `json:"email,omitempty" url:"email,omitempty"`
	// The user's preferred ISO 639-1 language code.
	Locale      *string              `json:"locale,omitempty" url:"locale,omitempty"`
	UserId      *string              `json:"user_id,omitempty" url:"user_id,omitempty"`
	PhoneNumber *string              `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	Preferences *IProfilePreferences `json:"preferences,omitempty" url:"preferences,omitempty"`
	// An id of a tenant, [see tenants api docs](https://www.courier.com/docs/reference/tenants).
	// Will load brand, default preferences and any other base context data associated with this tenant.
	TenantId *string `json:"tenant_id,omitempty" url:"tenant_id,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserRecipient) GetAccountId() *string {
	if u == nil {
		return nil
	}
	return u.AccountId
}

func (u *UserRecipient) GetContext() *MessageContext {
	if u == nil {
		return nil
	}
	return u.Context
}

func (u *UserRecipient) GetData() *MessageData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UserRecipient) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UserRecipient) GetLocale() *string {
	if u == nil {
		return nil
	}
	return u.Locale
}

func (u *UserRecipient) GetUserId() *string {
	if u == nil {
		return nil
	}
	return u.UserId
}

func (u *UserRecipient) GetPhoneNumber() *string {
	if u == nil {
		return nil
	}
	return u.PhoneNumber
}

func (u *UserRecipient) GetPreferences() *IProfilePreferences {
	if u == nil {
		return nil
	}
	return u.Preferences
}

func (u *UserRecipient) GetTenantId() *string {
	if u == nil {
		return nil
	}
	return u.TenantId
}

func (u *UserRecipient) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserRecipient) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetAccountId sets the AccountId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserRecipient) SetAccountId(accountId *string) {
	u.AccountId = accountId
	u.require(userRecipientFieldAccountId)
}

// SetContext sets the Context field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserRecipient) SetContext(context *MessageContext) {
	u.Context = context
	u.require(userRecipientFieldContext)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserRecipient) SetData(data *MessageData) {
	u.Data = data
	u.require(userRecipientFieldData)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserRecipient) SetEmail(email *string) {
	u.Email = email
	u.require(userRecipientFieldEmail)
}

// SetLocale sets the Locale field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserRecipient) SetLocale(locale *string) {
	u.Locale = locale
	u.require(userRecipientFieldLocale)
}

// SetUserId sets the UserId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserRecipient) SetUserId(userId *string) {
	u.UserId = userId
	u.require(userRecipientFieldUserId)
}

// SetPhoneNumber sets the PhoneNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserRecipient) SetPhoneNumber(phoneNumber *string) {
	u.PhoneNumber = phoneNumber
	u.require(userRecipientFieldPhoneNumber)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserRecipient) SetPreferences(preferences *IProfilePreferences) {
	u.Preferences = preferences
	u.require(userRecipientFieldPreferences)
}

// SetTenantId sets the TenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserRecipient) SetTenantId(tenantId *string) {
	u.TenantId = tenantId
	u.require(userRecipientFieldTenantId)
}

func (u *UserRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler UserRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserRecipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserRecipient) MarshalJSON() ([]byte, error) {
	type embed UserRecipient
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UserRecipient) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserRecipientType struct {

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserRecipientType) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserRecipientType) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

func (u *UserRecipientType) UnmarshalJSON(data []byte) error {
	type unmarshaler UserRecipientType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserRecipientType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserRecipientType) MarshalJSON() ([]byte, error) {
	type embed UserRecipientType
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UserRecipientType) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

var (
	webhookRecipientFieldWebhook = big.NewInt(1 << 0)
)

type WebhookRecipient struct {
	Webhook *WebhookProfile `json:"webhook" url:"webhook"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhookRecipient) GetWebhook() *WebhookProfile {
	if w == nil {
		return nil
	}
	return w.Webhook
}

func (w *WebhookRecipient) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhookRecipient) require(field *big.Int) {
	if w.explicitFields == nil {
		w.explicitFields = big.NewInt(0)
	}
	w.explicitFields.Or(w.explicitFields, field)
}

// SetWebhook sets the Webhook field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebhookRecipient) SetWebhook(webhook *WebhookProfile) {
	w.Webhook = webhook
	w.require(webhookRecipientFieldWebhook)
}

func (w *WebhookRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhookRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhookRecipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookRecipient) MarshalJSON() ([]byte, error) {
	type embed WebhookRecipient
	var marshaler = struct {
		embed
	}{
		embed: embed(*w),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, w.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (w *WebhookRecipient) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

var (
	widgetBackgroundFieldTopColor    = big.NewInt(1 << 0)
	widgetBackgroundFieldBottomColor = big.NewInt(1 << 1)
)

type WidgetBackground struct {
	TopColor    *string `json:"topColor,omitempty" url:"topColor,omitempty"`
	BottomColor *string `json:"bottomColor,omitempty" url:"bottomColor,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WidgetBackground) GetTopColor() *string {
	if w == nil {
		return nil
	}
	return w.TopColor
}

func (w *WidgetBackground) GetBottomColor() *string {
	if w == nil {
		return nil
	}
	return w.BottomColor
}

func (w *WidgetBackground) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WidgetBackground) require(field *big.Int) {
	if w.explicitFields == nil {
		w.explicitFields = big.NewInt(0)
	}
	w.explicitFields.Or(w.explicitFields, field)
}

// SetTopColor sets the TopColor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WidgetBackground) SetTopColor(topColor *string) {
	w.TopColor = topColor
	w.require(widgetBackgroundFieldTopColor)
}

// SetBottomColor sets the BottomColor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WidgetBackground) SetBottomColor(bottomColor *string) {
	w.BottomColor = bottomColor
	w.require(widgetBackgroundFieldBottomColor)
}

func (w *WidgetBackground) UnmarshalJSON(data []byte) error {
	type unmarshaler WidgetBackground
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WidgetBackground(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WidgetBackground) MarshalJSON() ([]byte, error) {
	type embed WidgetBackground
	var marshaler = struct {
		embed
	}{
		embed: embed(*w),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, w.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (w *WidgetBackground) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
