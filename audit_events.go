// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	listAuditEventsRequestFieldCursor = big.NewInt(1 << 0)
)

type ListAuditEventsRequest struct {
	// A unique identifier that allows for fetching the next set of audit events.
	Cursor *string `json:"-" url:"cursor,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (l *ListAuditEventsRequest) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListAuditEventsRequest) SetCursor(cursor *string) {
	l.Cursor = cursor
	l.require(listAuditEventsRequestFieldCursor)
}

var (
	actorFieldId    = big.NewInt(1 << 0)
	actorFieldEmail = big.NewInt(1 << 1)
)

type Actor struct {
	Id    *string `json:"id,omitempty" url:"id,omitempty"`
	Email *string `json:"email,omitempty" url:"email,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Actor) GetId() *string {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *Actor) GetEmail() *string {
	if a == nil {
		return nil
	}
	return a.Email
}

func (a *Actor) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Actor) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Actor) SetId(id *string) {
	a.Id = id
	a.require(actorFieldId)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Actor) SetEmail(email *string) {
	a.Email = email
	a.require(actorFieldEmail)
}

func (a *Actor) UnmarshalJSON(data []byte) error {
	type unmarshaler Actor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Actor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Actor) MarshalJSON() ([]byte, error) {
	type embed Actor
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *Actor) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	auditEventFieldActor        = big.NewInt(1 << 0)
	auditEventFieldTarget       = big.NewInt(1 << 1)
	auditEventFieldAuditEventId = big.NewInt(1 << 2)
	auditEventFieldSource       = big.NewInt(1 << 3)
	auditEventFieldTimestamp    = big.NewInt(1 << 4)
	auditEventFieldType         = big.NewInt(1 << 5)
)

type AuditEvent struct {
	Actor        *Actor  `json:"actor,omitempty" url:"actor,omitempty"`
	Target       *Target `json:"target,omitempty" url:"target,omitempty"`
	AuditEventId string  `json:"auditEventId" url:"auditEventId"`
	Source       string  `json:"source" url:"source"`
	Timestamp    string  `json:"timestamp" url:"timestamp"`
	Type         string  `json:"type" url:"type"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuditEvent) GetActor() *Actor {
	if a == nil {
		return nil
	}
	return a.Actor
}

func (a *AuditEvent) GetTarget() *Target {
	if a == nil {
		return nil
	}
	return a.Target
}

func (a *AuditEvent) GetAuditEventId() string {
	if a == nil {
		return ""
	}
	return a.AuditEventId
}

func (a *AuditEvent) GetSource() string {
	if a == nil {
		return ""
	}
	return a.Source
}

func (a *AuditEvent) GetTimestamp() string {
	if a == nil {
		return ""
	}
	return a.Timestamp
}

func (a *AuditEvent) GetType() string {
	if a == nil {
		return ""
	}
	return a.Type
}

func (a *AuditEvent) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuditEvent) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetActor sets the Actor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AuditEvent) SetActor(actor *Actor) {
	a.Actor = actor
	a.require(auditEventFieldActor)
}

// SetTarget sets the Target field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AuditEvent) SetTarget(target *Target) {
	a.Target = target
	a.require(auditEventFieldTarget)
}

// SetAuditEventId sets the AuditEventId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AuditEvent) SetAuditEventId(auditEventId string) {
	a.AuditEventId = auditEventId
	a.require(auditEventFieldAuditEventId)
}

// SetSource sets the Source field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AuditEvent) SetSource(source string) {
	a.Source = source
	a.require(auditEventFieldSource)
}

// SetTimestamp sets the Timestamp field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AuditEvent) SetTimestamp(timestamp string) {
	a.Timestamp = timestamp
	a.require(auditEventFieldTimestamp)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AuditEvent) SetType(type_ string) {
	a.Type = type_
	a.require(auditEventFieldType)
}

func (a *AuditEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler AuditEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuditEvent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuditEvent) MarshalJSON() ([]byte, error) {
	type embed AuditEvent
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AuditEvent) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	getAuditEventParamsFieldAuditEventId = big.NewInt(1 << 0)
)

type GetAuditEventParams struct {
	AuditEventId string `json:"auditEventId" url:"auditEventId"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetAuditEventParams) GetAuditEventId() string {
	if g == nil {
		return ""
	}
	return g.AuditEventId
}

func (g *GetAuditEventParams) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetAuditEventParams) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetAuditEventId sets the AuditEventId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetAuditEventParams) SetAuditEventId(auditEventId string) {
	g.AuditEventId = auditEventId
	g.require(getAuditEventParamsFieldAuditEventId)
}

func (g *GetAuditEventParams) UnmarshalJSON(data []byte) error {
	type unmarshaler GetAuditEventParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetAuditEventParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetAuditEventParams) MarshalJSON() ([]byte, error) {
	type embed GetAuditEventParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GetAuditEventParams) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

var (
	listAuditEventsParamsFieldCursor = big.NewInt(1 << 0)
)

type ListAuditEventsParams struct {
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListAuditEventsParams) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListAuditEventsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListAuditEventsParams) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListAuditEventsParams) SetCursor(cursor *string) {
	l.Cursor = cursor
	l.require(listAuditEventsParamsFieldCursor)
}

func (l *ListAuditEventsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListAuditEventsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListAuditEventsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListAuditEventsParams) MarshalJSON() ([]byte, error) {
	type embed ListAuditEventsParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListAuditEventsParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	listAuditEventsResponseFieldPaging  = big.NewInt(1 << 0)
	listAuditEventsResponseFieldResults = big.NewInt(1 << 1)
)

type ListAuditEventsResponse struct {
	Paging  *Paging       `json:"paging" url:"paging"`
	Results []*AuditEvent `json:"results" url:"results"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListAuditEventsResponse) GetPaging() *Paging {
	if l == nil {
		return nil
	}
	return l.Paging
}

func (l *ListAuditEventsResponse) GetResults() []*AuditEvent {
	if l == nil {
		return nil
	}
	return l.Results
}

func (l *ListAuditEventsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListAuditEventsResponse) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetPaging sets the Paging field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListAuditEventsResponse) SetPaging(paging *Paging) {
	l.Paging = paging
	l.require(listAuditEventsResponseFieldPaging)
}

// SetResults sets the Results field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListAuditEventsResponse) SetResults(results []*AuditEvent) {
	l.Results = results
	l.require(listAuditEventsResponseFieldResults)
}

func (l *ListAuditEventsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListAuditEventsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListAuditEventsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListAuditEventsResponse) MarshalJSON() ([]byte, error) {
	type embed ListAuditEventsResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListAuditEventsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	targetFieldId    = big.NewInt(1 << 0)
	targetFieldEmail = big.NewInt(1 << 1)
)

type Target struct {
	Id    *string `json:"id,omitempty" url:"id,omitempty"`
	Email *string `json:"email,omitempty" url:"email,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Target) GetId() *string {
	if t == nil {
		return nil
	}
	return t.Id
}

func (t *Target) GetEmail() *string {
	if t == nil {
		return nil
	}
	return t.Email
}

func (t *Target) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Target) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Target) SetId(id *string) {
	t.Id = id
	t.require(targetFieldId)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Target) SetEmail(email *string) {
	t.Email = email
	t.require(targetFieldEmail)
}

func (t *Target) UnmarshalJSON(data []byte) error {
	type unmarshaler Target
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Target(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Target) MarshalJSON() ([]byte, error) {
	type embed Target
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *Target) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
