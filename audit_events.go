// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/trycourier/courier-go/v3/core"
)

type ListAuditEventsRequest struct {
	// A unique identifier that allows for fetching the next set of audit events.
	Cursor *string `json:"-" url:"cursor,omitempty"`
}

type Actor struct {
	Id    *string `json:"id,omitempty" url:"id,omitempty"`
	Email *string `json:"email,omitempty" url:"email,omitempty"`

	_rawJSON json.RawMessage
}

func (a *Actor) UnmarshalJSON(data []byte) error {
	type unmarshaler Actor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Actor(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *Actor) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AuditEvent struct {
	Actor        *Actor  `json:"actor,omitempty" url:"actor,omitempty"`
	Target       *Target `json:"target,omitempty" url:"target,omitempty"`
	AuditEventId string  `json:"auditEventId" url:"auditEventId"`
	Source       string  `json:"source" url:"source"`
	Timestamp    string  `json:"timestamp" url:"timestamp"`
	Type         string  `json:"type" url:"type"`

	_rawJSON json.RawMessage
}

func (a *AuditEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler AuditEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuditEvent(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuditEvent) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ListAuditEventsResponse struct {
	Paging  *Paging       `json:"paging,omitempty" url:"paging,omitempty"`
	Results []*AuditEvent `json:"results,omitempty" url:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListAuditEventsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListAuditEventsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListAuditEventsResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListAuditEventsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type Target struct {
	Id    *string `json:"id,omitempty" url:"id,omitempty"`
	Email *string `json:"email,omitempty" url:"email,omitempty"`

	_rawJSON json.RawMessage
}

func (t *Target) UnmarshalJSON(data []byte) error {
	type unmarshaler Target
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Target(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *Target) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
