// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	sendMessageRequestFieldMessage = big.NewInt(1 << 0)
)

type SendMessageRequest struct {
	// Defines the message to be delivered
	Message *Message `json:"message,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (s *SendMessageRequest) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendMessageRequest) SetMessage(message *Message) {
	s.Message = message
	s.require(sendMessageRequestFieldMessage)
}

var (
	sendMessageResponseFieldRequestId = big.NewInt(1 << 0)
)

type SendMessageResponse struct {
	// A successful call to `POST /send` returns a `202` status code along with a `requestId` in the response body.
	//
	// For send requests that have a single recipient, the `requestId` is assigned to the derived message as its message_id. Therefore the `requestId` can be supplied to the Message's API for single recipient messages.
	//
	// For send requests that have multiple recipients (accounts, audiences, lists, etc.), Courier assigns a unique id to each derived message as its `message_id`. Therefore the `requestId` cannot be supplied to the Message's API for single-recipient messages.
	RequestId string `json:"requestId" url:"requestId"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SendMessageResponse) GetRequestId() string {
	if s == nil {
		return ""
	}
	return s.RequestId
}

func (s *SendMessageResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SendMessageResponse) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetRequestId sets the RequestId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendMessageResponse) SetRequestId(requestId string) {
	s.RequestId = requestId
	s.require(sendMessageResponseFieldRequestId)
}

func (s *SendMessageResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SendMessageResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SendMessageResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SendMessageResponse) MarshalJSON() ([]byte, error) {
	type embed SendMessageResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SendMessageResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
