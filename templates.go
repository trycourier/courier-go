// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	listTemplatesRequestFieldCursor = big.NewInt(1 << 0)
)

type ListTemplatesRequest struct {
	// A unique identifier that allows for fetching the next set of templates
	Cursor *string `json:"-" url:"cursor,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (l *ListTemplatesRequest) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplatesRequest) SetCursor(cursor *string) {
	l.Cursor = cursor
	l.require(listTemplatesRequestFieldCursor)
}

type ChannelIdentifier = string

var (
	listTemplatesResponseFieldPaging  = big.NewInt(1 << 0)
	listTemplatesResponseFieldResults = big.NewInt(1 << 1)
)

type ListTemplatesResponse struct {
	Paging *Paging `json:"paging" url:"paging"`
	// An array of Notification Templates
	Results []*NotificationTemplates `json:"results" url:"results"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListTemplatesResponse) GetPaging() *Paging {
	if l == nil {
		return nil
	}
	return l.Paging
}

func (l *ListTemplatesResponse) GetResults() []*NotificationTemplates {
	if l == nil {
		return nil
	}
	return l.Results
}

func (l *ListTemplatesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListTemplatesResponse) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetPaging sets the Paging field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplatesResponse) SetPaging(paging *Paging) {
	l.Paging = paging
	l.require(listTemplatesResponseFieldPaging)
}

// SetResults sets the Results field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTemplatesResponse) SetResults(results []*NotificationTemplates) {
	l.Results = results
	l.require(listTemplatesResponseFieldResults)
}

func (l *ListTemplatesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListTemplatesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListTemplatesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListTemplatesResponse) MarshalJSON() ([]byte, error) {
	type embed ListTemplatesResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListTemplatesResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	notificationTemplatesFieldCreatedAt = big.NewInt(1 << 0)
	notificationTemplatesFieldId        = big.NewInt(1 << 1)
	notificationTemplatesFieldRouting   = big.NewInt(1 << 2)
	notificationTemplatesFieldTags      = big.NewInt(1 << 3)
	notificationTemplatesFieldTitle     = big.NewInt(1 << 4)
	notificationTemplatesFieldUpdatedAt = big.NewInt(1 << 5)
)

type NotificationTemplates struct {
	// A UTC timestamp at which notification was created. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970).
	CreatedAt int64 `json:"created_at" url:"created_at"`
	// A unique identifier associated with the notification.
	Id string `json:"id" url:"id"`
	// Routing strategy used by this notification.
	Routing *RoutingStrategy `json:"routing" url:"routing"`
	// A list of tags attached to the notification.
	Tags []*Tag `json:"tags" url:"tags"`
	// The title of the notification.
	Title string `json:"title" url:"title"`
	// A UTC timestamp at which notification was updated. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970).
	UpdatedAt int64 `json:"updated_at" url:"updated_at"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationTemplates) GetCreatedAt() int64 {
	if n == nil {
		return 0
	}
	return n.CreatedAt
}

func (n *NotificationTemplates) GetId() string {
	if n == nil {
		return ""
	}
	return n.Id
}

func (n *NotificationTemplates) GetRouting() *RoutingStrategy {
	if n == nil {
		return nil
	}
	return n.Routing
}

func (n *NotificationTemplates) GetTags() []*Tag {
	if n == nil {
		return nil
	}
	return n.Tags
}

func (n *NotificationTemplates) GetTitle() string {
	if n == nil {
		return ""
	}
	return n.Title
}

func (n *NotificationTemplates) GetUpdatedAt() int64 {
	if n == nil {
		return 0
	}
	return n.UpdatedAt
}

func (n *NotificationTemplates) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationTemplates) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationTemplates) SetCreatedAt(createdAt int64) {
	n.CreatedAt = createdAt
	n.require(notificationTemplatesFieldCreatedAt)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationTemplates) SetId(id string) {
	n.Id = id
	n.require(notificationTemplatesFieldId)
}

// SetRouting sets the Routing field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationTemplates) SetRouting(routing *RoutingStrategy) {
	n.Routing = routing
	n.require(notificationTemplatesFieldRouting)
}

// SetTags sets the Tags field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationTemplates) SetTags(tags []*Tag) {
	n.Tags = tags
	n.require(notificationTemplatesFieldTags)
}

// SetTitle sets the Title field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationTemplates) SetTitle(title string) {
	n.Title = title
	n.require(notificationTemplatesFieldTitle)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationTemplates) SetUpdatedAt(updatedAt int64) {
	n.UpdatedAt = updatedAt
	n.require(notificationTemplatesFieldUpdatedAt)
}

func (n *NotificationTemplates) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationTemplates
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationTemplates(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationTemplates) MarshalJSON() ([]byte, error) {
	type embed NotificationTemplates
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NotificationTemplates) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

var (
	routingStrategyFieldMethod   = big.NewInt(1 << 0)
	routingStrategyFieldChannels = big.NewInt(1 << 1)
)

type RoutingStrategy struct {
	// The method for selecting channels to send the message with. Value can be either 'single' or 'all'. If not provided will default to 'single'
	Method RoutingStrategyMethod `json:"method" url:"method"`
	// An array of valid channel identifiers (like email, push, sms, etc.) and additional routing nodes.
	Channels []ChannelIdentifier `json:"channels" url:"channels"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RoutingStrategy) GetMethod() RoutingStrategyMethod {
	if r == nil {
		return ""
	}
	return r.Method
}

func (r *RoutingStrategy) GetChannels() []ChannelIdentifier {
	if r == nil {
		return nil
	}
	return r.Channels
}

func (r *RoutingStrategy) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RoutingStrategy) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetMethod sets the Method field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RoutingStrategy) SetMethod(method RoutingStrategyMethod) {
	r.Method = method
	r.require(routingStrategyFieldMethod)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RoutingStrategy) SetChannels(channels []ChannelIdentifier) {
	r.Channels = channels
	r.require(routingStrategyFieldChannels)
}

func (r *RoutingStrategy) UnmarshalJSON(data []byte) error {
	type unmarshaler RoutingStrategy
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RoutingStrategy(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RoutingStrategy) MarshalJSON() ([]byte, error) {
	type embed RoutingStrategy
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *RoutingStrategy) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RoutingStrategyMethod string

const (
	RoutingStrategyMethodAll    RoutingStrategyMethod = "all"
	RoutingStrategyMethodSingle RoutingStrategyMethod = "single"
)

func NewRoutingStrategyMethodFromString(s string) (RoutingStrategyMethod, error) {
	switch s {
	case "all":
		return RoutingStrategyMethodAll, nil
	case "single":
		return RoutingStrategyMethodSingle, nil
	}
	var t RoutingStrategyMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RoutingStrategyMethod) Ptr() *RoutingStrategyMethod {
	return &r
}

var (
	tagFieldData = big.NewInt(1 << 0)
)

type Tag struct {
	Data []*TagData `json:"data" url:"data"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Tag) GetData() []*TagData {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *Tag) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Tag) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Tag) SetData(data []*TagData) {
	t.Data = data
	t.require(tagFieldData)
}

func (t *Tag) UnmarshalJSON(data []byte) error {
	type unmarshaler Tag
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Tag(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Tag) MarshalJSON() ([]byte, error) {
	type embed Tag
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *Tag) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	tagDataFieldId   = big.NewInt(1 << 0)
	tagDataFieldName = big.NewInt(1 << 1)
)

type TagData struct {
	// A unique identifier of the tag.
	Id string `json:"id" url:"id"`
	// Name of the tag.
	Name string `json:"name" url:"name"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TagData) GetId() string {
	if t == nil {
		return ""
	}
	return t.Id
}

func (t *TagData) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *TagData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TagData) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TagData) SetId(id string) {
	t.Id = id
	t.require(tagDataFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TagData) SetName(name string) {
	t.Name = name
	t.require(tagDataFieldName)
}

func (t *TagData) UnmarshalJSON(data []byte) error {
	type unmarshaler TagData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TagData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TagData) MarshalJSON() ([]byte, error) {
	type embed TagData
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TagData) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
