// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	inboundTrackEventFieldEvent      = big.NewInt(1 << 0)
	inboundTrackEventFieldMessageId  = big.NewInt(1 << 1)
	inboundTrackEventFieldProperties = big.NewInt(1 << 2)
	inboundTrackEventFieldUserId     = big.NewInt(1 << 3)
)

type InboundTrackEvent struct {
	// A descriptive name of the event. This name will appear as a trigger in the Courier Automation Trigger node.
	Event string `json:"event" url:"event"`
	// A required unique identifier that will be used to de-duplicate requests. If not unique, will respond with 409 Conflict status
	MessageId  string                 `json:"messageId" url:"messageId"`
	Properties map[string]interface{} `json:"properties" url:"properties"`
	// The user id assocatiated with the track
	UserId *string `json:"userId,omitempty" url:"userId,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InboundTrackEvent) GetEvent() string {
	if i == nil {
		return ""
	}
	return i.Event
}

func (i *InboundTrackEvent) GetMessageId() string {
	if i == nil {
		return ""
	}
	return i.MessageId
}

func (i *InboundTrackEvent) GetProperties() map[string]interface{} {
	if i == nil {
		return nil
	}
	return i.Properties
}

func (i *InboundTrackEvent) GetUserId() *string {
	if i == nil {
		return nil
	}
	return i.UserId
}

func (i *InboundTrackEvent) Type() string {
	return i.type_
}

func (i *InboundTrackEvent) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InboundTrackEvent) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetEvent sets the Event field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundTrackEvent) SetEvent(event string) {
	i.Event = event
	i.require(inboundTrackEventFieldEvent)
}

// SetMessageId sets the MessageId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundTrackEvent) SetMessageId(messageId string) {
	i.MessageId = messageId
	i.require(inboundTrackEventFieldMessageId)
}

// SetProperties sets the Properties field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundTrackEvent) SetProperties(properties map[string]interface{}) {
	i.Properties = properties
	i.require(inboundTrackEventFieldProperties)
}

// SetUserId sets the UserId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundTrackEvent) SetUserId(userId *string) {
	i.UserId = userId
	i.require(inboundTrackEventFieldUserId)
}

func (i *InboundTrackEvent) UnmarshalJSON(data []byte) error {
	type embed InboundTrackEvent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = InboundTrackEvent(unmarshaler.embed)
	if unmarshaler.Type != "track" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "track", unmarshaler.Type)
	}
	i.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *i, "type")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InboundTrackEvent) MarshalJSON() ([]byte, error) {
	type embed InboundTrackEvent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
		Type:  "track",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InboundTrackEvent) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

var (
	trackAcceptedResponseFieldMessageId = big.NewInt(1 << 0)
)

type TrackAcceptedResponse struct {
	// A successful call returns a `202` status code along with a `requestId` in the response body.
	MessageId string `json:"messageId" url:"messageId"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TrackAcceptedResponse) GetMessageId() string {
	if t == nil {
		return ""
	}
	return t.MessageId
}

func (t *TrackAcceptedResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TrackAcceptedResponse) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetMessageId sets the MessageId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TrackAcceptedResponse) SetMessageId(messageId string) {
	t.MessageId = messageId
	t.require(trackAcceptedResponseFieldMessageId)
}

func (t *TrackAcceptedResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TrackAcceptedResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TrackAcceptedResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TrackAcceptedResponse) MarshalJSON() ([]byte, error) {
	type embed TrackAcceptedResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TrackAcceptedResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
