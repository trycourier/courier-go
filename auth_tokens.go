// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	issueTokenParamsFieldScope     = big.NewInt(1 << 0)
	issueTokenParamsFieldExpiresIn = big.NewInt(1 << 1)
)

type IssueTokenParams struct {
	Scope     string `json:"scope" url:"-"`
	ExpiresIn string `json:"expires_in" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (i *IssueTokenParams) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetScope sets the Scope field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *IssueTokenParams) SetScope(scope string) {
	i.Scope = scope
	i.require(issueTokenParamsFieldScope)
}

// SetExpiresIn sets the ExpiresIn field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *IssueTokenParams) SetExpiresIn(expiresIn string) {
	i.ExpiresIn = expiresIn
	i.require(issueTokenParamsFieldExpiresIn)
}

var (
	issueTokenResponseFieldToken = big.NewInt(1 << 0)
)

type IssueTokenResponse struct {
	Token *string `json:"token,omitempty" url:"token,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IssueTokenResponse) GetToken() *string {
	if i == nil {
		return nil
	}
	return i.Token
}

func (i *IssueTokenResponse) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IssueTokenResponse) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetToken sets the Token field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *IssueTokenResponse) SetToken(token *string) {
	i.Token = token
	i.require(issueTokenResponseFieldToken)
}

func (i *IssueTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler IssueTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IssueTokenResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IssueTokenResponse) MarshalJSON() ([]byte, error) {
	type embed IssueTokenResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *IssueTokenResponse) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}
