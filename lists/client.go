// Code generated by Fern. DO NOT EDIT.

package lists

import (
	context "context"
	v3 "github.com/trycourier/courier-go/v3"
	core "github.com/trycourier/courier-go/v3/core"
	internal "github.com/trycourier/courier-go/v3/internal"
	option "github.com/trycourier/courier-go/v3/option"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	if options.AuthorizationToken == "" {
		options.AuthorizationToken = os.Getenv("COURIER_AUTH_TOKEN")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Returns all of the lists, with the ability to filter based on a pattern.
func (c *Client) List(
	ctx context.Context,
	request *v3.GetAllListsRequest,
	opts ...option.RequestOption,
) (*v3.ListGetAllResponse, error) {
	response, err := c.WithRawResponse.List(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns a list based on the list ID provided.
func (c *Client) Get(
	ctx context.Context,
	// A unique identifier representing the list you wish to retrieve.
	listId string,
	opts ...option.RequestOption,
) (*v3.List, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		listId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Create or replace an existing list with the supplied values.
func (c *Client) Update(
	ctx context.Context,
	// A unique identifier representing the list you wish to retrieve.
	listId string,
	request *v3.ListPutParams,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Update(
		ctx,
		listId,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Delete a list by list ID.
func (c *Client) Delete(
	ctx context.Context,
	// A unique identifier representing the list you wish to retrieve.
	listId string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Delete(
		ctx,
		listId,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Restore a previously deleted list.
func (c *Client) Restore(
	ctx context.Context,
	// A unique identifier representing the list you wish to retrieve.
	listId string,
	request *v3.RestoreListRequest,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Restore(
		ctx,
		listId,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Get the list's subscriptions.
func (c *Client) GetSubscribers(
	ctx context.Context,
	// A unique identifier representing the list you wish to retrieve.
	listId string,
	request *v3.GetSubscriptionForListRequest,
	opts ...option.RequestOption,
) (*v3.ListGetSubscriptionsResponse, error) {
	response, err := c.WithRawResponse.GetSubscribers(
		ctx,
		listId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Subscribes the users to the list, overwriting existing subscriptions. If the list does not exist, it will be automatically created.
func (c *Client) UpdateSubscribers(
	ctx context.Context,
	// A unique identifier representing the list you wish to retrieve.
	listId string,
	request *v3.SubscribeUsersToListRequest,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.UpdateSubscribers(
		ctx,
		listId,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Subscribes additional users to the list, without modifying existing subscriptions. If the list does not exist, it will be automatically created.
func (c *Client) AddSubscribers(
	ctx context.Context,
	// A unique identifier representing the list you wish to retrieve.
	listId string,
	request *v3.AddSubscribersToList,
	opts ...option.IdempotentRequestOption,
) error {
	_, err := c.WithRawResponse.AddSubscribers(
		ctx,
		listId,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Subscribe a user to an existing list (note: if the List does not exist, it will be automatically created).
func (c *Client) Subscribe(
	ctx context.Context,
	// A unique identifier representing the list you wish to retrieve.
	listId string,
	// A unique identifier representing the recipient associated with the list
	userId string,
	request *v3.SubscribeUserToListRequest,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Subscribe(
		ctx,
		listId,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Delete a subscription to a list by list ID and user ID.
func (c *Client) Unsubscribe(
	ctx context.Context,
	// A unique identifier representing the list you wish to retrieve.
	listId string,
	// A unique identifier representing the recipient associated with the list
	userId string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Unsubscribe(
		ctx,
		listId,
		userId,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}
