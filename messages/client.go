// This file was auto-generated by Fern from our API Definition.

package messages

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	v3 "github.com/trycourier/courier-go/v3"
	core "github.com/trycourier/courier-go/v3/core"
	io "io"
	http "net/http"
	url "net/url"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL: options.BaseURL,
		caller:  core.NewCaller(options.HTTPClient),
		header:  options.ToHeader(),
	}
}

// Fetch the statuses of messages you've previously sent.
func (c *Client) List(ctx context.Context, request *v3.ListMessagesRequest) (*v3.ListMessagesResponse, error) {
	baseURL := "https://api.courier.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "messages"

	queryParams := make(url.Values)
	if request.Archived != nil {
		queryParams.Add("archived", fmt.Sprintf("%v", *request.Archived))
	}
	if request.Cursor != nil {
		queryParams.Add("cursor", fmt.Sprintf("%v", *request.Cursor))
	}
	if request.Event != nil {
		queryParams.Add("event", fmt.Sprintf("%v", *request.Event))
	}
	if request.List != nil {
		queryParams.Add("list", fmt.Sprintf("%v", *request.List))
	}
	if request.MessageId != nil {
		queryParams.Add("messageId", fmt.Sprintf("%v", *request.MessageId))
	}
	if request.Notification != nil {
		queryParams.Add("notification", fmt.Sprintf("%v", *request.Notification))
	}
	if request.Recipient != nil {
		queryParams.Add("recipient", fmt.Sprintf("%v", *request.Recipient))
	}
	for _, value := range request.Status {
		queryParams.Add("status", fmt.Sprintf("%v", *value))
	}
	if request.Tags != nil {
		queryParams.Add("tags", fmt.Sprintf("%v", *request.Tags))
	}
	if request.EnqueuedAfter != nil {
		queryParams.Add("enqueued_after", fmt.Sprintf("%v", *request.EnqueuedAfter))
	}
	if request.TraceId != nil {
		queryParams.Add("traceId", fmt.Sprintf("%v", *request.TraceId))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *v3.ListMessagesResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Fetch the status of a message you've previously sent.
//
// A unique identifier associated with the message you wish to retrieve (results from a send).
func (c *Client) Get(ctx context.Context, messageId string) (*v3.MessageDetails, error) {
	baseURL := "https://api.courier.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"messages/%v", messageId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(v3.BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		case 404:
			value := new(v3.MessageNotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *v3.MessageDetails
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodGet,
			Headers:      c.header,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Cancel a message that is currently in the process of being delivered. A well-formatted API call to the cancel message API will return either `200` status code for a successful cancellation or `409` status code for an unsuccessful cancellation. Both cases will include the actual message record in the response body (see details below).
//
// A unique identifier representing the message ID
func (c *Client) Cancel(ctx context.Context, messageId string) (*v3.MessageDetails, error) {
	baseURL := "https://api.courier.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"messages/%v/cancel", messageId)

	var response *v3.MessageDetails
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodPost,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Fetch the array of events of a message you've previously sent.
//
// A unique identifier representing the message ID
func (c *Client) GetHistory(ctx context.Context, messageId string, request *v3.GetMessageHistoryRequest) (*v3.MessageHistoryResponse, error) {
	baseURL := "https://api.courier.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"messages/%v/history", messageId)

	queryParams := make(url.Values)
	if request.Type != nil {
		queryParams.Add("type", fmt.Sprintf("%v", *request.Type))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(v3.BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		case 404:
			value := new(v3.MessageNotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *v3.MessageHistoryResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodGet,
			Headers:      c.header,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// A unique identifier associated with the message you wish to retrieve (results from a send).
func (c *Client) GetContent(ctx context.Context, messageId string) (*v3.RenderOutputResponse, error) {
	baseURL := "https://api.courier.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"messages/%v/output", messageId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(v3.BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		case 404:
			value := new(v3.MessageNotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *v3.RenderOutputResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodGet,
			Headers:      c.header,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// A unique identifier representing the request ID
func (c *Client) Archive(ctx context.Context, requestId string) error {
	baseURL := "https://api.courier.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"requests/%v/archive", requestId)

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:     endpointURL,
			Method:  http.MethodPut,
			Headers: c.header,
		},
	); err != nil {
		return err
	}
	return nil
}
