// Code generated by Fern. DO NOT EDIT.

package messages

import (
	context "context"
	v3 "github.com/trycourier/courier-go/v3"
	core "github.com/trycourier/courier-go/v3/core"
	internal "github.com/trycourier/courier-go/v3/internal"
	option "github.com/trycourier/courier-go/v3/option"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	if options.AuthorizationToken == "" {
		options.AuthorizationToken = os.Getenv("COURIER_AUTH_TOKEN")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Fetch the statuses of messages you've previously sent.
func (c *Client) List(
	ctx context.Context,
	request *v3.ListMessagesRequest,
	opts ...option.RequestOption,
) (*v3.ListMessagesResponse, error) {
	response, err := c.WithRawResponse.List(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Fetch the status of a message you've previously sent.
func (c *Client) Get(
	ctx context.Context,
	// A unique identifier associated with the message you wish to retrieve (results from a send).
	messageId string,
	opts ...option.RequestOption,
) (*v3.MessageDetailsExtended, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		messageId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Cancel a message that is currently in the process of being delivered. A well-formatted API call to the cancel message API will return either `200` status code for a successful cancellation or `409` status code for an unsuccessful cancellation. Both cases will include the actual message record in the response body (see details below).
func (c *Client) Cancel(
	ctx context.Context,
	// A unique identifier representing the message ID
	messageId string,
	opts ...option.IdempotentRequestOption,
) (*v3.MessageDetails, error) {
	response, err := c.WithRawResponse.Cancel(
		ctx,
		messageId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Fetch the array of events of a message you've previously sent.
func (c *Client) GetHistory(
	ctx context.Context,
	// A unique identifier representing the message ID
	messageId string,
	request *v3.GetMessageHistoryRequest,
	opts ...option.RequestOption,
) (*v3.MessageHistoryResponse, error) {
	response, err := c.WithRawResponse.GetHistory(
		ctx,
		messageId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetContent(
	ctx context.Context,
	// A unique identifier associated with the message you wish to retrieve (results from a send).
	messageId string,
	opts ...option.RequestOption,
) (*v3.RenderOutputResponse, error) {
	response, err := c.WithRawResponse.GetContent(
		ctx,
		messageId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Archive(
	ctx context.Context,
	// A unique identifier representing the request ID
	requestId string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Archive(
		ctx,
		requestId,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}
