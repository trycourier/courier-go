// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	core "github.com/trycourier/courier-go/v3/core"
)

type AlreadyExistsError struct {
	*core.APIError
	Body *AlreadyExists
}

func (a *AlreadyExistsError) UnmarshalJSON(data []byte) error {
	var body *AlreadyExists
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	a.StatusCode = 409
	a.Body = body
	return nil
}

func (a *AlreadyExistsError) MarshalJSON() ([]byte, error) {
	return json.Marshal(a.Body)
}

func (a *AlreadyExistsError) Unwrap() error {
	return a.APIError
}

type BadRequestError struct {
	*core.APIError
	Body *BadRequest
}

func (b *BadRequestError) UnmarshalJSON(data []byte) error {
	var body *BadRequest
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	b.StatusCode = 400
	b.Body = body
	return nil
}

func (b *BadRequestError) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.Body)
}

func (b *BadRequestError) Unwrap() error {
	return b.APIError
}

type ConflictError struct {
	*core.APIError
	Body *Conflict
}

func (c *ConflictError) UnmarshalJSON(data []byte) error {
	var body *Conflict
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	c.StatusCode = 409
	c.Body = body
	return nil
}

func (c *ConflictError) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.Body)
}

func (c *ConflictError) Unwrap() error {
	return c.APIError
}

type MessageNotFoundError struct {
	*core.APIError
	Body *MessageNotFound
}

func (m *MessageNotFoundError) UnmarshalJSON(data []byte) error {
	var body *MessageNotFound
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	m.StatusCode = 404
	m.Body = body
	return nil
}

func (m *MessageNotFoundError) MarshalJSON() ([]byte, error) {
	return json.Marshal(m.Body)
}

func (m *MessageNotFoundError) Unwrap() error {
	return m.APIError
}

type NotFoundError struct {
	*core.APIError
	Body *NotFound
}

func (n *NotFoundError) UnmarshalJSON(data []byte) error {
	var body *NotFound
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	n.StatusCode = 404
	n.Body = body
	return nil
}

func (n *NotFoundError) MarshalJSON() ([]byte, error) {
	return json.Marshal(n.Body)
}

func (n *NotFoundError) Unwrap() error {
	return n.APIError
}

type PaymentRequiredError struct {
	*core.APIError
	Body *PaymentRequired
}

func (p *PaymentRequiredError) UnmarshalJSON(data []byte) error {
	var body *PaymentRequired
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	p.StatusCode = 402
	p.Body = body
	return nil
}

func (p *PaymentRequiredError) MarshalJSON() ([]byte, error) {
	return json.Marshal(p.Body)
}

func (p *PaymentRequiredError) Unwrap() error {
	return p.APIError
}
