// Code generated by Fern. DO NOT EDIT.

package notifications

import (
	context "context"
	v3 "github.com/trycourier/courier-go/v3"
	core "github.com/trycourier/courier-go/v3/core"
	internal "github.com/trycourier/courier-go/v3/internal"
	option "github.com/trycourier/courier-go/v3/option"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	if options.AuthorizationToken == "" {
		options.AuthorizationToken = os.Getenv("COURIER_AUTH_TOKEN")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

func (c *Client) List(
	ctx context.Context,
	request *v3.NotificationListParams,
	opts ...option.RequestOption,
) (*v3.NotificationListResponse, error) {
	response, err := c.WithRawResponse.List(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetContent(
	ctx context.Context,
	id string,
	opts ...option.RequestOption,
) (*v3.NotificationGetContentResponse, error) {
	response, err := c.WithRawResponse.GetContent(
		ctx,
		id,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetDraftContent(
	ctx context.Context,
	id string,
	opts ...option.RequestOption,
) (*v3.NotificationGetContentResponse, error) {
	response, err := c.WithRawResponse.GetDraftContent(
		ctx,
		id,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetSubmissionChecks(
	ctx context.Context,
	id string,
	submissionId string,
	opts ...option.RequestOption,
) (*v3.SubmissionChecksGetResponse, error) {
	response, err := c.WithRawResponse.GetSubmissionChecks(
		ctx,
		id,
		submissionId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) ReplaceSubmissionChecks(
	ctx context.Context,
	id string,
	submissionId string,
	request *v3.SubmissionChecksReplaceParams,
	opts ...option.RequestOption,
) (*v3.SubmissionChecksReplaceResponse, error) {
	response, err := c.WithRawResponse.ReplaceSubmissionChecks(
		ctx,
		id,
		submissionId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CancelSubmission(
	ctx context.Context,
	id string,
	submissionId string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.CancelSubmission(
		ctx,
		id,
		submissionId,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}
