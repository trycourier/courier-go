// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	mergeProfileRequestFieldProfile = big.NewInt(1 << 0)
)

type MergeProfileRequest struct {
	Profile map[string]interface{} `json:"profile,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (m *MergeProfileRequest) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetProfile sets the Profile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MergeProfileRequest) SetProfile(profile map[string]interface{}) {
	m.Profile = profile
	m.require(mergeProfileRequestFieldProfile)
}

var (
	getListSubscriptionsRequestFieldCursor = big.NewInt(1 << 0)
)

type GetListSubscriptionsRequest struct {
	// A unique identifier that allows for fetching the next set of message statuses.
	Cursor *string `json:"-" url:"cursor,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetListSubscriptionsRequest) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetListSubscriptionsRequest) SetCursor(cursor *string) {
	g.Cursor = cursor
	g.require(getListSubscriptionsRequestFieldCursor)
}

var (
	replaceProfileRequestFieldProfile = big.NewInt(1 << 0)
)

type ReplaceProfileRequest struct {
	Profile map[string]interface{} `json:"profile,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (r *ReplaceProfileRequest) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetProfile sets the Profile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *ReplaceProfileRequest) SetProfile(profile map[string]interface{}) {
	r.Profile = profile
	r.require(replaceProfileRequestFieldProfile)
}

var (
	addressFieldFormatted     = big.NewInt(1 << 0)
	addressFieldStreetAddress = big.NewInt(1 << 1)
	addressFieldLocality      = big.NewInt(1 << 2)
	addressFieldRegion        = big.NewInt(1 << 3)
	addressFieldPostalCode    = big.NewInt(1 << 4)
	addressFieldCountry       = big.NewInt(1 << 5)
)

type Address struct {
	Formatted     string `json:"formatted" url:"formatted"`
	StreetAddress string `json:"street_address" url:"street_address"`
	Locality      string `json:"locality" url:"locality"`
	Region        string `json:"region" url:"region"`
	PostalCode    string `json:"postal_code" url:"postal_code"`
	Country       string `json:"country" url:"country"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Address) GetFormatted() string {
	if a == nil {
		return ""
	}
	return a.Formatted
}

func (a *Address) GetStreetAddress() string {
	if a == nil {
		return ""
	}
	return a.StreetAddress
}

func (a *Address) GetLocality() string {
	if a == nil {
		return ""
	}
	return a.Locality
}

func (a *Address) GetRegion() string {
	if a == nil {
		return ""
	}
	return a.Region
}

func (a *Address) GetPostalCode() string {
	if a == nil {
		return ""
	}
	return a.PostalCode
}

func (a *Address) GetCountry() string {
	if a == nil {
		return ""
	}
	return a.Country
}

func (a *Address) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Address) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetFormatted sets the Formatted field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetFormatted(formatted string) {
	a.Formatted = formatted
	a.require(addressFieldFormatted)
}

// SetStreetAddress sets the StreetAddress field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetStreetAddress(streetAddress string) {
	a.StreetAddress = streetAddress
	a.require(addressFieldStreetAddress)
}

// SetLocality sets the Locality field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetLocality(locality string) {
	a.Locality = locality
	a.require(addressFieldLocality)
}

// SetRegion sets the Region field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetRegion(region string) {
	a.Region = region
	a.require(addressFieldRegion)
}

// SetPostalCode sets the PostalCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetPostalCode(postalCode string) {
	a.PostalCode = postalCode
	a.require(addressFieldPostalCode)
}

// SetCountry sets the Country field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetCountry(country string) {
	a.Country = country
	a.require(addressFieldCountry)
}

func (a *Address) UnmarshalJSON(data []byte) error {
	type unmarshaler Address
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Address(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Address) MarshalJSON() ([]byte, error) {
	type embed Address
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *Address) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	airshipProfileFieldAudience    = big.NewInt(1 << 0)
	airshipProfileFieldDeviceTypes = big.NewInt(1 << 1)
)

type AirshipProfile struct {
	Audience    *AirshipProfileAudience `json:"audience" url:"audience"`
	DeviceTypes []DeviceType            `json:"device_types" url:"device_types"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AirshipProfile) GetAudience() *AirshipProfileAudience {
	if a == nil {
		return nil
	}
	return a.Audience
}

func (a *AirshipProfile) GetDeviceTypes() []DeviceType {
	if a == nil {
		return nil
	}
	return a.DeviceTypes
}

func (a *AirshipProfile) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AirshipProfile) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetAudience sets the Audience field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AirshipProfile) SetAudience(audience *AirshipProfileAudience) {
	a.Audience = audience
	a.require(airshipProfileFieldAudience)
}

// SetDeviceTypes sets the DeviceTypes field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AirshipProfile) SetDeviceTypes(deviceTypes []DeviceType) {
	a.DeviceTypes = deviceTypes
	a.require(airshipProfileFieldDeviceTypes)
}

func (a *AirshipProfile) UnmarshalJSON(data []byte) error {
	type unmarshaler AirshipProfile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AirshipProfile(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AirshipProfile) MarshalJSON() ([]byte, error) {
	type embed AirshipProfile
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AirshipProfile) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	airshipProfileAudienceFieldNamedUser = big.NewInt(1 << 0)
)

type AirshipProfileAudience struct {
	NamedUser string `json:"named_user" url:"named_user"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AirshipProfileAudience) GetNamedUser() string {
	if a == nil {
		return ""
	}
	return a.NamedUser
}

func (a *AirshipProfileAudience) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AirshipProfileAudience) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetNamedUser sets the NamedUser field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AirshipProfileAudience) SetNamedUser(namedUser string) {
	a.NamedUser = namedUser
	a.require(airshipProfileAudienceFieldNamedUser)
}

func (a *AirshipProfileAudience) UnmarshalJSON(data []byte) error {
	type unmarshaler AirshipProfileAudience
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AirshipProfileAudience(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AirshipProfileAudience) MarshalJSON() ([]byte, error) {
	type embed AirshipProfileAudience
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AirshipProfileAudience) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type DeleteListSubscriptionResponse struct {

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	status         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteListSubscriptionResponse) Status() string {
	return d.status
}

func (d *DeleteListSubscriptionResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteListSubscriptionResponse) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

func (d *DeleteListSubscriptionResponse) UnmarshalJSON(data []byte) error {
	type embed DeleteListSubscriptionResponse
	var unmarshaler = struct {
		embed
		Status string `json:"status"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DeleteListSubscriptionResponse(unmarshaler.embed)
	if unmarshaler.Status != "SUCCESS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", d, "SUCCESS", unmarshaler.Status)
	}
	d.status = unmarshaler.Status
	extraProperties, err := internal.ExtractExtraProperties(data, *d, "status")
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteListSubscriptionResponse) MarshalJSON() ([]byte, error) {
	type embed DeleteListSubscriptionResponse
	var marshaler = struct {
		embed
		Status string `json:"status"`
	}{
		embed:  embed(*d),
		Status: "SUCCESS",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *DeleteListSubscriptionResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeviceType = interface{}

type Discord struct {
	SendToChannel     *SendToChannel
	SendDirectMessage *SendDirectMessage

	typ string
}

func (d *Discord) GetSendToChannel() *SendToChannel {
	if d == nil {
		return nil
	}
	return d.SendToChannel
}

func (d *Discord) GetSendDirectMessage() *SendDirectMessage {
	if d == nil {
		return nil
	}
	return d.SendDirectMessage
}

func (d *Discord) UnmarshalJSON(data []byte) error {
	valueSendToChannel := new(SendToChannel)
	if err := json.Unmarshal(data, &valueSendToChannel); err == nil {
		d.typ = "SendToChannel"
		d.SendToChannel = valueSendToChannel
		return nil
	}
	valueSendDirectMessage := new(SendDirectMessage)
	if err := json.Unmarshal(data, &valueSendDirectMessage); err == nil {
		d.typ = "SendDirectMessage"
		d.SendDirectMessage = valueSendDirectMessage
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d Discord) MarshalJSON() ([]byte, error) {
	if d.typ == "SendToChannel" || d.SendToChannel != nil {
		return json.Marshal(d.SendToChannel)
	}
	if d.typ == "SendDirectMessage" || d.SendDirectMessage != nil {
		return json.Marshal(d.SendDirectMessage)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DiscordVisitor interface {
	VisitSendToChannel(*SendToChannel) error
	VisitSendDirectMessage(*SendDirectMessage) error
}

func (d *Discord) Accept(visitor DiscordVisitor) error {
	if d.typ == "SendToChannel" || d.SendToChannel != nil {
		return visitor.VisitSendToChannel(d.SendToChannel)
	}
	if d.typ == "SendDirectMessage" || d.SendDirectMessage != nil {
		return visitor.VisitSendDirectMessage(d.SendDirectMessage)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", d)
}

type Expo struct {
	Token          *Token
	MultipleTokens *MultipleTokens

	typ string
}

func (e *Expo) GetToken() *Token {
	if e == nil {
		return nil
	}
	return e.Token
}

func (e *Expo) GetMultipleTokens() *MultipleTokens {
	if e == nil {
		return nil
	}
	return e.MultipleTokens
}

func (e *Expo) UnmarshalJSON(data []byte) error {
	valueToken := new(Token)
	if err := json.Unmarshal(data, &valueToken); err == nil {
		e.typ = "Token"
		e.Token = valueToken
		return nil
	}
	valueMultipleTokens := new(MultipleTokens)
	if err := json.Unmarshal(data, &valueMultipleTokens); err == nil {
		e.typ = "MultipleTokens"
		e.MultipleTokens = valueMultipleTokens
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e Expo) MarshalJSON() ([]byte, error) {
	if e.typ == "Token" || e.Token != nil {
		return json.Marshal(e.Token)
	}
	if e.typ == "MultipleTokens" || e.MultipleTokens != nil {
		return json.Marshal(e.MultipleTokens)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExpoVisitor interface {
	VisitToken(*Token) error
	VisitMultipleTokens(*MultipleTokens) error
}

func (e *Expo) Accept(visitor ExpoVisitor) error {
	if e.typ == "Token" || e.Token != nil {
		return visitor.VisitToken(e.Token)
	}
	if e.typ == "MultipleTokens" || e.MultipleTokens != nil {
		return visitor.VisitMultipleTokens(e.MultipleTokens)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

var (
	getListSubscriptionsListFieldId          = big.NewInt(1 << 0)
	getListSubscriptionsListFieldName        = big.NewInt(1 << 1)
	getListSubscriptionsListFieldCreated     = big.NewInt(1 << 2)
	getListSubscriptionsListFieldUpdated     = big.NewInt(1 << 3)
	getListSubscriptionsListFieldPreferences = big.NewInt(1 << 4)
)

type GetListSubscriptionsList struct {
	Id string `json:"id" url:"id"`
	// List name
	Name string `json:"name" url:"name"`
	// The date/time of when the list was created. Represented as a string in ISO format.
	Created string `json:"created" url:"created"`
	// The date/time of when the list was updated. Represented as a string in ISO format.
	Updated     string                `json:"updated" url:"updated"`
	Preferences *RecipientPreferences `json:"preferences,omitempty" url:"preferences,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetListSubscriptionsList) GetId() string {
	if g == nil {
		return ""
	}
	return g.Id
}

func (g *GetListSubscriptionsList) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GetListSubscriptionsList) GetCreated() string {
	if g == nil {
		return ""
	}
	return g.Created
}

func (g *GetListSubscriptionsList) GetUpdated() string {
	if g == nil {
		return ""
	}
	return g.Updated
}

func (g *GetListSubscriptionsList) GetPreferences() *RecipientPreferences {
	if g == nil {
		return nil
	}
	return g.Preferences
}

func (g *GetListSubscriptionsList) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetListSubscriptionsList) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetListSubscriptionsList) SetId(id string) {
	g.Id = id
	g.require(getListSubscriptionsListFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetListSubscriptionsList) SetName(name string) {
	g.Name = name
	g.require(getListSubscriptionsListFieldName)
}

// SetCreated sets the Created field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetListSubscriptionsList) SetCreated(created string) {
	g.Created = created
	g.require(getListSubscriptionsListFieldCreated)
}

// SetUpdated sets the Updated field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetListSubscriptionsList) SetUpdated(updated string) {
	g.Updated = updated
	g.require(getListSubscriptionsListFieldUpdated)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetListSubscriptionsList) SetPreferences(preferences *RecipientPreferences) {
	g.Preferences = preferences
	g.require(getListSubscriptionsListFieldPreferences)
}

func (g *GetListSubscriptionsList) UnmarshalJSON(data []byte) error {
	type unmarshaler GetListSubscriptionsList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetListSubscriptionsList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetListSubscriptionsList) MarshalJSON() ([]byte, error) {
	type embed GetListSubscriptionsList
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GetListSubscriptionsList) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

var (
	getListSubscriptionsResponseFieldPaging  = big.NewInt(1 << 0)
	getListSubscriptionsResponseFieldResults = big.NewInt(1 << 1)
)

type GetListSubscriptionsResponse struct {
	Paging *Paging `json:"paging" url:"paging"`
	// An array of lists
	Results []*GetListSubscriptionsList `json:"results" url:"results"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetListSubscriptionsResponse) GetPaging() *Paging {
	if g == nil {
		return nil
	}
	return g.Paging
}

func (g *GetListSubscriptionsResponse) GetResults() []*GetListSubscriptionsList {
	if g == nil {
		return nil
	}
	return g.Results
}

func (g *GetListSubscriptionsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetListSubscriptionsResponse) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetPaging sets the Paging field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetListSubscriptionsResponse) SetPaging(paging *Paging) {
	g.Paging = paging
	g.require(getListSubscriptionsResponseFieldPaging)
}

// SetResults sets the Results field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetListSubscriptionsResponse) SetResults(results []*GetListSubscriptionsList) {
	g.Results = results
	g.require(getListSubscriptionsResponseFieldResults)
}

func (g *GetListSubscriptionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetListSubscriptionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetListSubscriptionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetListSubscriptionsResponse) MarshalJSON() ([]byte, error) {
	type embed GetListSubscriptionsResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GetListSubscriptionsResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

var (
	intercomFieldFrom = big.NewInt(1 << 0)
	intercomFieldTo   = big.NewInt(1 << 1)
)

type Intercom struct {
	From string             `json:"from" url:"from"`
	To   *IntercomRecipient `json:"to" url:"to"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *Intercom) GetFrom() string {
	if i == nil {
		return ""
	}
	return i.From
}

func (i *Intercom) GetTo() *IntercomRecipient {
	if i == nil {
		return nil
	}
	return i.To
}

func (i *Intercom) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Intercom) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetFrom sets the From field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *Intercom) SetFrom(from string) {
	i.From = from
	i.require(intercomFieldFrom)
}

// SetTo sets the To field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *Intercom) SetTo(to *IntercomRecipient) {
	i.To = to
	i.require(intercomFieldTo)
}

func (i *Intercom) UnmarshalJSON(data []byte) error {
	type unmarshaler Intercom
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = Intercom(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *Intercom) MarshalJSON() ([]byte, error) {
	type embed Intercom
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *Intercom) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

var (
	intercomRecipientFieldId = big.NewInt(1 << 0)
)

type IntercomRecipient struct {
	Id string `json:"id" url:"id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IntercomRecipient) GetId() string {
	if i == nil {
		return ""
	}
	return i.Id
}

func (i *IntercomRecipient) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IntercomRecipient) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *IntercomRecipient) SetId(id string) {
	i.Id = id
	i.require(intercomRecipientFieldId)
}

func (i *IntercomRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler IntercomRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IntercomRecipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IntercomRecipient) MarshalJSON() ([]byte, error) {
	type embed IntercomRecipient
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *IntercomRecipient) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type MergeProfileResponse struct {

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	status         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MergeProfileResponse) Status() string {
	return m.status
}

func (m *MergeProfileResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MergeProfileResponse) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

func (m *MergeProfileResponse) UnmarshalJSON(data []byte) error {
	type embed MergeProfileResponse
	var unmarshaler = struct {
		embed
		Status string `json:"status"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MergeProfileResponse(unmarshaler.embed)
	if unmarshaler.Status != "SUCCESS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", m, "SUCCESS", unmarshaler.Status)
	}
	m.status = unmarshaler.Status
	extraProperties, err := internal.ExtractExtraProperties(data, *m, "status")
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MergeProfileResponse) MarshalJSON() ([]byte, error) {
	type embed MergeProfileResponse
	var marshaler = struct {
		embed
		Status string `json:"status"`
	}{
		embed:  embed(*m),
		Status: "SUCCESS",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MergeProfileResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MsTeams struct {
	SendToMsTeamsUserId         *SendToMsTeamsUserId
	SendToMsTeamsEmail          *SendToMsTeamsEmail
	SendToMsTeamsChannelId      *SendToMsTeamsChannelId
	SendToMsTeamsConversationId *SendToMsTeamsConversationId
	SendToMsTeamsChannelName    *SendToMsTeamsChannelName

	typ string
}

func (m *MsTeams) GetSendToMsTeamsUserId() *SendToMsTeamsUserId {
	if m == nil {
		return nil
	}
	return m.SendToMsTeamsUserId
}

func (m *MsTeams) GetSendToMsTeamsEmail() *SendToMsTeamsEmail {
	if m == nil {
		return nil
	}
	return m.SendToMsTeamsEmail
}

func (m *MsTeams) GetSendToMsTeamsChannelId() *SendToMsTeamsChannelId {
	if m == nil {
		return nil
	}
	return m.SendToMsTeamsChannelId
}

func (m *MsTeams) GetSendToMsTeamsConversationId() *SendToMsTeamsConversationId {
	if m == nil {
		return nil
	}
	return m.SendToMsTeamsConversationId
}

func (m *MsTeams) GetSendToMsTeamsChannelName() *SendToMsTeamsChannelName {
	if m == nil {
		return nil
	}
	return m.SendToMsTeamsChannelName
}

func (m *MsTeams) UnmarshalJSON(data []byte) error {
	valueSendToMsTeamsUserId := new(SendToMsTeamsUserId)
	if err := json.Unmarshal(data, &valueSendToMsTeamsUserId); err == nil {
		m.typ = "SendToMsTeamsUserId"
		m.SendToMsTeamsUserId = valueSendToMsTeamsUserId
		return nil
	}
	valueSendToMsTeamsEmail := new(SendToMsTeamsEmail)
	if err := json.Unmarshal(data, &valueSendToMsTeamsEmail); err == nil {
		m.typ = "SendToMsTeamsEmail"
		m.SendToMsTeamsEmail = valueSendToMsTeamsEmail
		return nil
	}
	valueSendToMsTeamsChannelId := new(SendToMsTeamsChannelId)
	if err := json.Unmarshal(data, &valueSendToMsTeamsChannelId); err == nil {
		m.typ = "SendToMsTeamsChannelId"
		m.SendToMsTeamsChannelId = valueSendToMsTeamsChannelId
		return nil
	}
	valueSendToMsTeamsConversationId := new(SendToMsTeamsConversationId)
	if err := json.Unmarshal(data, &valueSendToMsTeamsConversationId); err == nil {
		m.typ = "SendToMsTeamsConversationId"
		m.SendToMsTeamsConversationId = valueSendToMsTeamsConversationId
		return nil
	}
	valueSendToMsTeamsChannelName := new(SendToMsTeamsChannelName)
	if err := json.Unmarshal(data, &valueSendToMsTeamsChannelName); err == nil {
		m.typ = "SendToMsTeamsChannelName"
		m.SendToMsTeamsChannelName = valueSendToMsTeamsChannelName
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, m)
}

func (m MsTeams) MarshalJSON() ([]byte, error) {
	if m.typ == "SendToMsTeamsUserId" || m.SendToMsTeamsUserId != nil {
		return json.Marshal(m.SendToMsTeamsUserId)
	}
	if m.typ == "SendToMsTeamsEmail" || m.SendToMsTeamsEmail != nil {
		return json.Marshal(m.SendToMsTeamsEmail)
	}
	if m.typ == "SendToMsTeamsChannelId" || m.SendToMsTeamsChannelId != nil {
		return json.Marshal(m.SendToMsTeamsChannelId)
	}
	if m.typ == "SendToMsTeamsConversationId" || m.SendToMsTeamsConversationId != nil {
		return json.Marshal(m.SendToMsTeamsConversationId)
	}
	if m.typ == "SendToMsTeamsChannelName" || m.SendToMsTeamsChannelName != nil {
		return json.Marshal(m.SendToMsTeamsChannelName)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", m)
}

type MsTeamsVisitor interface {
	VisitSendToMsTeamsUserId(*SendToMsTeamsUserId) error
	VisitSendToMsTeamsEmail(*SendToMsTeamsEmail) error
	VisitSendToMsTeamsChannelId(*SendToMsTeamsChannelId) error
	VisitSendToMsTeamsConversationId(*SendToMsTeamsConversationId) error
	VisitSendToMsTeamsChannelName(*SendToMsTeamsChannelName) error
}

func (m *MsTeams) Accept(visitor MsTeamsVisitor) error {
	if m.typ == "SendToMsTeamsUserId" || m.SendToMsTeamsUserId != nil {
		return visitor.VisitSendToMsTeamsUserId(m.SendToMsTeamsUserId)
	}
	if m.typ == "SendToMsTeamsEmail" || m.SendToMsTeamsEmail != nil {
		return visitor.VisitSendToMsTeamsEmail(m.SendToMsTeamsEmail)
	}
	if m.typ == "SendToMsTeamsChannelId" || m.SendToMsTeamsChannelId != nil {
		return visitor.VisitSendToMsTeamsChannelId(m.SendToMsTeamsChannelId)
	}
	if m.typ == "SendToMsTeamsConversationId" || m.SendToMsTeamsConversationId != nil {
		return visitor.VisitSendToMsTeamsConversationId(m.SendToMsTeamsConversationId)
	}
	if m.typ == "SendToMsTeamsChannelName" || m.SendToMsTeamsChannelName != nil {
		return visitor.VisitSendToMsTeamsChannelName(m.SendToMsTeamsChannelName)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", m)
}

var (
	msTeamsBasePropertiesFieldTenantId   = big.NewInt(1 << 0)
	msTeamsBasePropertiesFieldServiceUrl = big.NewInt(1 << 1)
)

type MsTeamsBaseProperties struct {
	TenantId   string `json:"tenant_id" url:"tenant_id"`
	ServiceUrl string `json:"service_url" url:"service_url"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MsTeamsBaseProperties) GetTenantId() string {
	if m == nil {
		return ""
	}
	return m.TenantId
}

func (m *MsTeamsBaseProperties) GetServiceUrl() string {
	if m == nil {
		return ""
	}
	return m.ServiceUrl
}

func (m *MsTeamsBaseProperties) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MsTeamsBaseProperties) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetTenantId sets the TenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MsTeamsBaseProperties) SetTenantId(tenantId string) {
	m.TenantId = tenantId
	m.require(msTeamsBasePropertiesFieldTenantId)
}

// SetServiceUrl sets the ServiceUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MsTeamsBaseProperties) SetServiceUrl(serviceUrl string) {
	m.ServiceUrl = serviceUrl
	m.require(msTeamsBasePropertiesFieldServiceUrl)
}

func (m *MsTeamsBaseProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler MsTeamsBaseProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MsTeamsBaseProperties(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MsTeamsBaseProperties) MarshalJSON() ([]byte, error) {
	type embed MsTeamsBaseProperties
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MsTeamsBaseProperties) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

var (
	multipleTokensFieldTokens = big.NewInt(1 << 0)
)

type MultipleTokens struct {
	Tokens []*Token `json:"tokens" url:"tokens"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MultipleTokens) GetTokens() []*Token {
	if m == nil {
		return nil
	}
	return m.Tokens
}

func (m *MultipleTokens) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MultipleTokens) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetTokens sets the Tokens field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MultipleTokens) SetTokens(tokens []*Token) {
	m.Tokens = tokens
	m.require(multipleTokensFieldTokens)
}

func (m *MultipleTokens) UnmarshalJSON(data []byte) error {
	type unmarshaler MultipleTokens
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MultipleTokens(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MultipleTokens) MarshalJSON() ([]byte, error) {
	type embed MultipleTokens
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MultipleTokens) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

var (
	pagerdutyFieldRoutingKey  = big.NewInt(1 << 0)
	pagerdutyFieldEventAction = big.NewInt(1 << 1)
	pagerdutyFieldSeverity    = big.NewInt(1 << 2)
	pagerdutyFieldSource      = big.NewInt(1 << 3)
)

type Pagerduty struct {
	RoutingKey  *string `json:"routing_key,omitempty" url:"routing_key,omitempty"`
	EventAction *string `json:"event_action,omitempty" url:"event_action,omitempty"`
	Severity    *string `json:"severity,omitempty" url:"severity,omitempty"`
	Source      *string `json:"source,omitempty" url:"source,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *Pagerduty) GetRoutingKey() *string {
	if p == nil {
		return nil
	}
	return p.RoutingKey
}

func (p *Pagerduty) GetEventAction() *string {
	if p == nil {
		return nil
	}
	return p.EventAction
}

func (p *Pagerduty) GetSeverity() *string {
	if p == nil {
		return nil
	}
	return p.Severity
}

func (p *Pagerduty) GetSource() *string {
	if p == nil {
		return nil
	}
	return p.Source
}

func (p *Pagerduty) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Pagerduty) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetRoutingKey sets the RoutingKey field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *Pagerduty) SetRoutingKey(routingKey *string) {
	p.RoutingKey = routingKey
	p.require(pagerdutyFieldRoutingKey)
}

// SetEventAction sets the EventAction field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *Pagerduty) SetEventAction(eventAction *string) {
	p.EventAction = eventAction
	p.require(pagerdutyFieldEventAction)
}

// SetSeverity sets the Severity field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *Pagerduty) SetSeverity(severity *string) {
	p.Severity = severity
	p.require(pagerdutyFieldSeverity)
}

// SetSource sets the Source field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *Pagerduty) SetSource(source *string) {
	p.Source = source
	p.require(pagerdutyFieldSource)
}

func (p *Pagerduty) UnmarshalJSON(data []byte) error {
	type unmarshaler Pagerduty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Pagerduty(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *Pagerduty) MarshalJSON() ([]byte, error) {
	type embed Pagerduty
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *Pagerduty) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	profileGetParametersFieldRecipientId = big.NewInt(1 << 0)
)

type ProfileGetParameters struct {
	RecipientId string `json:"recipientId" url:"recipientId"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProfileGetParameters) GetRecipientId() string {
	if p == nil {
		return ""
	}
	return p.RecipientId
}

func (p *ProfileGetParameters) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProfileGetParameters) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetRecipientId sets the RecipientId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProfileGetParameters) SetRecipientId(recipientId string) {
	p.RecipientId = recipientId
	p.require(profileGetParametersFieldRecipientId)
}

func (p *ProfileGetParameters) UnmarshalJSON(data []byte) error {
	type unmarshaler ProfileGetParameters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProfileGetParameters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProfileGetParameters) MarshalJSON() ([]byte, error) {
	type embed ProfileGetParameters
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *ProfileGetParameters) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	profileGetResponseFieldProfile     = big.NewInt(1 << 0)
	profileGetResponseFieldPreferences = big.NewInt(1 << 1)
)

type ProfileGetResponse struct {
	Profile     map[string]interface{} `json:"profile" url:"profile"`
	Preferences *RecipientPreferences  `json:"preferences,omitempty" url:"preferences,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProfileGetResponse) GetProfile() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.Profile
}

func (p *ProfileGetResponse) GetPreferences() *RecipientPreferences {
	if p == nil {
		return nil
	}
	return p.Preferences
}

func (p *ProfileGetResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProfileGetResponse) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetProfile sets the Profile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProfileGetResponse) SetProfile(profile map[string]interface{}) {
	p.Profile = profile
	p.require(profileGetResponseFieldProfile)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProfileGetResponse) SetPreferences(preferences *RecipientPreferences) {
	p.Preferences = preferences
	p.require(profileGetResponseFieldPreferences)
}

func (p *ProfileGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProfileGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProfileGetResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProfileGetResponse) MarshalJSON() ([]byte, error) {
	type embed ProfileGetResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *ProfileGetResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	profileUpdateRequestFieldPatch = big.NewInt(1 << 0)
)

type ProfileUpdateRequest struct {
	// List of patch operations to apply to the profile.
	Patch []*UserProfilePatch `json:"patch" url:"patch"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProfileUpdateRequest) GetPatch() []*UserProfilePatch {
	if p == nil {
		return nil
	}
	return p.Patch
}

func (p *ProfileUpdateRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProfileUpdateRequest) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetPatch sets the Patch field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProfileUpdateRequest) SetPatch(patch []*UserProfilePatch) {
	p.Patch = patch
	p.require(profileUpdateRequestFieldPatch)
}

func (p *ProfileUpdateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ProfileUpdateRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProfileUpdateRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProfileUpdateRequest) MarshalJSON() ([]byte, error) {
	type embed ProfileUpdateRequest
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *ProfileUpdateRequest) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ReplaceProfileResponse struct {

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	status         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReplaceProfileResponse) Status() string {
	return r.status
}

func (r *ReplaceProfileResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReplaceProfileResponse) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

func (r *ReplaceProfileResponse) UnmarshalJSON(data []byte) error {
	type embed ReplaceProfileResponse
	var unmarshaler = struct {
		embed
		Status string `json:"status"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = ReplaceProfileResponse(unmarshaler.embed)
	if unmarshaler.Status != "SUCCESS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "SUCCESS", unmarshaler.Status)
	}
	r.status = unmarshaler.Status
	extraProperties, err := internal.ExtractExtraProperties(data, *r, "status")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReplaceProfileResponse) MarshalJSON() ([]byte, error) {
	type embed ReplaceProfileResponse
	var marshaler = struct {
		embed
		Status string `json:"status"`
	}{
		embed:  embed(*r),
		Status: "SUCCESS",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *ReplaceProfileResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

var (
	sendDirectMessageFieldUserId = big.NewInt(1 << 0)
)

type SendDirectMessage struct {
	UserId string `json:"user_id" url:"user_id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SendDirectMessage) GetUserId() string {
	if s == nil {
		return ""
	}
	return s.UserId
}

func (s *SendDirectMessage) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SendDirectMessage) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetUserId sets the UserId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendDirectMessage) SetUserId(userId string) {
	s.UserId = userId
	s.require(sendDirectMessageFieldUserId)
}

func (s *SendDirectMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler SendDirectMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SendDirectMessage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SendDirectMessage) MarshalJSON() ([]byte, error) {
	type embed SendDirectMessage
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SendDirectMessage) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	sendToChannelFieldChannelId = big.NewInt(1 << 0)
)

type SendToChannel struct {
	ChannelId string `json:"channel_id" url:"channel_id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SendToChannel) GetChannelId() string {
	if s == nil {
		return ""
	}
	return s.ChannelId
}

func (s *SendToChannel) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SendToChannel) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetChannelId sets the ChannelId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToChannel) SetChannelId(channelId string) {
	s.ChannelId = channelId
	s.require(sendToChannelFieldChannelId)
}

func (s *SendToChannel) UnmarshalJSON(data []byte) error {
	type unmarshaler SendToChannel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SendToChannel(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SendToChannel) MarshalJSON() ([]byte, error) {
	type embed SendToChannel
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SendToChannel) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	sendToMsTeamsChannelIdFieldTenantId   = big.NewInt(1 << 0)
	sendToMsTeamsChannelIdFieldServiceUrl = big.NewInt(1 << 1)
	sendToMsTeamsChannelIdFieldChannelId  = big.NewInt(1 << 2)
)

type SendToMsTeamsChannelId struct {
	TenantId   string `json:"tenant_id" url:"tenant_id"`
	ServiceUrl string `json:"service_url" url:"service_url"`
	ChannelId  string `json:"channel_id" url:"channel_id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SendToMsTeamsChannelId) GetTenantId() string {
	if s == nil {
		return ""
	}
	return s.TenantId
}

func (s *SendToMsTeamsChannelId) GetServiceUrl() string {
	if s == nil {
		return ""
	}
	return s.ServiceUrl
}

func (s *SendToMsTeamsChannelId) GetChannelId() string {
	if s == nil {
		return ""
	}
	return s.ChannelId
}

func (s *SendToMsTeamsChannelId) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SendToMsTeamsChannelId) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetTenantId sets the TenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsChannelId) SetTenantId(tenantId string) {
	s.TenantId = tenantId
	s.require(sendToMsTeamsChannelIdFieldTenantId)
}

// SetServiceUrl sets the ServiceUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsChannelId) SetServiceUrl(serviceUrl string) {
	s.ServiceUrl = serviceUrl
	s.require(sendToMsTeamsChannelIdFieldServiceUrl)
}

// SetChannelId sets the ChannelId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsChannelId) SetChannelId(channelId string) {
	s.ChannelId = channelId
	s.require(sendToMsTeamsChannelIdFieldChannelId)
}

func (s *SendToMsTeamsChannelId) UnmarshalJSON(data []byte) error {
	type unmarshaler SendToMsTeamsChannelId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SendToMsTeamsChannelId(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SendToMsTeamsChannelId) MarshalJSON() ([]byte, error) {
	type embed SendToMsTeamsChannelId
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SendToMsTeamsChannelId) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	sendToMsTeamsChannelNameFieldTenantId    = big.NewInt(1 << 0)
	sendToMsTeamsChannelNameFieldServiceUrl  = big.NewInt(1 << 1)
	sendToMsTeamsChannelNameFieldChannelName = big.NewInt(1 << 2)
	sendToMsTeamsChannelNameFieldTeamId      = big.NewInt(1 << 3)
)

type SendToMsTeamsChannelName struct {
	TenantId    string `json:"tenant_id" url:"tenant_id"`
	ServiceUrl  string `json:"service_url" url:"service_url"`
	ChannelName string `json:"channel_name" url:"channel_name"`
	TeamId      string `json:"team_id" url:"team_id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SendToMsTeamsChannelName) GetTenantId() string {
	if s == nil {
		return ""
	}
	return s.TenantId
}

func (s *SendToMsTeamsChannelName) GetServiceUrl() string {
	if s == nil {
		return ""
	}
	return s.ServiceUrl
}

func (s *SendToMsTeamsChannelName) GetChannelName() string {
	if s == nil {
		return ""
	}
	return s.ChannelName
}

func (s *SendToMsTeamsChannelName) GetTeamId() string {
	if s == nil {
		return ""
	}
	return s.TeamId
}

func (s *SendToMsTeamsChannelName) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SendToMsTeamsChannelName) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetTenantId sets the TenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsChannelName) SetTenantId(tenantId string) {
	s.TenantId = tenantId
	s.require(sendToMsTeamsChannelNameFieldTenantId)
}

// SetServiceUrl sets the ServiceUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsChannelName) SetServiceUrl(serviceUrl string) {
	s.ServiceUrl = serviceUrl
	s.require(sendToMsTeamsChannelNameFieldServiceUrl)
}

// SetChannelName sets the ChannelName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsChannelName) SetChannelName(channelName string) {
	s.ChannelName = channelName
	s.require(sendToMsTeamsChannelNameFieldChannelName)
}

// SetTeamId sets the TeamId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsChannelName) SetTeamId(teamId string) {
	s.TeamId = teamId
	s.require(sendToMsTeamsChannelNameFieldTeamId)
}

func (s *SendToMsTeamsChannelName) UnmarshalJSON(data []byte) error {
	type unmarshaler SendToMsTeamsChannelName
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SendToMsTeamsChannelName(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SendToMsTeamsChannelName) MarshalJSON() ([]byte, error) {
	type embed SendToMsTeamsChannelName
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SendToMsTeamsChannelName) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	sendToMsTeamsConversationIdFieldTenantId       = big.NewInt(1 << 0)
	sendToMsTeamsConversationIdFieldServiceUrl     = big.NewInt(1 << 1)
	sendToMsTeamsConversationIdFieldConversationId = big.NewInt(1 << 2)
)

type SendToMsTeamsConversationId struct {
	TenantId       string `json:"tenant_id" url:"tenant_id"`
	ServiceUrl     string `json:"service_url" url:"service_url"`
	ConversationId string `json:"conversation_id" url:"conversation_id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SendToMsTeamsConversationId) GetTenantId() string {
	if s == nil {
		return ""
	}
	return s.TenantId
}

func (s *SendToMsTeamsConversationId) GetServiceUrl() string {
	if s == nil {
		return ""
	}
	return s.ServiceUrl
}

func (s *SendToMsTeamsConversationId) GetConversationId() string {
	if s == nil {
		return ""
	}
	return s.ConversationId
}

func (s *SendToMsTeamsConversationId) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SendToMsTeamsConversationId) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetTenantId sets the TenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsConversationId) SetTenantId(tenantId string) {
	s.TenantId = tenantId
	s.require(sendToMsTeamsConversationIdFieldTenantId)
}

// SetServiceUrl sets the ServiceUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsConversationId) SetServiceUrl(serviceUrl string) {
	s.ServiceUrl = serviceUrl
	s.require(sendToMsTeamsConversationIdFieldServiceUrl)
}

// SetConversationId sets the ConversationId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsConversationId) SetConversationId(conversationId string) {
	s.ConversationId = conversationId
	s.require(sendToMsTeamsConversationIdFieldConversationId)
}

func (s *SendToMsTeamsConversationId) UnmarshalJSON(data []byte) error {
	type unmarshaler SendToMsTeamsConversationId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SendToMsTeamsConversationId(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SendToMsTeamsConversationId) MarshalJSON() ([]byte, error) {
	type embed SendToMsTeamsConversationId
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SendToMsTeamsConversationId) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	sendToMsTeamsEmailFieldTenantId   = big.NewInt(1 << 0)
	sendToMsTeamsEmailFieldServiceUrl = big.NewInt(1 << 1)
	sendToMsTeamsEmailFieldEmail      = big.NewInt(1 << 2)
)

type SendToMsTeamsEmail struct {
	TenantId   string `json:"tenant_id" url:"tenant_id"`
	ServiceUrl string `json:"service_url" url:"service_url"`
	Email      string `json:"email" url:"email"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SendToMsTeamsEmail) GetTenantId() string {
	if s == nil {
		return ""
	}
	return s.TenantId
}

func (s *SendToMsTeamsEmail) GetServiceUrl() string {
	if s == nil {
		return ""
	}
	return s.ServiceUrl
}

func (s *SendToMsTeamsEmail) GetEmail() string {
	if s == nil {
		return ""
	}
	return s.Email
}

func (s *SendToMsTeamsEmail) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SendToMsTeamsEmail) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetTenantId sets the TenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsEmail) SetTenantId(tenantId string) {
	s.TenantId = tenantId
	s.require(sendToMsTeamsEmailFieldTenantId)
}

// SetServiceUrl sets the ServiceUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsEmail) SetServiceUrl(serviceUrl string) {
	s.ServiceUrl = serviceUrl
	s.require(sendToMsTeamsEmailFieldServiceUrl)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsEmail) SetEmail(email string) {
	s.Email = email
	s.require(sendToMsTeamsEmailFieldEmail)
}

func (s *SendToMsTeamsEmail) UnmarshalJSON(data []byte) error {
	type unmarshaler SendToMsTeamsEmail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SendToMsTeamsEmail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SendToMsTeamsEmail) MarshalJSON() ([]byte, error) {
	type embed SendToMsTeamsEmail
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SendToMsTeamsEmail) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	sendToMsTeamsUserIdFieldTenantId   = big.NewInt(1 << 0)
	sendToMsTeamsUserIdFieldServiceUrl = big.NewInt(1 << 1)
	sendToMsTeamsUserIdFieldUserId     = big.NewInt(1 << 2)
)

type SendToMsTeamsUserId struct {
	TenantId   string `json:"tenant_id" url:"tenant_id"`
	ServiceUrl string `json:"service_url" url:"service_url"`
	UserId     string `json:"user_id" url:"user_id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SendToMsTeamsUserId) GetTenantId() string {
	if s == nil {
		return ""
	}
	return s.TenantId
}

func (s *SendToMsTeamsUserId) GetServiceUrl() string {
	if s == nil {
		return ""
	}
	return s.ServiceUrl
}

func (s *SendToMsTeamsUserId) GetUserId() string {
	if s == nil {
		return ""
	}
	return s.UserId
}

func (s *SendToMsTeamsUserId) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SendToMsTeamsUserId) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetTenantId sets the TenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsUserId) SetTenantId(tenantId string) {
	s.TenantId = tenantId
	s.require(sendToMsTeamsUserIdFieldTenantId)
}

// SetServiceUrl sets the ServiceUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsUserId) SetServiceUrl(serviceUrl string) {
	s.ServiceUrl = serviceUrl
	s.require(sendToMsTeamsUserIdFieldServiceUrl)
}

// SetUserId sets the UserId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToMsTeamsUserId) SetUserId(userId string) {
	s.UserId = userId
	s.require(sendToMsTeamsUserIdFieldUserId)
}

func (s *SendToMsTeamsUserId) UnmarshalJSON(data []byte) error {
	type unmarshaler SendToMsTeamsUserId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SendToMsTeamsUserId(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SendToMsTeamsUserId) MarshalJSON() ([]byte, error) {
	type embed SendToMsTeamsUserId
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SendToMsTeamsUserId) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	sendToSlackChannelFieldAccessToken = big.NewInt(1 << 0)
	sendToSlackChannelFieldChannel     = big.NewInt(1 << 1)
)

type SendToSlackChannel struct {
	AccessToken string `json:"access_token" url:"access_token"`
	Channel     string `json:"channel" url:"channel"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SendToSlackChannel) GetAccessToken() string {
	if s == nil {
		return ""
	}
	return s.AccessToken
}

func (s *SendToSlackChannel) GetChannel() string {
	if s == nil {
		return ""
	}
	return s.Channel
}

func (s *SendToSlackChannel) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SendToSlackChannel) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetAccessToken sets the AccessToken field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToSlackChannel) SetAccessToken(accessToken string) {
	s.AccessToken = accessToken
	s.require(sendToSlackChannelFieldAccessToken)
}

// SetChannel sets the Channel field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToSlackChannel) SetChannel(channel string) {
	s.Channel = channel
	s.require(sendToSlackChannelFieldChannel)
}

func (s *SendToSlackChannel) UnmarshalJSON(data []byte) error {
	type unmarshaler SendToSlackChannel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SendToSlackChannel(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SendToSlackChannel) MarshalJSON() ([]byte, error) {
	type embed SendToSlackChannel
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SendToSlackChannel) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	sendToSlackEmailFieldAccessToken = big.NewInt(1 << 0)
	sendToSlackEmailFieldEmail       = big.NewInt(1 << 1)
)

type SendToSlackEmail struct {
	AccessToken string `json:"access_token" url:"access_token"`
	Email       string `json:"email" url:"email"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SendToSlackEmail) GetAccessToken() string {
	if s == nil {
		return ""
	}
	return s.AccessToken
}

func (s *SendToSlackEmail) GetEmail() string {
	if s == nil {
		return ""
	}
	return s.Email
}

func (s *SendToSlackEmail) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SendToSlackEmail) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetAccessToken sets the AccessToken field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToSlackEmail) SetAccessToken(accessToken string) {
	s.AccessToken = accessToken
	s.require(sendToSlackEmailFieldAccessToken)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToSlackEmail) SetEmail(email string) {
	s.Email = email
	s.require(sendToSlackEmailFieldEmail)
}

func (s *SendToSlackEmail) UnmarshalJSON(data []byte) error {
	type unmarshaler SendToSlackEmail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SendToSlackEmail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SendToSlackEmail) MarshalJSON() ([]byte, error) {
	type embed SendToSlackEmail
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SendToSlackEmail) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	sendToSlackUserIdFieldAccessToken = big.NewInt(1 << 0)
	sendToSlackUserIdFieldUserId      = big.NewInt(1 << 1)
)

type SendToSlackUserId struct {
	AccessToken string `json:"access_token" url:"access_token"`
	UserId      string `json:"user_id" url:"user_id"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SendToSlackUserId) GetAccessToken() string {
	if s == nil {
		return ""
	}
	return s.AccessToken
}

func (s *SendToSlackUserId) GetUserId() string {
	if s == nil {
		return ""
	}
	return s.UserId
}

func (s *SendToSlackUserId) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SendToSlackUserId) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetAccessToken sets the AccessToken field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToSlackUserId) SetAccessToken(accessToken string) {
	s.AccessToken = accessToken
	s.require(sendToSlackUserIdFieldAccessToken)
}

// SetUserId sets the UserId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendToSlackUserId) SetUserId(userId string) {
	s.UserId = userId
	s.require(sendToSlackUserIdFieldUserId)
}

func (s *SendToSlackUserId) UnmarshalJSON(data []byte) error {
	type unmarshaler SendToSlackUserId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SendToSlackUserId(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SendToSlackUserId) MarshalJSON() ([]byte, error) {
	type embed SendToSlackUserId
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SendToSlackUserId) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type Slack struct {
	SendToSlackChannel *SendToSlackChannel
	SendToSlackEmail   *SendToSlackEmail
	SendToSlackUserId  *SendToSlackUserId

	typ string
}

func (s *Slack) GetSendToSlackChannel() *SendToSlackChannel {
	if s == nil {
		return nil
	}
	return s.SendToSlackChannel
}

func (s *Slack) GetSendToSlackEmail() *SendToSlackEmail {
	if s == nil {
		return nil
	}
	return s.SendToSlackEmail
}

func (s *Slack) GetSendToSlackUserId() *SendToSlackUserId {
	if s == nil {
		return nil
	}
	return s.SendToSlackUserId
}

func (s *Slack) UnmarshalJSON(data []byte) error {
	valueSendToSlackChannel := new(SendToSlackChannel)
	if err := json.Unmarshal(data, &valueSendToSlackChannel); err == nil {
		s.typ = "SendToSlackChannel"
		s.SendToSlackChannel = valueSendToSlackChannel
		return nil
	}
	valueSendToSlackEmail := new(SendToSlackEmail)
	if err := json.Unmarshal(data, &valueSendToSlackEmail); err == nil {
		s.typ = "SendToSlackEmail"
		s.SendToSlackEmail = valueSendToSlackEmail
		return nil
	}
	valueSendToSlackUserId := new(SendToSlackUserId)
	if err := json.Unmarshal(data, &valueSendToSlackUserId); err == nil {
		s.typ = "SendToSlackUserId"
		s.SendToSlackUserId = valueSendToSlackUserId
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s Slack) MarshalJSON() ([]byte, error) {
	if s.typ == "SendToSlackChannel" || s.SendToSlackChannel != nil {
		return json.Marshal(s.SendToSlackChannel)
	}
	if s.typ == "SendToSlackEmail" || s.SendToSlackEmail != nil {
		return json.Marshal(s.SendToSlackEmail)
	}
	if s.typ == "SendToSlackUserId" || s.SendToSlackUserId != nil {
		return json.Marshal(s.SendToSlackUserId)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SlackVisitor interface {
	VisitSendToSlackChannel(*SendToSlackChannel) error
	VisitSendToSlackEmail(*SendToSlackEmail) error
	VisitSendToSlackUserId(*SendToSlackUserId) error
}

func (s *Slack) Accept(visitor SlackVisitor) error {
	if s.typ == "SendToSlackChannel" || s.SendToSlackChannel != nil {
		return visitor.VisitSendToSlackChannel(s.SendToSlackChannel)
	}
	if s.typ == "SendToSlackEmail" || s.SendToSlackEmail != nil {
		return visitor.VisitSendToSlackEmail(s.SendToSlackEmail)
	}
	if s.typ == "SendToSlackUserId" || s.SendToSlackUserId != nil {
		return visitor.VisitSendToSlackUserId(s.SendToSlackUserId)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

var (
	slackBasePropertiesFieldAccessToken = big.NewInt(1 << 0)
)

type SlackBaseProperties struct {
	AccessToken string `json:"access_token" url:"access_token"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SlackBaseProperties) GetAccessToken() string {
	if s == nil {
		return ""
	}
	return s.AccessToken
}

func (s *SlackBaseProperties) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SlackBaseProperties) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetAccessToken sets the AccessToken field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SlackBaseProperties) SetAccessToken(accessToken string) {
	s.AccessToken = accessToken
	s.require(slackBasePropertiesFieldAccessToken)
}

func (s *SlackBaseProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler SlackBaseProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SlackBaseProperties(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlackBaseProperties) MarshalJSON() ([]byte, error) {
	type embed SlackBaseProperties
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SlackBaseProperties) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	snoozeRuleFieldType  = big.NewInt(1 << 0)
	snoozeRuleFieldStart = big.NewInt(1 << 1)
	snoozeRuleFieldUntil = big.NewInt(1 << 2)
)

type SnoozeRule struct {
	Type  SnoozeRuleType `json:"type" url:"type"`
	Start string         `json:"start" url:"start"`
	Until string         `json:"until" url:"until"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SnoozeRule) GetType() SnoozeRuleType {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *SnoozeRule) GetStart() string {
	if s == nil {
		return ""
	}
	return s.Start
}

func (s *SnoozeRule) GetUntil() string {
	if s == nil {
		return ""
	}
	return s.Until
}

func (s *SnoozeRule) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SnoozeRule) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SnoozeRule) SetType(type_ SnoozeRuleType) {
	s.Type = type_
	s.require(snoozeRuleFieldType)
}

// SetStart sets the Start field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SnoozeRule) SetStart(start string) {
	s.Start = start
	s.require(snoozeRuleFieldStart)
}

// SetUntil sets the Until field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SnoozeRule) SetUntil(until string) {
	s.Until = until
	s.require(snoozeRuleFieldUntil)
}

func (s *SnoozeRule) UnmarshalJSON(data []byte) error {
	type unmarshaler SnoozeRule
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SnoozeRule(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SnoozeRule) MarshalJSON() ([]byte, error) {
	type embed SnoozeRule
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SnoozeRule) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SnoozeRuleType string

const (
	SnoozeRuleTypeSnooze SnoozeRuleType = "snooze"
)

func NewSnoozeRuleTypeFromString(s string) (SnoozeRuleType, error) {
	switch s {
	case "snooze":
		return SnoozeRuleTypeSnooze, nil
	}
	var t SnoozeRuleType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SnoozeRuleType) Ptr() *SnoozeRuleType {
	return &s
}

var (
	subscribeToListsRequestFieldLists = big.NewInt(1 << 0)
)

type SubscribeToListsRequest struct {
	Lists []*SubscribeToListsRequestListObject `json:"lists" url:"lists"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SubscribeToListsRequest) GetLists() []*SubscribeToListsRequestListObject {
	if s == nil {
		return nil
	}
	return s.Lists
}

func (s *SubscribeToListsRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubscribeToListsRequest) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetLists sets the Lists field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SubscribeToListsRequest) SetLists(lists []*SubscribeToListsRequestListObject) {
	s.Lists = lists
	s.require(subscribeToListsRequestFieldLists)
}

func (s *SubscribeToListsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SubscribeToListsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubscribeToListsRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubscribeToListsRequest) MarshalJSON() ([]byte, error) {
	type embed SubscribeToListsRequest
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SubscribeToListsRequest) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	subscribeToListsRequestListObjectFieldListId      = big.NewInt(1 << 0)
	subscribeToListsRequestListObjectFieldPreferences = big.NewInt(1 << 1)
)

type SubscribeToListsRequestListObject struct {
	ListId      string                `json:"listId" url:"listId"`
	Preferences *RecipientPreferences `json:"preferences,omitempty" url:"preferences,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SubscribeToListsRequestListObject) GetListId() string {
	if s == nil {
		return ""
	}
	return s.ListId
}

func (s *SubscribeToListsRequestListObject) GetPreferences() *RecipientPreferences {
	if s == nil {
		return nil
	}
	return s.Preferences
}

func (s *SubscribeToListsRequestListObject) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubscribeToListsRequestListObject) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetListId sets the ListId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SubscribeToListsRequestListObject) SetListId(listId string) {
	s.ListId = listId
	s.require(subscribeToListsRequestListObjectFieldListId)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SubscribeToListsRequestListObject) SetPreferences(preferences *RecipientPreferences) {
	s.Preferences = preferences
	s.require(subscribeToListsRequestListObjectFieldPreferences)
}

func (s *SubscribeToListsRequestListObject) UnmarshalJSON(data []byte) error {
	type unmarshaler SubscribeToListsRequestListObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubscribeToListsRequestListObject(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubscribeToListsRequestListObject) MarshalJSON() ([]byte, error) {
	type embed SubscribeToListsRequestListObject
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SubscribeToListsRequestListObject) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubscribeToListsResponse struct {

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	status         string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SubscribeToListsResponse) Status() string {
	return s.status
}

func (s *SubscribeToListsResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubscribeToListsResponse) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

func (s *SubscribeToListsResponse) UnmarshalJSON(data []byte) error {
	type embed SubscribeToListsResponse
	var unmarshaler = struct {
		embed
		Status string `json:"status"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SubscribeToListsResponse(unmarshaler.embed)
	if unmarshaler.Status != "SUCCESS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "SUCCESS", unmarshaler.Status)
	}
	s.status = unmarshaler.Status
	extraProperties, err := internal.ExtractExtraProperties(data, *s, "status")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubscribeToListsResponse) MarshalJSON() ([]byte, error) {
	type embed SubscribeToListsResponse
	var marshaler = struct {
		embed
		Status string `json:"status"`
	}{
		embed:  embed(*s),
		Status: "SUCCESS",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SubscribeToListsResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	tokenFieldToken = big.NewInt(1 << 0)
)

type Token struct {
	Token string `json:"token" url:"token"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Token) GetToken() string {
	if t == nil {
		return ""
	}
	return t.Token
}

func (t *Token) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Token) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetToken sets the Token field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Token) SetToken(token string) {
	t.Token = token
	t.require(tokenFieldToken)
}

func (t *Token) UnmarshalJSON(data []byte) error {
	type unmarshaler Token
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Token(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Token) MarshalJSON() ([]byte, error) {
	type embed Token
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *Token) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	userProfileFieldAddress             = big.NewInt(1 << 0)
	userProfileFieldBirthdate           = big.NewInt(1 << 1)
	userProfileFieldEmail               = big.NewInt(1 << 2)
	userProfileFieldEmailVerified       = big.NewInt(1 << 3)
	userProfileFieldFamilyName          = big.NewInt(1 << 4)
	userProfileFieldGender              = big.NewInt(1 << 5)
	userProfileFieldGivenName           = big.NewInt(1 << 6)
	userProfileFieldLocale              = big.NewInt(1 << 7)
	userProfileFieldMiddleName          = big.NewInt(1 << 8)
	userProfileFieldName                = big.NewInt(1 << 9)
	userProfileFieldNickname            = big.NewInt(1 << 10)
	userProfileFieldPhoneNumber         = big.NewInt(1 << 11)
	userProfileFieldPhoneNumberVerified = big.NewInt(1 << 12)
	userProfileFieldPicture             = big.NewInt(1 << 13)
	userProfileFieldPreferredName       = big.NewInt(1 << 14)
	userProfileFieldProfile             = big.NewInt(1 << 15)
	userProfileFieldSub                 = big.NewInt(1 << 16)
	userProfileFieldUpdatedAt           = big.NewInt(1 << 17)
	userProfileFieldWebsite             = big.NewInt(1 << 18)
	userProfileFieldZoneinfo            = big.NewInt(1 << 19)
	userProfileFieldCustom              = big.NewInt(1 << 20)
	userProfileFieldAirship             = big.NewInt(1 << 21)
	userProfileFieldApn                 = big.NewInt(1 << 22)
	userProfileFieldTargetArn           = big.NewInt(1 << 23)
	userProfileFieldDiscord             = big.NewInt(1 << 24)
	userProfileFieldExpo                = big.NewInt(1 << 25)
	userProfileFieldFacebookPsid        = big.NewInt(1 << 26)
	userProfileFieldFirebaseToken       = big.NewInt(1 << 27)
	userProfileFieldIntercom            = big.NewInt(1 << 28)
	userProfileFieldSlack               = big.NewInt(1 << 29)
	userProfileFieldMsTeams             = big.NewInt(1 << 30)
)

type UserProfile struct {
	Address             *Address `json:"address" url:"address"`
	Birthdate           string   `json:"birthdate" url:"birthdate"`
	Email               string   `json:"email" url:"email"`
	EmailVerified       bool     `json:"email_verified" url:"email_verified"`
	FamilyName          string   `json:"family_name" url:"family_name"`
	Gender              string   `json:"gender" url:"gender"`
	GivenName           string   `json:"given_name" url:"given_name"`
	Locale              string   `json:"locale" url:"locale"`
	MiddleName          string   `json:"middle_name" url:"middle_name"`
	Name                string   `json:"name" url:"name"`
	Nickname            string   `json:"nickname" url:"nickname"`
	PhoneNumber         string   `json:"phone_number" url:"phone_number"`
	PhoneNumberVerified bool     `json:"phone_number_verified" url:"phone_number_verified"`
	Picture             string   `json:"picture" url:"picture"`
	PreferredName       string   `json:"preferred_name" url:"preferred_name"`
	Profile             string   `json:"profile" url:"profile"`
	Sub                 string   `json:"sub" url:"sub"`
	UpdatedAt           string   `json:"updated_at" url:"updated_at"`
	Website             string   `json:"website" url:"website"`
	Zoneinfo            string   `json:"zoneinfo" url:"zoneinfo"`
	// A free form object. Due to a limitation of the API Explorer, you can only enter string key/values below, but this API accepts more complex object structures.
	Custom        interface{}               `json:"custom" url:"custom"`
	Airship       *AirshipProfile           `json:"airship" url:"airship"`
	Apn           string                    `json:"apn" url:"apn"`
	TargetArn     string                    `json:"target_arn" url:"target_arn"`
	Discord       *Discord                  `json:"discord" url:"discord"`
	Expo          *Expo                     `json:"expo" url:"expo"`
	FacebookPsid  string                    `json:"facebookPSID" url:"facebookPSID"`
	FirebaseToken *UserProfileFirebaseToken `json:"firebaseToken" url:"firebaseToken"`
	Intercom      *Intercom                 `json:"intercom" url:"intercom"`
	Slack         *Slack                    `json:"slack" url:"slack"`
	MsTeams       *MsTeams                  `json:"ms_teams" url:"ms_teams"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserProfile) GetAddress() *Address {
	if u == nil {
		return nil
	}
	return u.Address
}

func (u *UserProfile) GetBirthdate() string {
	if u == nil {
		return ""
	}
	return u.Birthdate
}

func (u *UserProfile) GetEmail() string {
	if u == nil {
		return ""
	}
	return u.Email
}

func (u *UserProfile) GetEmailVerified() bool {
	if u == nil {
		return false
	}
	return u.EmailVerified
}

func (u *UserProfile) GetFamilyName() string {
	if u == nil {
		return ""
	}
	return u.FamilyName
}

func (u *UserProfile) GetGender() string {
	if u == nil {
		return ""
	}
	return u.Gender
}

func (u *UserProfile) GetGivenName() string {
	if u == nil {
		return ""
	}
	return u.GivenName
}

func (u *UserProfile) GetLocale() string {
	if u == nil {
		return ""
	}
	return u.Locale
}

func (u *UserProfile) GetMiddleName() string {
	if u == nil {
		return ""
	}
	return u.MiddleName
}

func (u *UserProfile) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UserProfile) GetNickname() string {
	if u == nil {
		return ""
	}
	return u.Nickname
}

func (u *UserProfile) GetPhoneNumber() string {
	if u == nil {
		return ""
	}
	return u.PhoneNumber
}

func (u *UserProfile) GetPhoneNumberVerified() bool {
	if u == nil {
		return false
	}
	return u.PhoneNumberVerified
}

func (u *UserProfile) GetPicture() string {
	if u == nil {
		return ""
	}
	return u.Picture
}

func (u *UserProfile) GetPreferredName() string {
	if u == nil {
		return ""
	}
	return u.PreferredName
}

func (u *UserProfile) GetProfile() string {
	if u == nil {
		return ""
	}
	return u.Profile
}

func (u *UserProfile) GetSub() string {
	if u == nil {
		return ""
	}
	return u.Sub
}

func (u *UserProfile) GetUpdatedAt() string {
	if u == nil {
		return ""
	}
	return u.UpdatedAt
}

func (u *UserProfile) GetWebsite() string {
	if u == nil {
		return ""
	}
	return u.Website
}

func (u *UserProfile) GetZoneinfo() string {
	if u == nil {
		return ""
	}
	return u.Zoneinfo
}

func (u *UserProfile) GetCustom() interface{} {
	if u == nil {
		return nil
	}
	return u.Custom
}

func (u *UserProfile) GetAirship() *AirshipProfile {
	if u == nil {
		return nil
	}
	return u.Airship
}

func (u *UserProfile) GetApn() string {
	if u == nil {
		return ""
	}
	return u.Apn
}

func (u *UserProfile) GetTargetArn() string {
	if u == nil {
		return ""
	}
	return u.TargetArn
}

func (u *UserProfile) GetDiscord() *Discord {
	if u == nil {
		return nil
	}
	return u.Discord
}

func (u *UserProfile) GetExpo() *Expo {
	if u == nil {
		return nil
	}
	return u.Expo
}

func (u *UserProfile) GetFacebookPsid() string {
	if u == nil {
		return ""
	}
	return u.FacebookPsid
}

func (u *UserProfile) GetFirebaseToken() *UserProfileFirebaseToken {
	if u == nil {
		return nil
	}
	return u.FirebaseToken
}

func (u *UserProfile) GetIntercom() *Intercom {
	if u == nil {
		return nil
	}
	return u.Intercom
}

func (u *UserProfile) GetSlack() *Slack {
	if u == nil {
		return nil
	}
	return u.Slack
}

func (u *UserProfile) GetMsTeams() *MsTeams {
	if u == nil {
		return nil
	}
	return u.MsTeams
}

func (u *UserProfile) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserProfile) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetAddress sets the Address field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetAddress(address *Address) {
	u.Address = address
	u.require(userProfileFieldAddress)
}

// SetBirthdate sets the Birthdate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetBirthdate(birthdate string) {
	u.Birthdate = birthdate
	u.require(userProfileFieldBirthdate)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetEmail(email string) {
	u.Email = email
	u.require(userProfileFieldEmail)
}

// SetEmailVerified sets the EmailVerified field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetEmailVerified(emailVerified bool) {
	u.EmailVerified = emailVerified
	u.require(userProfileFieldEmailVerified)
}

// SetFamilyName sets the FamilyName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetFamilyName(familyName string) {
	u.FamilyName = familyName
	u.require(userProfileFieldFamilyName)
}

// SetGender sets the Gender field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetGender(gender string) {
	u.Gender = gender
	u.require(userProfileFieldGender)
}

// SetGivenName sets the GivenName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetGivenName(givenName string) {
	u.GivenName = givenName
	u.require(userProfileFieldGivenName)
}

// SetLocale sets the Locale field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetLocale(locale string) {
	u.Locale = locale
	u.require(userProfileFieldLocale)
}

// SetMiddleName sets the MiddleName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetMiddleName(middleName string) {
	u.MiddleName = middleName
	u.require(userProfileFieldMiddleName)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetName(name string) {
	u.Name = name
	u.require(userProfileFieldName)
}

// SetNickname sets the Nickname field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetNickname(nickname string) {
	u.Nickname = nickname
	u.require(userProfileFieldNickname)
}

// SetPhoneNumber sets the PhoneNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetPhoneNumber(phoneNumber string) {
	u.PhoneNumber = phoneNumber
	u.require(userProfileFieldPhoneNumber)
}

// SetPhoneNumberVerified sets the PhoneNumberVerified field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetPhoneNumberVerified(phoneNumberVerified bool) {
	u.PhoneNumberVerified = phoneNumberVerified
	u.require(userProfileFieldPhoneNumberVerified)
}

// SetPicture sets the Picture field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetPicture(picture string) {
	u.Picture = picture
	u.require(userProfileFieldPicture)
}

// SetPreferredName sets the PreferredName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetPreferredName(preferredName string) {
	u.PreferredName = preferredName
	u.require(userProfileFieldPreferredName)
}

// SetProfile sets the Profile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetProfile(profile string) {
	u.Profile = profile
	u.require(userProfileFieldProfile)
}

// SetSub sets the Sub field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetSub(sub string) {
	u.Sub = sub
	u.require(userProfileFieldSub)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetUpdatedAt(updatedAt string) {
	u.UpdatedAt = updatedAt
	u.require(userProfileFieldUpdatedAt)
}

// SetWebsite sets the Website field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetWebsite(website string) {
	u.Website = website
	u.require(userProfileFieldWebsite)
}

// SetZoneinfo sets the Zoneinfo field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetZoneinfo(zoneinfo string) {
	u.Zoneinfo = zoneinfo
	u.require(userProfileFieldZoneinfo)
}

// SetCustom sets the Custom field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetCustom(custom interface{}) {
	u.Custom = custom
	u.require(userProfileFieldCustom)
}

// SetAirship sets the Airship field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetAirship(airship *AirshipProfile) {
	u.Airship = airship
	u.require(userProfileFieldAirship)
}

// SetApn sets the Apn field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetApn(apn string) {
	u.Apn = apn
	u.require(userProfileFieldApn)
}

// SetTargetArn sets the TargetArn field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetTargetArn(targetArn string) {
	u.TargetArn = targetArn
	u.require(userProfileFieldTargetArn)
}

// SetDiscord sets the Discord field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetDiscord(discord *Discord) {
	u.Discord = discord
	u.require(userProfileFieldDiscord)
}

// SetExpo sets the Expo field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetExpo(expo *Expo) {
	u.Expo = expo
	u.require(userProfileFieldExpo)
}

// SetFacebookPsid sets the FacebookPsid field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetFacebookPsid(facebookPsid string) {
	u.FacebookPsid = facebookPsid
	u.require(userProfileFieldFacebookPsid)
}

// SetFirebaseToken sets the FirebaseToken field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetFirebaseToken(firebaseToken *UserProfileFirebaseToken) {
	u.FirebaseToken = firebaseToken
	u.require(userProfileFieldFirebaseToken)
}

// SetIntercom sets the Intercom field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetIntercom(intercom *Intercom) {
	u.Intercom = intercom
	u.require(userProfileFieldIntercom)
}

// SetSlack sets the Slack field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetSlack(slack *Slack) {
	u.Slack = slack
	u.require(userProfileFieldSlack)
}

// SetMsTeams sets the MsTeams field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetMsTeams(msTeams *MsTeams) {
	u.MsTeams = msTeams
	u.require(userProfileFieldMsTeams)
}

func (u *UserProfile) UnmarshalJSON(data []byte) error {
	type unmarshaler UserProfile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserProfile(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserProfile) MarshalJSON() ([]byte, error) {
	type embed UserProfile
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UserProfile) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserProfileFirebaseToken struct {
	String     string
	StringList []string

	typ string
}

func (u *UserProfileFirebaseToken) GetString() string {
	if u == nil {
		return ""
	}
	return u.String
}

func (u *UserProfileFirebaseToken) GetStringList() []string {
	if u == nil {
		return nil
	}
	return u.StringList
}

func (u *UserProfileFirebaseToken) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		u.typ = "String"
		u.String = valueString
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		u.typ = "StringList"
		u.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UserProfileFirebaseToken) MarshalJSON() ([]byte, error) {
	if u.typ == "String" || u.String != "" {
		return json.Marshal(u.String)
	}
	if u.typ == "StringList" || u.StringList != nil {
		return json.Marshal(u.StringList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", u)
}

type UserProfileFirebaseTokenVisitor interface {
	VisitString(string) error
	VisitStringList([]string) error
}

func (u *UserProfileFirebaseToken) Accept(visitor UserProfileFirebaseTokenVisitor) error {
	if u.typ == "String" || u.String != "" {
		return visitor.VisitString(u.String)
	}
	if u.typ == "StringList" || u.StringList != nil {
		return visitor.VisitStringList(u.StringList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", u)
}

var (
	userProfilePatchFieldOp    = big.NewInt(1 << 0)
	userProfilePatchFieldPath  = big.NewInt(1 << 1)
	userProfilePatchFieldValue = big.NewInt(1 << 2)
)

type UserProfilePatch struct {
	// The operation to perform.
	Op string `json:"op" url:"op"`
	// The JSON path specifying the part of the profile to operate on.
	Path string `json:"path" url:"path"`
	// The value for the operation.
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserProfilePatch) GetOp() string {
	if u == nil {
		return ""
	}
	return u.Op
}

func (u *UserProfilePatch) GetPath() string {
	if u == nil {
		return ""
	}
	return u.Path
}

func (u *UserProfilePatch) GetValue() string {
	if u == nil {
		return ""
	}
	return u.Value
}

func (u *UserProfilePatch) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserProfilePatch) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetOp sets the Op field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfilePatch) SetOp(op string) {
	u.Op = op
	u.require(userProfilePatchFieldOp)
}

// SetPath sets the Path field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfilePatch) SetPath(path string) {
	u.Path = path
	u.require(userProfilePatchFieldPath)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfilePatch) SetValue(value string) {
	u.Value = value
	u.require(userProfilePatchFieldValue)
}

func (u *UserProfilePatch) UnmarshalJSON(data []byte) error {
	type unmarshaler UserProfilePatch
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserProfilePatch(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserProfilePatch) MarshalJSON() ([]byte, error) {
	type embed UserProfilePatch
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UserProfilePatch) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type WebhookAuthMode string

const (
	WebhookAuthModeNone   WebhookAuthMode = "none"
	WebhookAuthModeBasic  WebhookAuthMode = "basic"
	WebhookAuthModeBearer WebhookAuthMode = "bearer"
)

func NewWebhookAuthModeFromString(s string) (WebhookAuthMode, error) {
	switch s {
	case "none":
		return WebhookAuthModeNone, nil
	case "basic":
		return WebhookAuthModeBasic, nil
	case "bearer":
		return WebhookAuthModeBearer, nil
	}
	var t WebhookAuthMode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WebhookAuthMode) Ptr() *WebhookAuthMode {
	return &w
}

var (
	webhookAuthenticationFieldMode     = big.NewInt(1 << 0)
	webhookAuthenticationFieldUsername = big.NewInt(1 << 1)
	webhookAuthenticationFieldPassword = big.NewInt(1 << 2)
	webhookAuthenticationFieldToken    = big.NewInt(1 << 3)
)

type WebhookAuthentication struct {
	// The authentication mode to use. Defaults to 'none' if not specified.
	Mode WebhookAuthMode `json:"mode" url:"mode"`
	// Username for basic authentication.
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	// Password for basic authentication.
	Password *string `json:"password,omitempty" url:"password,omitempty"`
	// Token for bearer authentication.
	Token *string `json:"token,omitempty" url:"token,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhookAuthentication) GetMode() WebhookAuthMode {
	if w == nil {
		return ""
	}
	return w.Mode
}

func (w *WebhookAuthentication) GetUsername() *string {
	if w == nil {
		return nil
	}
	return w.Username
}

func (w *WebhookAuthentication) GetPassword() *string {
	if w == nil {
		return nil
	}
	return w.Password
}

func (w *WebhookAuthentication) GetToken() *string {
	if w == nil {
		return nil
	}
	return w.Token
}

func (w *WebhookAuthentication) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhookAuthentication) require(field *big.Int) {
	if w.explicitFields == nil {
		w.explicitFields = big.NewInt(0)
	}
	w.explicitFields.Or(w.explicitFields, field)
}

// SetMode sets the Mode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebhookAuthentication) SetMode(mode WebhookAuthMode) {
	w.Mode = mode
	w.require(webhookAuthenticationFieldMode)
}

// SetUsername sets the Username field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebhookAuthentication) SetUsername(username *string) {
	w.Username = username
	w.require(webhookAuthenticationFieldUsername)
}

// SetPassword sets the Password field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebhookAuthentication) SetPassword(password *string) {
	w.Password = password
	w.require(webhookAuthenticationFieldPassword)
}

// SetToken sets the Token field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebhookAuthentication) SetToken(token *string) {
	w.Token = token
	w.require(webhookAuthenticationFieldToken)
}

func (w *WebhookAuthentication) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhookAuthentication
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhookAuthentication(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookAuthentication) MarshalJSON() ([]byte, error) {
	type embed WebhookAuthentication
	var marshaler = struct {
		embed
	}{
		embed: embed(*w),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, w.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (w *WebhookAuthentication) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhookMethod string

const (
	WebhookMethodPost WebhookMethod = "POST"
	WebhookMethodPut  WebhookMethod = "PUT"
)

func NewWebhookMethodFromString(s string) (WebhookMethod, error) {
	switch s {
	case "POST":
		return WebhookMethodPost, nil
	case "PUT":
		return WebhookMethodPut, nil
	}
	var t WebhookMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WebhookMethod) Ptr() *WebhookMethod {
	return &w
}

var (
	webhookProfileFieldUrl            = big.NewInt(1 << 0)
	webhookProfileFieldMethod         = big.NewInt(1 << 1)
	webhookProfileFieldHeaders        = big.NewInt(1 << 2)
	webhookProfileFieldAuthentication = big.NewInt(1 << 3)
	webhookProfileFieldProfile        = big.NewInt(1 << 4)
)

type WebhookProfile struct {
	// The URL to send the webhook request to.
	Url string `json:"url" url:"url"`
	// The HTTP method to use for the webhook request. Defaults to POST if not specified.
	Method *WebhookMethod `json:"method,omitempty" url:"method,omitempty"`
	// Custom headers to include in the webhook request.
	Headers map[string]string `json:"headers,omitempty" url:"headers,omitempty"`
	// Authentication configuration for the webhook request.
	Authentication *WebhookAuthentication `json:"authentication,omitempty" url:"authentication,omitempty"`
	// Specifies what profile information is included in the request payload. Defaults to 'limited' if not specified.
	Profile *WebhookProfileType `json:"profile,omitempty" url:"profile,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhookProfile) GetUrl() string {
	if w == nil {
		return ""
	}
	return w.Url
}

func (w *WebhookProfile) GetMethod() *WebhookMethod {
	if w == nil {
		return nil
	}
	return w.Method
}

func (w *WebhookProfile) GetHeaders() map[string]string {
	if w == nil {
		return nil
	}
	return w.Headers
}

func (w *WebhookProfile) GetAuthentication() *WebhookAuthentication {
	if w == nil {
		return nil
	}
	return w.Authentication
}

func (w *WebhookProfile) GetProfile() *WebhookProfileType {
	if w == nil {
		return nil
	}
	return w.Profile
}

func (w *WebhookProfile) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhookProfile) require(field *big.Int) {
	if w.explicitFields == nil {
		w.explicitFields = big.NewInt(0)
	}
	w.explicitFields.Or(w.explicitFields, field)
}

// SetUrl sets the Url field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebhookProfile) SetUrl(url string) {
	w.Url = url
	w.require(webhookProfileFieldUrl)
}

// SetMethod sets the Method field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebhookProfile) SetMethod(method *WebhookMethod) {
	w.Method = method
	w.require(webhookProfileFieldMethod)
}

// SetHeaders sets the Headers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebhookProfile) SetHeaders(headers map[string]string) {
	w.Headers = headers
	w.require(webhookProfileFieldHeaders)
}

// SetAuthentication sets the Authentication field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebhookProfile) SetAuthentication(authentication *WebhookAuthentication) {
	w.Authentication = authentication
	w.require(webhookProfileFieldAuthentication)
}

// SetProfile sets the Profile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebhookProfile) SetProfile(profile *WebhookProfileType) {
	w.Profile = profile
	w.require(webhookProfileFieldProfile)
}

func (w *WebhookProfile) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhookProfile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhookProfile(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookProfile) MarshalJSON() ([]byte, error) {
	type embed WebhookProfile
	var marshaler = struct {
		embed
	}{
		embed: embed(*w),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, w.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (w *WebhookProfile) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhookProfileType string

const (
	WebhookProfileTypeLimited  WebhookProfileType = "limited"
	WebhookProfileTypeExpanded WebhookProfileType = "expanded"
)

func NewWebhookProfileTypeFromString(s string) (WebhookProfileType, error) {
	switch s {
	case "limited":
		return WebhookProfileTypeLimited, nil
	case "expanded":
		return WebhookProfileTypeExpanded, nil
	}
	var t WebhookProfileType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WebhookProfileType) Ptr() *WebhookProfileType {
	return &w
}
