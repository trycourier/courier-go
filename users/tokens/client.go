// Code generated by Fern. DO NOT EDIT.

package tokens

import (
	context "context"
	core "github.com/trycourier/courier-go/v3/core"
	internal "github.com/trycourier/courier-go/v3/internal"
	option "github.com/trycourier/courier-go/v3/option"
	users "github.com/trycourier/courier-go/v3/users"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	if options.AuthorizationToken == "" {
		options.AuthorizationToken = os.Getenv("COURIER_AUTH_TOKEN")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Adds multiple tokens to a user and overwrites matching existing tokens.
func (c *Client) AddMultiple(
	ctx context.Context,
	// The user's ID. This can be any uniquely identifiable string.
	userId string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.AddMultiple(
		ctx,
		userId,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Adds a single token to a user and overwrites a matching existing token.
func (c *Client) Add(
	ctx context.Context,
	// The user's ID. This can be any uniquely identifiable string.
	userId string,
	// The full token string.
	token string,
	request *users.UserToken,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Add(
		ctx,
		userId,
		token,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Apply a JSON Patch (RFC 6902) to the specified token.
func (c *Client) Update(
	ctx context.Context,
	// The user's ID. This can be any uniquely identifiable string.
	userId string,
	// The full token string.
	token string,
	request *users.PatchUserTokenOpts,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Update(
		ctx,
		userId,
		token,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Get single token available for a `:token`
func (c *Client) Get(
	ctx context.Context,
	// The user's ID. This can be any uniquely identifiable string.
	userId string,
	// The full token string.
	token string,
	opts ...option.RequestOption,
) (*users.GetUserTokenResponse, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		userId,
		token,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Gets all tokens available for a :user_id
func (c *Client) List(
	ctx context.Context,
	// The user's ID. This can be any uniquely identifiable string.
	userId string,
	opts ...option.RequestOption,
) (users.GetAllTokensResponse, error) {
	response, err := c.WithRawResponse.List(
		ctx,
		userId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Delete(
	ctx context.Context,
	// The user's ID. This can be any uniquely identifiable string.
	userId string,
	// The full token string.
	token string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Delete(
		ctx,
		userId,
		token,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}
