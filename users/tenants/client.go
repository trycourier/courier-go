// Code generated by Fern. DO NOT EDIT.

package tenants

import (
	context "context"
	core "github.com/trycourier/courier-go/v3/core"
	internal "github.com/trycourier/courier-go/v3/internal"
	option "github.com/trycourier/courier-go/v3/option"
	users "github.com/trycourier/courier-go/v3/users"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	if options.AuthorizationToken == "" {
		options.AuthorizationToken = os.Getenv("COURIER_AUTH_TOKEN")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// This endpoint is used to add a user to
// multiple tenants in one call.
// A custom profile can also be supplied for each tenant.
// This profile will be merged with the user's main
// profile when sending to the user with that tenant.
func (c *Client) AddMultple(
	ctx context.Context,
	// The user's ID. This can be any uniquely identifiable string.
	userId string,
	request *users.AddUserToMultipleTenantsParams,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.AddMultple(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// This endpoint is used to add a single tenant.
//
// A custom profile can also be supplied with the tenant.
// This profile will be merged with the user's main profile
// when sending to the user with that tenant.
func (c *Client) Add(
	ctx context.Context,
	// Id of the user to be added to the supplied tenant.
	userId string,
	// Id of the tenant the user should be added to.
	tenantId string,
	request *users.AddUserToSingleTenantsParams,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Add(
		ctx,
		userId,
		tenantId,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Removes a user from any tenants they may have been associated with.
func (c *Client) RemoveAll(
	ctx context.Context,
	// Id of the user to be removed from the supplied tenant.
	userId string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.RemoveAll(
		ctx,
		userId,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Removes a user from the supplied tenant.
func (c *Client) Remove(
	ctx context.Context,
	// Id of the user to be removed from the supplied tenant.
	userId string,
	// Id of the tenant the user should be removed from.
	tenantId string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Remove(
		ctx,
		userId,
		tenantId,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Returns a paginated list of user tenant associations.
func (c *Client) List(
	ctx context.Context,
	// Id of the user to retrieve all associated tenants for.
	userId string,
	request *users.ListTenantsForUserParams,
	opts ...option.RequestOption,
) (*users.ListTenantsForUserResponse, error) {
	response, err := c.WithRawResponse.List(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
