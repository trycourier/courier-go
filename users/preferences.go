// Code generated by Fern. DO NOT EDIT.

package users

import (
	json "encoding/json"
	fmt "fmt"
	v3 "github.com/trycourier/courier-go/v3"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	userPreferencesTopicParamsFieldTenantId = big.NewInt(1 << 0)
)

type UserPreferencesTopicParams struct {
	// Query the preferences of a user for this specific tenant context.
	TenantId *string `json:"-" url:"tenant_id,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (u *UserPreferencesTopicParams) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetTenantId sets the TenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserPreferencesTopicParams) SetTenantId(tenantId *string) {
	u.TenantId = tenantId
	u.require(userPreferencesTopicParamsFieldTenantId)
}

var (
	userPreferencesParamsFieldTenantId = big.NewInt(1 << 0)
)

type UserPreferencesParams struct {
	// Query the preferences of a user for this specific tenant context.
	TenantId *string `json:"-" url:"tenant_id,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (u *UserPreferencesParams) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetTenantId sets the TenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserPreferencesParams) SetTenantId(tenantId *string) {
	u.TenantId = tenantId
	u.require(userPreferencesParamsFieldTenantId)
}

var (
	topicPreferenceFieldCustomRouting    = big.NewInt(1 << 0)
	topicPreferenceFieldDefaultStatus    = big.NewInt(1 << 1)
	topicPreferenceFieldHasCustomRouting = big.NewInt(1 << 2)
	topicPreferenceFieldStatus           = big.NewInt(1 << 3)
	topicPreferenceFieldTopicId          = big.NewInt(1 << 4)
	topicPreferenceFieldTopicName        = big.NewInt(1 << 5)
)

type TopicPreference struct {
	// The Channels a user has chosen to receive notifications through for this topic
	CustomRouting    []v3.ChannelClassification `json:"custom_routing,omitempty" url:"custom_routing,omitempty"`
	DefaultStatus    v3.PreferenceStatus        `json:"default_status" url:"default_status"`
	HasCustomRouting *bool                      `json:"has_custom_routing,omitempty" url:"has_custom_routing,omitempty"`
	Status           v3.PreferenceStatus        `json:"status" url:"status"`
	TopicId          string                     `json:"topic_id" url:"topic_id"`
	TopicName        string                     `json:"topic_name" url:"topic_name"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TopicPreference) GetCustomRouting() []v3.ChannelClassification {
	if t == nil {
		return nil
	}
	return t.CustomRouting
}

func (t *TopicPreference) GetDefaultStatus() v3.PreferenceStatus {
	if t == nil {
		return ""
	}
	return t.DefaultStatus
}

func (t *TopicPreference) GetHasCustomRouting() *bool {
	if t == nil {
		return nil
	}
	return t.HasCustomRouting
}

func (t *TopicPreference) GetStatus() v3.PreferenceStatus {
	if t == nil {
		return ""
	}
	return t.Status
}

func (t *TopicPreference) GetTopicId() string {
	if t == nil {
		return ""
	}
	return t.TopicId
}

func (t *TopicPreference) GetTopicName() string {
	if t == nil {
		return ""
	}
	return t.TopicName
}

func (t *TopicPreference) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TopicPreference) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetCustomRouting sets the CustomRouting field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TopicPreference) SetCustomRouting(customRouting []v3.ChannelClassification) {
	t.CustomRouting = customRouting
	t.require(topicPreferenceFieldCustomRouting)
}

// SetDefaultStatus sets the DefaultStatus field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TopicPreference) SetDefaultStatus(defaultStatus v3.PreferenceStatus) {
	t.DefaultStatus = defaultStatus
	t.require(topicPreferenceFieldDefaultStatus)
}

// SetHasCustomRouting sets the HasCustomRouting field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TopicPreference) SetHasCustomRouting(hasCustomRouting *bool) {
	t.HasCustomRouting = hasCustomRouting
	t.require(topicPreferenceFieldHasCustomRouting)
}

// SetStatus sets the Status field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TopicPreference) SetStatus(status v3.PreferenceStatus) {
	t.Status = status
	t.require(topicPreferenceFieldStatus)
}

// SetTopicId sets the TopicId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TopicPreference) SetTopicId(topicId string) {
	t.TopicId = topicId
	t.require(topicPreferenceFieldTopicId)
}

// SetTopicName sets the TopicName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TopicPreference) SetTopicName(topicName string) {
	t.TopicName = topicName
	t.require(topicPreferenceFieldTopicName)
}

func (t *TopicPreference) UnmarshalJSON(data []byte) error {
	type unmarshaler TopicPreference
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TopicPreference(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TopicPreference) MarshalJSON() ([]byte, error) {
	type embed TopicPreference
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TopicPreference) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	topicPreferenceUpdateFieldStatus           = big.NewInt(1 << 0)
	topicPreferenceUpdateFieldCustomRouting    = big.NewInt(1 << 1)
	topicPreferenceUpdateFieldHasCustomRouting = big.NewInt(1 << 2)
)

type TopicPreferenceUpdate struct {
	Status v3.PreferenceStatus `json:"status" url:"status"`
	// The Channels a user has chosen to receive notifications through for this topic
	CustomRouting    []v3.ChannelClassification `json:"custom_routing,omitempty" url:"custom_routing,omitempty"`
	HasCustomRouting *bool                      `json:"has_custom_routing,omitempty" url:"has_custom_routing,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TopicPreferenceUpdate) GetStatus() v3.PreferenceStatus {
	if t == nil {
		return ""
	}
	return t.Status
}

func (t *TopicPreferenceUpdate) GetCustomRouting() []v3.ChannelClassification {
	if t == nil {
		return nil
	}
	return t.CustomRouting
}

func (t *TopicPreferenceUpdate) GetHasCustomRouting() *bool {
	if t == nil {
		return nil
	}
	return t.HasCustomRouting
}

func (t *TopicPreferenceUpdate) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TopicPreferenceUpdate) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetStatus sets the Status field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TopicPreferenceUpdate) SetStatus(status v3.PreferenceStatus) {
	t.Status = status
	t.require(topicPreferenceUpdateFieldStatus)
}

// SetCustomRouting sets the CustomRouting field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TopicPreferenceUpdate) SetCustomRouting(customRouting []v3.ChannelClassification) {
	t.CustomRouting = customRouting
	t.require(topicPreferenceUpdateFieldCustomRouting)
}

// SetHasCustomRouting sets the HasCustomRouting field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TopicPreferenceUpdate) SetHasCustomRouting(hasCustomRouting *bool) {
	t.HasCustomRouting = hasCustomRouting
	t.require(topicPreferenceUpdateFieldHasCustomRouting)
}

func (t *TopicPreferenceUpdate) UnmarshalJSON(data []byte) error {
	type unmarshaler TopicPreferenceUpdate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TopicPreferenceUpdate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TopicPreferenceUpdate) MarshalJSON() ([]byte, error) {
	type embed TopicPreferenceUpdate
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TopicPreferenceUpdate) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	userPreferencesGetResponseFieldTopic = big.NewInt(1 << 0)
)

type UserPreferencesGetResponse struct {
	Topic *TopicPreference `json:"topic" url:"topic"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserPreferencesGetResponse) GetTopic() *TopicPreference {
	if u == nil {
		return nil
	}
	return u.Topic
}

func (u *UserPreferencesGetResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserPreferencesGetResponse) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetTopic sets the Topic field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserPreferencesGetResponse) SetTopic(topic *TopicPreference) {
	u.Topic = topic
	u.require(userPreferencesGetResponseFieldTopic)
}

func (u *UserPreferencesGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UserPreferencesGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserPreferencesGetResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserPreferencesGetResponse) MarshalJSON() ([]byte, error) {
	type embed UserPreferencesGetResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UserPreferencesGetResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

var (
	userPreferencesListResponseFieldPaging = big.NewInt(1 << 0)
	userPreferencesListResponseFieldItems  = big.NewInt(1 << 1)
)

type UserPreferencesListResponse struct {
	// Deprecated - Paging not implemented on this endpoint
	Paging *v3.Paging `json:"paging" url:"paging"`
	// The Preferences associated with the user_id.
	Items []*TopicPreference `json:"items" url:"items"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserPreferencesListResponse) GetPaging() *v3.Paging {
	if u == nil {
		return nil
	}
	return u.Paging
}

func (u *UserPreferencesListResponse) GetItems() []*TopicPreference {
	if u == nil {
		return nil
	}
	return u.Items
}

func (u *UserPreferencesListResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserPreferencesListResponse) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetPaging sets the Paging field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserPreferencesListResponse) SetPaging(paging *v3.Paging) {
	u.Paging = paging
	u.require(userPreferencesListResponseFieldPaging)
}

// SetItems sets the Items field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserPreferencesListResponse) SetItems(items []*TopicPreference) {
	u.Items = items
	u.require(userPreferencesListResponseFieldItems)
}

func (u *UserPreferencesListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UserPreferencesListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserPreferencesListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserPreferencesListResponse) MarshalJSON() ([]byte, error) {
	type embed UserPreferencesListResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UserPreferencesListResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

var (
	userPreferencesUpdateResponseFieldMessage = big.NewInt(1 << 0)
)

type UserPreferencesUpdateResponse struct {
	Message string `json:"message" url:"message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserPreferencesUpdateResponse) GetMessage() string {
	if u == nil {
		return ""
	}
	return u.Message
}

func (u *UserPreferencesUpdateResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserPreferencesUpdateResponse) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserPreferencesUpdateResponse) SetMessage(message string) {
	u.Message = message
	u.require(userPreferencesUpdateResponseFieldMessage)
}

func (u *UserPreferencesUpdateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UserPreferencesUpdateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserPreferencesUpdateResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserPreferencesUpdateResponse) MarshalJSON() ([]byte, error) {
	type embed UserPreferencesUpdateResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UserPreferencesUpdateResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

var (
	userPreferencesUpdateParamsFieldTenantId = big.NewInt(1 << 0)
	userPreferencesUpdateParamsFieldTopic    = big.NewInt(1 << 1)
)

type UserPreferencesUpdateParams struct {
	// Update the preferences of a user for this specific tenant context.
	TenantId *string                `json:"-" url:"tenant_id,omitempty"`
	Topic    *TopicPreferenceUpdate `json:"topic,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (u *UserPreferencesUpdateParams) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetTenantId sets the TenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserPreferencesUpdateParams) SetTenantId(tenantId *string) {
	u.TenantId = tenantId
	u.require(userPreferencesUpdateParamsFieldTenantId)
}

// SetTopic sets the Topic field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserPreferencesUpdateParams) SetTopic(topic *TopicPreferenceUpdate) {
	u.Topic = topic
	u.require(userPreferencesUpdateParamsFieldTopic)
}
