// This file was auto-generated by Fern from our API Definition.

package users

import (
	json "encoding/json"
	fmt "fmt"
	v3 "github.com/trycourier/courier-go/v3"
	core "github.com/trycourier/courier-go/v3/core"
)

type UserPreferencesTopicParams struct {
	// Query the preferences of a user for this specific tenant context.
	TenantId *string `json:"-" url:"tenant_id,omitempty"`
}

type UserPreferencesParams struct {
	// Query the preferences of a user for this specific tenant context.
	TenantId *string `json:"-" url:"tenant_id,omitempty"`
}

type TopicPreference struct {
	// The Channels a user has chosen to receive notifications through for this topic
	CustomRouting    []v3.ChannelClassification `json:"custom_routing,omitempty" url:"custom_routing,omitempty"`
	DefaultStatus    v3.PreferenceStatus        `json:"default_status,omitempty" url:"default_status,omitempty"`
	HasCustomRouting *bool                      `json:"has_custom_routing,omitempty" url:"has_custom_routing,omitempty"`
	Status           v3.PreferenceStatus        `json:"status,omitempty" url:"status,omitempty"`
	TopicId          string                     `json:"topic_id" url:"topic_id"`
	TopicName        string                     `json:"topic_name" url:"topic_name"`

	_rawJSON json.RawMessage
}

func (t *TopicPreference) UnmarshalJSON(data []byte) error {
	type unmarshaler TopicPreference
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TopicPreference(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TopicPreference) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TopicPreferenceUpdate struct {
	Status v3.PreferenceStatus `json:"status,omitempty" url:"status,omitempty"`
	// The Channels a user has chosen to receive notifications through for this topic
	CustomRouting    []v3.ChannelClassification `json:"custom_routing,omitempty" url:"custom_routing,omitempty"`
	HasCustomRouting *bool                      `json:"has_custom_routing,omitempty" url:"has_custom_routing,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TopicPreferenceUpdate) UnmarshalJSON(data []byte) error {
	type unmarshaler TopicPreferenceUpdate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TopicPreferenceUpdate(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TopicPreferenceUpdate) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type UserPreferencesGetResponse struct {
	Topic *TopicPreference `json:"topic,omitempty" url:"topic,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UserPreferencesGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UserPreferencesGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserPreferencesGetResponse(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserPreferencesGetResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserPreferencesListResponse struct {
	// Deprecated - Paging not implemented on this endpoint
	Paging *v3.Paging `json:"paging,omitempty" url:"paging,omitempty"`
	// The Preferences associated with the user_id.
	Items []*TopicPreference `json:"items,omitempty" url:"items,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UserPreferencesListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UserPreferencesListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserPreferencesListResponse(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserPreferencesListResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserPreferencesUpdateResponse struct {
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (u *UserPreferencesUpdateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UserPreferencesUpdateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserPreferencesUpdateResponse(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserPreferencesUpdateResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserPreferencesUpdateParams struct {
	// Update the preferences of a user for this specific tenant context.
	TenantId *string                `json:"-" url:"tenant_id,omitempty"`
	Topic    *TopicPreferenceUpdate `json:"topic,omitempty" url:"topic,omitempty"`
}
