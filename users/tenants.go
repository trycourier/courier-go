// Code generated by Fern. DO NOT EDIT.

package users

import (
	json "encoding/json"
	fmt "fmt"
	v3 "github.com/trycourier/courier-go/v3"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	addUserToSingleTenantsParamsFieldProfile = big.NewInt(1 << 0)
)

type AddUserToSingleTenantsParams struct {
	Profile map[string]interface{} `json:"profile,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (a *AddUserToSingleTenantsParams) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetProfile sets the Profile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddUserToSingleTenantsParams) SetProfile(profile map[string]interface{}) {
	a.Profile = profile
	a.require(addUserToSingleTenantsParamsFieldProfile)
}

var (
	addUserToMultipleTenantsParamsFieldTenants = big.NewInt(1 << 0)
)

type AddUserToMultipleTenantsParams struct {
	Tenants []*v3.UserTenantAssociation `json:"tenants,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (a *AddUserToMultipleTenantsParams) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetTenants sets the Tenants field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddUserToMultipleTenantsParams) SetTenants(tenants []*v3.UserTenantAssociation) {
	a.Tenants = tenants
	a.require(addUserToMultipleTenantsParamsFieldTenants)
}

var (
	listTenantsForUserParamsFieldLimit  = big.NewInt(1 << 0)
	listTenantsForUserParamsFieldCursor = big.NewInt(1 << 1)
)

type ListTenantsForUserParams struct {
	// The number of accounts to return
	// (defaults to 20, maximum value of 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Continue the pagination with the next cursor
	Cursor *string `json:"-" url:"cursor,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (l *ListTenantsForUserParams) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetLimit sets the Limit field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTenantsForUserParams) SetLimit(limit *int) {
	l.Limit = limit
	l.require(listTenantsForUserParamsFieldLimit)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTenantsForUserParams) SetCursor(cursor *string) {
	l.Cursor = cursor
	l.require(listTenantsForUserParamsFieldCursor)
}

// AddUserToSingleTenantsParamsProfile is no longer used for Add a User to a Single Tenant
var (
	addUserToSingleTenantsParamsProfileFieldTitle            = big.NewInt(1 << 0)
	addUserToSingleTenantsParamsProfileFieldEmail            = big.NewInt(1 << 1)
	addUserToSingleTenantsParamsProfileFieldPhoneNumber      = big.NewInt(1 << 2)
	addUserToSingleTenantsParamsProfileFieldLocale           = big.NewInt(1 << 3)
	addUserToSingleTenantsParamsProfileFieldAdditionalFields = big.NewInt(1 << 4)
)

type AddUserToSingleTenantsParamsProfile struct {
	Title string `json:"title" url:"title"`
	// Email Address
	Email string `json:"email" url:"email"`
	// A valid phone number
	PhoneNumber string `json:"phone_number" url:"phone_number"`
	// The user's preferred ISO 639-1 language code.
	Locale string `json:"locale" url:"locale"`
	// Additional provider specific fields may be specified.
	AdditionalFields map[string]interface{} `json:"additional_fields" url:"additional_fields"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddUserToSingleTenantsParamsProfile) GetTitle() string {
	if a == nil {
		return ""
	}
	return a.Title
}

func (a *AddUserToSingleTenantsParamsProfile) GetEmail() string {
	if a == nil {
		return ""
	}
	return a.Email
}

func (a *AddUserToSingleTenantsParamsProfile) GetPhoneNumber() string {
	if a == nil {
		return ""
	}
	return a.PhoneNumber
}

func (a *AddUserToSingleTenantsParamsProfile) GetLocale() string {
	if a == nil {
		return ""
	}
	return a.Locale
}

func (a *AddUserToSingleTenantsParamsProfile) GetAdditionalFields() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.AdditionalFields
}

func (a *AddUserToSingleTenantsParamsProfile) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddUserToSingleTenantsParamsProfile) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetTitle sets the Title field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddUserToSingleTenantsParamsProfile) SetTitle(title string) {
	a.Title = title
	a.require(addUserToSingleTenantsParamsProfileFieldTitle)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddUserToSingleTenantsParamsProfile) SetEmail(email string) {
	a.Email = email
	a.require(addUserToSingleTenantsParamsProfileFieldEmail)
}

// SetPhoneNumber sets the PhoneNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddUserToSingleTenantsParamsProfile) SetPhoneNumber(phoneNumber string) {
	a.PhoneNumber = phoneNumber
	a.require(addUserToSingleTenantsParamsProfileFieldPhoneNumber)
}

// SetLocale sets the Locale field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddUserToSingleTenantsParamsProfile) SetLocale(locale string) {
	a.Locale = locale
	a.require(addUserToSingleTenantsParamsProfileFieldLocale)
}

// SetAdditionalFields sets the AdditionalFields field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddUserToSingleTenantsParamsProfile) SetAdditionalFields(additionalFields map[string]interface{}) {
	a.AdditionalFields = additionalFields
	a.require(addUserToSingleTenantsParamsProfileFieldAdditionalFields)
}

func (a *AddUserToSingleTenantsParamsProfile) UnmarshalJSON(data []byte) error {
	type unmarshaler AddUserToSingleTenantsParamsProfile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddUserToSingleTenantsParamsProfile(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddUserToSingleTenantsParamsProfile) MarshalJSON() ([]byte, error) {
	type embed AddUserToSingleTenantsParamsProfile
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AddUserToSingleTenantsParamsProfile) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	listTenantsForUserResponseFieldItems   = big.NewInt(1 << 0)
	listTenantsForUserResponseFieldHasMore = big.NewInt(1 << 1)
	listTenantsForUserResponseFieldUrl     = big.NewInt(1 << 2)
	listTenantsForUserResponseFieldNextUrl = big.NewInt(1 << 3)
	listTenantsForUserResponseFieldCursor  = big.NewInt(1 << 4)
)

type ListTenantsForUserResponse struct {
	Items []*v3.UserTenantAssociation `json:"items,omitempty" url:"items,omitempty"`
	// Set to true when there are more pages that can be retrieved.
	HasMore bool `json:"has_more" url:"has_more"`
	// A url that may be used to generate these results.
	Url string `json:"url" url:"url"`
	// A url that may be used to generate fetch the next set of results.
	// Defined only when `has_more` is set to true
	NextUrl *string `json:"next_url,omitempty" url:"next_url,omitempty"`
	// A pointer to the next page of results. Defined
	// only when `has_more` is set to true
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Always set to `list`. Represents the type of this object.

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListTenantsForUserResponse) GetItems() []*v3.UserTenantAssociation {
	if l == nil {
		return nil
	}
	return l.Items
}

func (l *ListTenantsForUserResponse) GetHasMore() bool {
	if l == nil {
		return false
	}
	return l.HasMore
}

func (l *ListTenantsForUserResponse) GetUrl() string {
	if l == nil {
		return ""
	}
	return l.Url
}

func (l *ListTenantsForUserResponse) GetNextUrl() *string {
	if l == nil {
		return nil
	}
	return l.NextUrl
}

func (l *ListTenantsForUserResponse) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListTenantsForUserResponse) Type() string {
	return l.type_
}

func (l *ListTenantsForUserResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListTenantsForUserResponse) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetItems sets the Items field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTenantsForUserResponse) SetItems(items []*v3.UserTenantAssociation) {
	l.Items = items
	l.require(listTenantsForUserResponseFieldItems)
}

// SetHasMore sets the HasMore field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTenantsForUserResponse) SetHasMore(hasMore bool) {
	l.HasMore = hasMore
	l.require(listTenantsForUserResponseFieldHasMore)
}

// SetUrl sets the Url field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTenantsForUserResponse) SetUrl(url string) {
	l.Url = url
	l.require(listTenantsForUserResponseFieldUrl)
}

// SetNextUrl sets the NextUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTenantsForUserResponse) SetNextUrl(nextUrl *string) {
	l.NextUrl = nextUrl
	l.require(listTenantsForUserResponseFieldNextUrl)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListTenantsForUserResponse) SetCursor(cursor *string) {
	l.Cursor = cursor
	l.require(listTenantsForUserResponseFieldCursor)
}

func (l *ListTenantsForUserResponse) UnmarshalJSON(data []byte) error {
	type embed ListTenantsForUserResponse
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*l),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*l = ListTenantsForUserResponse(unmarshaler.embed)
	if unmarshaler.Type != "list" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", l, "list", unmarshaler.Type)
	}
	l.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *l, "type")
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListTenantsForUserResponse) MarshalJSON() ([]byte, error) {
	type embed ListTenantsForUserResponse
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*l),
		Type:  "list",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListTenantsForUserResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
