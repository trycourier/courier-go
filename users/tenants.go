// This file was auto-generated by Fern from our API Definition.

package users

import (
	json "encoding/json"
	fmt "fmt"
	v3 "github.com/trycourier/courier-go/v3"
	core "github.com/trycourier/courier-go/v3/core"
)

type AddUserToSingleTenantsParams struct {
	Profile *AddUserToSingleTenantsParamsProfile `json:"profile,omitempty"`
}

type AddUserToMultipleTenantsParams struct {
	Tenants []*v3.UserTenantAssociation `json:"tenants,omitempty"`
}

type ListTenantsForUserParams struct {
	// The number of accounts to return
	// (defaults to 20, maximum value of 100)
	Limit *int `json:"-"`
	// Value of next_page from previous response
	StartingAfter *int `json:"-"`
}

type AddUserToSingleTenantsParamsProfile struct {
	Title string `json:"title"`
	// Email Address
	Email string `json:"email"`
	// A valid phone number
	PhoneNumber string `json:"phone_number"`
	// The user's preferred ISO 639-1 language code.
	Locale string `json:"locale"`
	// Additional provider specific fields may be specified.
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AddUserToSingleTenantsParamsProfile) UnmarshalJSON(data []byte) error {
	type unmarshaler AddUserToSingleTenantsParamsProfile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddUserToSingleTenantsParamsProfile(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddUserToSingleTenantsParamsProfile) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ListTenantsForUserResponse struct {
	Items *v3.UserTenantAssociation `json:"items,omitempty"`
	// Set to true when there are more pages that can be retrieved.
	HasMore bool `json:"has_more"`
	// A url that may be used to generate these results.
	Url string `json:"url"`
	// A url that may be used to generate fetch the next set of results.
	// Defined only when `has_more` is set to true
	NextUrl *string `json:"next_url,omitempty"`
	// A pointer to the next page of results. Defined
	// only when `has_more` is set to true
	Cursor *string `json:"cursor,omitempty"`
	// Always set to `list`. Represents the type of this object.
	type_ string

	_rawJSON json.RawMessage
}

func (l *ListTenantsForUserResponse) Type() string {
	return l.type_
}

func (l *ListTenantsForUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListTenantsForUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListTenantsForUserResponse(value)
	l.type_ = "list"
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListTenantsForUserResponse) MarshalJSON() ([]byte, error) {
	type embed ListTenantsForUserResponse
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*l),
		Type:  "list",
	}
	return json.Marshal(marshaler)
}

func (l *ListTenantsForUserResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
