// This file was auto-generated by Fern from our API Definition.

package users

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/trycourier/courier-go/v3/core"
)

// AddUserToSingleTenantsParamsProfile is no longer used for Add a User to a Single Tenant
type AddUserToSingleTenantsParamsProfile struct {
	Title string `json:"title" url:"title"`
	// Email Address
	Email string `json:"email" url:"email"`
	// A valid phone number
	PhoneNumber string `json:"phone_number" url:"phone_number"`
	// The user's preferred ISO 639-1 language code.
	Locale string `json:"locale" url:"locale"`
	// Additional provider specific fields may be specified.
	AdditionalFields map[string]interface{} `json:"additional_fields,omitempty" url:"additional_fields,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AddUserToSingleTenantsParamsProfile) UnmarshalJSON(data []byte) error {
	type unmarshaler AddUserToSingleTenantsParamsProfile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddUserToSingleTenantsParamsProfile(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddUserToSingleTenantsParamsProfile) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type DeleteUserTokenOpts struct {
	UserId string `json:"user_id" url:"user_id"`
	Token  string `json:"token" url:"token"`

	_rawJSON json.RawMessage
}

func (d *DeleteUserTokenOpts) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteUserTokenOpts
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteUserTokenOpts(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteUserTokenOpts) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetUserTokenOpts struct {
	UserId string `json:"user_id" url:"user_id"`
	Token  string `json:"token" url:"token"`

	_rawJSON json.RawMessage
}

func (g *GetUserTokenOpts) UnmarshalJSON(data []byte) error {
	type unmarshaler GetUserTokenOpts
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetUserTokenOpts(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetUserTokenOpts) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetUserTokensOpts struct {
	UserId string `json:"user_id" url:"user_id"`

	_rawJSON json.RawMessage
}

func (g *GetUserTokensOpts) UnmarshalJSON(data []byte) error {
	type unmarshaler GetUserTokensOpts
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetUserTokensOpts(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetUserTokensOpts) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type PatchOp string

const (
	PatchOpReplace PatchOp = "replace"
	PatchOpAdd     PatchOp = "add"
	PatchOpRemove  PatchOp = "remove"
	PatchOpCopy    PatchOp = "copy"
	PatchOpMove    PatchOp = "move"
	PatchOpTest    PatchOp = "test"
)

func NewPatchOpFromString(s string) (PatchOp, error) {
	switch s {
	case "replace":
		return PatchOpReplace, nil
	case "add":
		return PatchOpAdd, nil
	case "remove":
		return PatchOpRemove, nil
	case "copy":
		return PatchOpCopy, nil
	case "move":
		return PatchOpMove, nil
	case "test":
		return PatchOpTest, nil
	}
	var t PatchOp
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PatchOp) Ptr() *PatchOp {
	return &p
}

type PutUserTokenOpts struct {
	UserId string     `json:"user_id" url:"user_id"`
	Token  *UserToken `json:"token,omitempty" url:"token,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PutUserTokenOpts) UnmarshalJSON(data []byte) error {
	type unmarshaler PutUserTokenOpts
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PutUserTokenOpts(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PutUserTokenOpts) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PutUserTokensOpts struct {
	UserId string       `json:"user_id" url:"user_id"`
	Tokens []*UserToken `json:"tokens,omitempty" url:"tokens,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PutUserTokensOpts) UnmarshalJSON(data []byte) error {
	type unmarshaler PutUserTokensOpts
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PutUserTokensOpts(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PutUserTokensOpts) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
