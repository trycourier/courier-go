// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	getMessageHistoryRequestFieldType = big.NewInt(1 << 0)
)

type GetMessageHistoryRequest struct {
	// A supported Message History type that will filter the events returned.
	Type *string `json:"-" url:"type,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetMessageHistoryRequest) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetMessageHistoryRequest) SetType(type_ *string) {
	g.Type = type_
	g.require(getMessageHistoryRequestFieldType)
}

var (
	listMessagesRequestFieldArchived      = big.NewInt(1 << 0)
	listMessagesRequestFieldCursor        = big.NewInt(1 << 1)
	listMessagesRequestFieldEvent         = big.NewInt(1 << 2)
	listMessagesRequestFieldList          = big.NewInt(1 << 3)
	listMessagesRequestFieldMessageId     = big.NewInt(1 << 4)
	listMessagesRequestFieldNotification  = big.NewInt(1 << 5)
	listMessagesRequestFieldProvider      = big.NewInt(1 << 6)
	listMessagesRequestFieldRecipient     = big.NewInt(1 << 7)
	listMessagesRequestFieldStatus        = big.NewInt(1 << 8)
	listMessagesRequestFieldTag           = big.NewInt(1 << 9)
	listMessagesRequestFieldTags          = big.NewInt(1 << 10)
	listMessagesRequestFieldTenantId      = big.NewInt(1 << 11)
	listMessagesRequestFieldEnqueuedAfter = big.NewInt(1 << 12)
	listMessagesRequestFieldTraceId       = big.NewInt(1 << 13)
)

type ListMessagesRequest struct {
	// A boolean value that indicates whether archived messages should be included in the response.
	Archived *bool `json:"-" url:"archived,omitempty"`
	// A unique identifier that allows for fetching the next set of messages.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// A unique identifier representing the event that was used to send the event.
	Event *string `json:"-" url:"event,omitempty"`
	// A unique identifier representing the list the message was sent to.
	List *string `json:"-" url:"list,omitempty"`
	// A unique identifier representing the message_id returned from either /send or /send/list.
	MessageId *string `json:"-" url:"messageId,omitempty"`
	// A unique identifier representing the notification that was used to send the event.
	Notification *string `json:"-" url:"notification,omitempty"`
	// The key assocated to the provider you want to filter on. E.g., sendgrid, inbox, twilio, slack, msteams, etc. Allows multiple values to be set in query parameters.
	Provider []*string `json:"-" url:"provider,omitempty"`
	// A unique identifier representing the recipient associated with the requested profile.
	Recipient *string `json:"-" url:"recipient,omitempty"`
	// An indicator of the current status of the message. Allows multiple values to be set in query parameters.
	Status []*string `json:"-" url:"status,omitempty"`
	// A tag placed in the metadata.tags during a notification send. Allows multiple values to be set in query parameters.
	Tag []*string `json:"-" url:"tag,omitempty"`
	// A comma delimited list of 'tags'. Messages will be returned if they match any of the tags passed in.
	Tags *string `json:"-" url:"tags,omitempty"`
	// Messages sent with the context of a Tenant
	TenantId *string `json:"-" url:"tenant_id,omitempty"`
	// The enqueued datetime of a message to filter out messages received before.
	EnqueuedAfter *string `json:"-" url:"enqueued_after,omitempty"`
	// The unique identifier used to trace the requests
	TraceId *string `json:"-" url:"traceId,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (l *ListMessagesRequest) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetArchived sets the Archived field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesRequest) SetArchived(archived *bool) {
	l.Archived = archived
	l.require(listMessagesRequestFieldArchived)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesRequest) SetCursor(cursor *string) {
	l.Cursor = cursor
	l.require(listMessagesRequestFieldCursor)
}

// SetEvent sets the Event field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesRequest) SetEvent(event *string) {
	l.Event = event
	l.require(listMessagesRequestFieldEvent)
}

// SetList sets the List field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesRequest) SetList(list *string) {
	l.List = list
	l.require(listMessagesRequestFieldList)
}

// SetMessageId sets the MessageId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesRequest) SetMessageId(messageId *string) {
	l.MessageId = messageId
	l.require(listMessagesRequestFieldMessageId)
}

// SetNotification sets the Notification field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesRequest) SetNotification(notification *string) {
	l.Notification = notification
	l.require(listMessagesRequestFieldNotification)
}

// SetProvider sets the Provider field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesRequest) SetProvider(provider []*string) {
	l.Provider = provider
	l.require(listMessagesRequestFieldProvider)
}

// SetRecipient sets the Recipient field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesRequest) SetRecipient(recipient *string) {
	l.Recipient = recipient
	l.require(listMessagesRequestFieldRecipient)
}

// SetStatus sets the Status field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesRequest) SetStatus(status []*string) {
	l.Status = status
	l.require(listMessagesRequestFieldStatus)
}

// SetTag sets the Tag field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesRequest) SetTag(tag []*string) {
	l.Tag = tag
	l.require(listMessagesRequestFieldTag)
}

// SetTags sets the Tags field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesRequest) SetTags(tags *string) {
	l.Tags = tags
	l.require(listMessagesRequestFieldTags)
}

// SetTenantId sets the TenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesRequest) SetTenantId(tenantId *string) {
	l.TenantId = tenantId
	l.require(listMessagesRequestFieldTenantId)
}

// SetEnqueuedAfter sets the EnqueuedAfter field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesRequest) SetEnqueuedAfter(enqueuedAfter *string) {
	l.EnqueuedAfter = enqueuedAfter
	l.require(listMessagesRequestFieldEnqueuedAfter)
}

// SetTraceId sets the TraceId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesRequest) SetTraceId(traceId *string) {
	l.TraceId = traceId
	l.require(listMessagesRequestFieldTraceId)
}

var (
	listMessagesResponseFieldPaging  = big.NewInt(1 << 0)
	listMessagesResponseFieldResults = big.NewInt(1 << 1)
)

type ListMessagesResponse struct {
	// Paging information for the result set.
	Paging *Paging `json:"paging" url:"paging"`
	// An array of messages with their details.
	Results []*MessageDetails `json:"results" url:"results"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListMessagesResponse) GetPaging() *Paging {
	if l == nil {
		return nil
	}
	return l.Paging
}

func (l *ListMessagesResponse) GetResults() []*MessageDetails {
	if l == nil {
		return nil
	}
	return l.Results
}

func (l *ListMessagesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListMessagesResponse) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetPaging sets the Paging field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesResponse) SetPaging(paging *Paging) {
	l.Paging = paging
	l.require(listMessagesResponseFieldPaging)
}

// SetResults sets the Results field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListMessagesResponse) SetResults(results []*MessageDetails) {
	l.Results = results
	l.require(listMessagesResponseFieldResults)
}

func (l *ListMessagesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListMessagesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListMessagesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListMessagesResponse) MarshalJSON() ([]byte, error) {
	type embed ListMessagesResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListMessagesResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	messageDetailsFieldId           = big.NewInt(1 << 0)
	messageDetailsFieldStatus       = big.NewInt(1 << 1)
	messageDetailsFieldEnqueued     = big.NewInt(1 << 2)
	messageDetailsFieldSent         = big.NewInt(1 << 3)
	messageDetailsFieldDelivered    = big.NewInt(1 << 4)
	messageDetailsFieldOpened       = big.NewInt(1 << 5)
	messageDetailsFieldClicked      = big.NewInt(1 << 6)
	messageDetailsFieldRecipient    = big.NewInt(1 << 7)
	messageDetailsFieldEvent        = big.NewInt(1 << 8)
	messageDetailsFieldNotification = big.NewInt(1 << 9)
	messageDetailsFieldError        = big.NewInt(1 << 10)
	messageDetailsFieldReason       = big.NewInt(1 << 11)
)

type MessageDetails struct {
	// A unique identifier associated with the message you wish to retrieve (results from a send).
	Id string `json:"id" url:"id"`
	// The current status of the message.
	Status MessageStatus `json:"status" url:"status"`
	// A UTC timestamp at which Courier received the message request. Stored as a millisecond representation of the Unix epoch.
	Enqueued int64 `json:"enqueued" url:"enqueued"`
	// A UTC timestamp at which Courier passed the message to the Integration provider. Stored as a millisecond representation of the Unix epoch.
	Sent int64 `json:"sent" url:"sent"`
	// A UTC timestamp at which the Integration provider delivered the message. Stored as a millisecond representation of the Unix epoch.
	Delivered int64 `json:"delivered" url:"delivered"`
	// A UTC timestamp at which the recipient opened a message for the first time. Stored as a millisecond representation of the Unix epoch.
	Opened int64 `json:"opened" url:"opened"`
	// A UTC timestamp at which the recipient clicked on a tracked link for the first time. Stored as a millisecond representation of the Unix epoch.
	Clicked int64 `json:"clicked" url:"clicked"`
	// A unique identifier associated with the recipient of the delivered message.
	Recipient string `json:"recipient" url:"recipient"`
	// A unique identifier associated with the event of the delivered message.
	Event string `json:"event" url:"event"`
	// A unique identifier associated with the notification of the delivered message.
	Notification string `json:"notification" url:"notification"`
	// A message describing the error that occurred.
	Error *string `json:"error,omitempty" url:"error,omitempty"`
	// The reason for the current status of the message.
	Reason *Reason `json:"reason,omitempty" url:"reason,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MessageDetails) GetId() string {
	if m == nil {
		return ""
	}
	return m.Id
}

func (m *MessageDetails) GetStatus() MessageStatus {
	if m == nil {
		return ""
	}
	return m.Status
}

func (m *MessageDetails) GetEnqueued() int64 {
	if m == nil {
		return 0
	}
	return m.Enqueued
}

func (m *MessageDetails) GetSent() int64 {
	if m == nil {
		return 0
	}
	return m.Sent
}

func (m *MessageDetails) GetDelivered() int64 {
	if m == nil {
		return 0
	}
	return m.Delivered
}

func (m *MessageDetails) GetOpened() int64 {
	if m == nil {
		return 0
	}
	return m.Opened
}

func (m *MessageDetails) GetClicked() int64 {
	if m == nil {
		return 0
	}
	return m.Clicked
}

func (m *MessageDetails) GetRecipient() string {
	if m == nil {
		return ""
	}
	return m.Recipient
}

func (m *MessageDetails) GetEvent() string {
	if m == nil {
		return ""
	}
	return m.Event
}

func (m *MessageDetails) GetNotification() string {
	if m == nil {
		return ""
	}
	return m.Notification
}

func (m *MessageDetails) GetError() *string {
	if m == nil {
		return nil
	}
	return m.Error
}

func (m *MessageDetails) GetReason() *Reason {
	if m == nil {
		return nil
	}
	return m.Reason
}

func (m *MessageDetails) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MessageDetails) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetails) SetId(id string) {
	m.Id = id
	m.require(messageDetailsFieldId)
}

// SetStatus sets the Status field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetails) SetStatus(status MessageStatus) {
	m.Status = status
	m.require(messageDetailsFieldStatus)
}

// SetEnqueued sets the Enqueued field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetails) SetEnqueued(enqueued int64) {
	m.Enqueued = enqueued
	m.require(messageDetailsFieldEnqueued)
}

// SetSent sets the Sent field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetails) SetSent(sent int64) {
	m.Sent = sent
	m.require(messageDetailsFieldSent)
}

// SetDelivered sets the Delivered field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetails) SetDelivered(delivered int64) {
	m.Delivered = delivered
	m.require(messageDetailsFieldDelivered)
}

// SetOpened sets the Opened field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetails) SetOpened(opened int64) {
	m.Opened = opened
	m.require(messageDetailsFieldOpened)
}

// SetClicked sets the Clicked field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetails) SetClicked(clicked int64) {
	m.Clicked = clicked
	m.require(messageDetailsFieldClicked)
}

// SetRecipient sets the Recipient field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetails) SetRecipient(recipient string) {
	m.Recipient = recipient
	m.require(messageDetailsFieldRecipient)
}

// SetEvent sets the Event field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetails) SetEvent(event string) {
	m.Event = event
	m.require(messageDetailsFieldEvent)
}

// SetNotification sets the Notification field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetails) SetNotification(notification string) {
	m.Notification = notification
	m.require(messageDetailsFieldNotification)
}

// SetError sets the Error field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetails) SetError(error_ *string) {
	m.Error = error_
	m.require(messageDetailsFieldError)
}

// SetReason sets the Reason field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetails) SetReason(reason *Reason) {
	m.Reason = reason
	m.require(messageDetailsFieldReason)
}

func (m *MessageDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler MessageDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MessageDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MessageDetails) MarshalJSON() ([]byte, error) {
	type embed MessageDetails
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MessageDetails) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

var (
	messageDetailsExtendedFieldId           = big.NewInt(1 << 0)
	messageDetailsExtendedFieldStatus       = big.NewInt(1 << 1)
	messageDetailsExtendedFieldEnqueued     = big.NewInt(1 << 2)
	messageDetailsExtendedFieldSent         = big.NewInt(1 << 3)
	messageDetailsExtendedFieldDelivered    = big.NewInt(1 << 4)
	messageDetailsExtendedFieldOpened       = big.NewInt(1 << 5)
	messageDetailsExtendedFieldClicked      = big.NewInt(1 << 6)
	messageDetailsExtendedFieldRecipient    = big.NewInt(1 << 7)
	messageDetailsExtendedFieldEvent        = big.NewInt(1 << 8)
	messageDetailsExtendedFieldNotification = big.NewInt(1 << 9)
	messageDetailsExtendedFieldError        = big.NewInt(1 << 10)
	messageDetailsExtendedFieldReason       = big.NewInt(1 << 11)
	messageDetailsExtendedFieldProviders    = big.NewInt(1 << 12)
)

type MessageDetailsExtended struct {
	// A unique identifier associated with the message you wish to retrieve (results from a send).
	Id string `json:"id" url:"id"`
	// The current status of the message.
	Status MessageStatus `json:"status" url:"status"`
	// A UTC timestamp at which Courier received the message request. Stored as a millisecond representation of the Unix epoch.
	Enqueued int64 `json:"enqueued" url:"enqueued"`
	// A UTC timestamp at which Courier passed the message to the Integration provider. Stored as a millisecond representation of the Unix epoch.
	Sent int64 `json:"sent" url:"sent"`
	// A UTC timestamp at which the Integration provider delivered the message. Stored as a millisecond representation of the Unix epoch.
	Delivered int64 `json:"delivered" url:"delivered"`
	// A UTC timestamp at which the recipient opened a message for the first time. Stored as a millisecond representation of the Unix epoch.
	Opened int64 `json:"opened" url:"opened"`
	// A UTC timestamp at which the recipient clicked on a tracked link for the first time. Stored as a millisecond representation of the Unix epoch.
	Clicked int64 `json:"clicked" url:"clicked"`
	// A unique identifier associated with the recipient of the delivered message.
	Recipient string `json:"recipient" url:"recipient"`
	// A unique identifier associated with the event of the delivered message.
	Event string `json:"event" url:"event"`
	// A unique identifier associated with the notification of the delivered message.
	Notification string `json:"notification" url:"notification"`
	// A message describing the error that occurred.
	Error *string `json:"error,omitempty" url:"error,omitempty"`
	// The reason for the current status of the message.
	Reason    *Reason                  `json:"reason,omitempty" url:"reason,omitempty"`
	Providers []map[string]interface{} `json:"providers,omitempty" url:"providers,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MessageDetailsExtended) GetId() string {
	if m == nil {
		return ""
	}
	return m.Id
}

func (m *MessageDetailsExtended) GetStatus() MessageStatus {
	if m == nil {
		return ""
	}
	return m.Status
}

func (m *MessageDetailsExtended) GetEnqueued() int64 {
	if m == nil {
		return 0
	}
	return m.Enqueued
}

func (m *MessageDetailsExtended) GetSent() int64 {
	if m == nil {
		return 0
	}
	return m.Sent
}

func (m *MessageDetailsExtended) GetDelivered() int64 {
	if m == nil {
		return 0
	}
	return m.Delivered
}

func (m *MessageDetailsExtended) GetOpened() int64 {
	if m == nil {
		return 0
	}
	return m.Opened
}

func (m *MessageDetailsExtended) GetClicked() int64 {
	if m == nil {
		return 0
	}
	return m.Clicked
}

func (m *MessageDetailsExtended) GetRecipient() string {
	if m == nil {
		return ""
	}
	return m.Recipient
}

func (m *MessageDetailsExtended) GetEvent() string {
	if m == nil {
		return ""
	}
	return m.Event
}

func (m *MessageDetailsExtended) GetNotification() string {
	if m == nil {
		return ""
	}
	return m.Notification
}

func (m *MessageDetailsExtended) GetError() *string {
	if m == nil {
		return nil
	}
	return m.Error
}

func (m *MessageDetailsExtended) GetReason() *Reason {
	if m == nil {
		return nil
	}
	return m.Reason
}

func (m *MessageDetailsExtended) GetProviders() []map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Providers
}

func (m *MessageDetailsExtended) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MessageDetailsExtended) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetailsExtended) SetId(id string) {
	m.Id = id
	m.require(messageDetailsExtendedFieldId)
}

// SetStatus sets the Status field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetailsExtended) SetStatus(status MessageStatus) {
	m.Status = status
	m.require(messageDetailsExtendedFieldStatus)
}

// SetEnqueued sets the Enqueued field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetailsExtended) SetEnqueued(enqueued int64) {
	m.Enqueued = enqueued
	m.require(messageDetailsExtendedFieldEnqueued)
}

// SetSent sets the Sent field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetailsExtended) SetSent(sent int64) {
	m.Sent = sent
	m.require(messageDetailsExtendedFieldSent)
}

// SetDelivered sets the Delivered field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetailsExtended) SetDelivered(delivered int64) {
	m.Delivered = delivered
	m.require(messageDetailsExtendedFieldDelivered)
}

// SetOpened sets the Opened field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetailsExtended) SetOpened(opened int64) {
	m.Opened = opened
	m.require(messageDetailsExtendedFieldOpened)
}

// SetClicked sets the Clicked field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetailsExtended) SetClicked(clicked int64) {
	m.Clicked = clicked
	m.require(messageDetailsExtendedFieldClicked)
}

// SetRecipient sets the Recipient field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetailsExtended) SetRecipient(recipient string) {
	m.Recipient = recipient
	m.require(messageDetailsExtendedFieldRecipient)
}

// SetEvent sets the Event field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetailsExtended) SetEvent(event string) {
	m.Event = event
	m.require(messageDetailsExtendedFieldEvent)
}

// SetNotification sets the Notification field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetailsExtended) SetNotification(notification string) {
	m.Notification = notification
	m.require(messageDetailsExtendedFieldNotification)
}

// SetError sets the Error field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetailsExtended) SetError(error_ *string) {
	m.Error = error_
	m.require(messageDetailsExtendedFieldError)
}

// SetReason sets the Reason field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetailsExtended) SetReason(reason *Reason) {
	m.Reason = reason
	m.require(messageDetailsExtendedFieldReason)
}

// SetProviders sets the Providers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageDetailsExtended) SetProviders(providers []map[string]interface{}) {
	m.Providers = providers
	m.require(messageDetailsExtendedFieldProviders)
}

func (m *MessageDetailsExtended) UnmarshalJSON(data []byte) error {
	type unmarshaler MessageDetailsExtended
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MessageDetailsExtended(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MessageDetailsExtended) MarshalJSON() ([]byte, error) {
	type embed MessageDetailsExtended
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MessageDetailsExtended) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

var (
	messageHistoryResponseFieldResults = big.NewInt(1 << 0)
)

type MessageHistoryResponse struct {
	Results []map[string]interface{} `json:"results" url:"results"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MessageHistoryResponse) GetResults() []map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Results
}

func (m *MessageHistoryResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MessageHistoryResponse) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetResults sets the Results field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageHistoryResponse) SetResults(results []map[string]interface{}) {
	m.Results = results
	m.require(messageHistoryResponseFieldResults)
}

func (m *MessageHistoryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MessageHistoryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MessageHistoryResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MessageHistoryResponse) MarshalJSON() ([]byte, error) {
	type embed MessageHistoryResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MessageHistoryResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MessageStatus string

const (
	// The message has been canceled such that it will not be delivered.
	MessageStatusCanceled MessageStatus = "CANCELED"
	// The recipient has clicked on any link in the message at least one time.
	MessageStatusClicked MessageStatus = "CLICKED"
	// The message has been delayed and will be attempted for delivery at a later time.
	MessageStatusDelayed MessageStatus = "DELAYED"
	// The provider successfully delivered the message to the recipient.
	MessageStatusDelivered MessageStatus = "DELIVERED"
	// The message has been aggregated into a digest and will be sent according to digest rules.
	MessageStatusDigested MessageStatus = "DIGESTED"
	// The request has been received to send a message, is waiting in the work queue.
	MessageStatusEnqueued MessageStatus = "ENQUEUED"
	// The message was filtered out based on configured rules or preferences.
	MessageStatusFiltered MessageStatus = "FILTERED"
	// The recipient has opened the message at least one time.
	MessageStatusOpened MessageStatus = "OPENED"
	// The message has been successfully routed to a specific channel or provider.
	MessageStatusRouted MessageStatus = "ROUTED"
	// The message has been accepted by the provider.
	MessageStatusSent MessageStatus = "SENT"
	// The message was sent with a mock key and Courier simulated the message lifecycle without sending to the downstream provider.
	MessageStatusSimulated MessageStatus = "SIMULATED"
	// The message was throttled by Courier.
	MessageStatusThrottled MessageStatus = "THROTTLED"
	// The message could not be delivered to at least one provider, or the provider could not deliver the message to the recipient. This can happen for multiple reasons: an error, insufficient profile data, invalid notification setup, invalid integration configuration, etc.
	MessageStatusUndeliverable MessageStatus = "UNDELIVERABLE"
	// Could not find a corresponding notification or event for the messages.
	MessageStatusUnmapped MessageStatus = "UNMAPPED"
	// The message could not be routed to any channel or provider. This can happen for multiple reasons: insufficient profile data, invalid notification setup, invalid integration configuration, etc.
	MessageStatusUnroutable MessageStatus = "UNROUTABLE"
)

func NewMessageStatusFromString(s string) (MessageStatus, error) {
	switch s {
	case "CANCELED":
		return MessageStatusCanceled, nil
	case "CLICKED":
		return MessageStatusClicked, nil
	case "DELAYED":
		return MessageStatusDelayed, nil
	case "DELIVERED":
		return MessageStatusDelivered, nil
	case "DIGESTED":
		return MessageStatusDigested, nil
	case "ENQUEUED":
		return MessageStatusEnqueued, nil
	case "FILTERED":
		return MessageStatusFiltered, nil
	case "OPENED":
		return MessageStatusOpened, nil
	case "ROUTED":
		return MessageStatusRouted, nil
	case "SENT":
		return MessageStatusSent, nil
	case "SIMULATED":
		return MessageStatusSimulated, nil
	case "THROTTLED":
		return MessageStatusThrottled, nil
	case "UNDELIVERABLE":
		return MessageStatusUndeliverable, nil
	case "UNMAPPED":
		return MessageStatusUnmapped, nil
	case "UNROUTABLE":
		return MessageStatusUnroutable, nil
	}
	var t MessageStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MessageStatus) Ptr() *MessageStatus {
	return &m
}

type Reason string

const (
	// The message bounced and was not delivered.
	ReasonBounced Reason = "BOUNCED"
	// The message failed to be delivered.
	ReasonFailed Reason = "FAILED"
	// The recipient did not receive the notification because of a condition that passed.
	ReasonFiltered Reason = "FILTERED"
	// The notification did not contain any valid channels.
	ReasonNoChannels Reason = "NO_CHANNELS"
	// The notification did not contain a configured provider for a channel.
	ReasonNoProviders Reason = "NO_PROVIDERS"
	// The recipient has not opted in to receive this type of notification.
	ReasonOptInRequired Reason = "OPT_IN_REQUIRED"
	// The Integration provider had an error when sending a notification.
	ReasonProviderError Reason = "PROVIDER_ERROR"
	// The notification hasn't been published yet.
	ReasonUnpublished Reason = "UNPUBLISHED"
	// The recipient did not receive the notification because they chose to unsubscribe from it.
	ReasonUnsubscribed Reason = "UNSUBSCRIBED"
)

func NewReasonFromString(s string) (Reason, error) {
	switch s {
	case "BOUNCED":
		return ReasonBounced, nil
	case "FAILED":
		return ReasonFailed, nil
	case "FILTERED":
		return ReasonFiltered, nil
	case "NO_CHANNELS":
		return ReasonNoChannels, nil
	case "NO_PROVIDERS":
		return ReasonNoProviders, nil
	case "OPT_IN_REQUIRED":
		return ReasonOptInRequired, nil
	case "PROVIDER_ERROR":
		return ReasonProviderError, nil
	case "UNPUBLISHED":
		return ReasonUnpublished, nil
	case "UNSUBSCRIBED":
		return ReasonUnsubscribed, nil
	}
	var t Reason
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r Reason) Ptr() *Reason {
	return &r
}

var (
	renderOutputFieldChannel   = big.NewInt(1 << 0)
	renderOutputFieldChannelId = big.NewInt(1 << 1)
	renderOutputFieldContent   = big.NewInt(1 << 2)
)

type RenderOutput struct {
	// The channel used for rendering the message.
	Channel string `json:"channel" url:"channel"`
	// The ID of channel used for rendering the message.
	ChannelId string `json:"channel_id" url:"channel_id"`
	// Content details of the rendered message.
	Content *RenderedMessageContent `json:"content" url:"content"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RenderOutput) GetChannel() string {
	if r == nil {
		return ""
	}
	return r.Channel
}

func (r *RenderOutput) GetChannelId() string {
	if r == nil {
		return ""
	}
	return r.ChannelId
}

func (r *RenderOutput) GetContent() *RenderedMessageContent {
	if r == nil {
		return nil
	}
	return r.Content
}

func (r *RenderOutput) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RenderOutput) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetChannel sets the Channel field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RenderOutput) SetChannel(channel string) {
	r.Channel = channel
	r.require(renderOutputFieldChannel)
}

// SetChannelId sets the ChannelId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RenderOutput) SetChannelId(channelId string) {
	r.ChannelId = channelId
	r.require(renderOutputFieldChannelId)
}

// SetContent sets the Content field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RenderOutput) SetContent(content *RenderedMessageContent) {
	r.Content = content
	r.require(renderOutputFieldContent)
}

func (r *RenderOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler RenderOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RenderOutput(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RenderOutput) MarshalJSON() ([]byte, error) {
	type embed RenderOutput
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *RenderOutput) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

var (
	renderOutputResponseFieldResults = big.NewInt(1 << 0)
)

type RenderOutputResponse struct {
	// An array of render output of a previously sent message.
	Results []*RenderOutput `json:"results" url:"results"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RenderOutputResponse) GetResults() []*RenderOutput {
	if r == nil {
		return nil
	}
	return r.Results
}

func (r *RenderOutputResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RenderOutputResponse) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetResults sets the Results field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RenderOutputResponse) SetResults(results []*RenderOutput) {
	r.Results = results
	r.require(renderOutputResponseFieldResults)
}

func (r *RenderOutputResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RenderOutputResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RenderOutputResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RenderOutputResponse) MarshalJSON() ([]byte, error) {
	type embed RenderOutputResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *RenderOutputResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

var (
	renderedMessageBlockFieldType = big.NewInt(1 << 0)
	renderedMessageBlockFieldText = big.NewInt(1 << 1)
)

type RenderedMessageBlock struct {
	// The block type of the rendered message block.
	Type string `json:"type" url:"type"`
	// The block text of the rendered message block.
	Text string `json:"text" url:"text"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RenderedMessageBlock) GetType() string {
	if r == nil {
		return ""
	}
	return r.Type
}

func (r *RenderedMessageBlock) GetText() string {
	if r == nil {
		return ""
	}
	return r.Text
}

func (r *RenderedMessageBlock) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RenderedMessageBlock) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RenderedMessageBlock) SetType(type_ string) {
	r.Type = type_
	r.require(renderedMessageBlockFieldType)
}

// SetText sets the Text field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RenderedMessageBlock) SetText(text string) {
	r.Text = text
	r.require(renderedMessageBlockFieldText)
}

func (r *RenderedMessageBlock) UnmarshalJSON(data []byte) error {
	type unmarshaler RenderedMessageBlock
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RenderedMessageBlock(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RenderedMessageBlock) MarshalJSON() ([]byte, error) {
	type embed RenderedMessageBlock
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *RenderedMessageBlock) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

var (
	renderedMessageContentFieldHtml    = big.NewInt(1 << 0)
	renderedMessageContentFieldTitle   = big.NewInt(1 << 1)
	renderedMessageContentFieldBody    = big.NewInt(1 << 2)
	renderedMessageContentFieldSubject = big.NewInt(1 << 3)
	renderedMessageContentFieldText    = big.NewInt(1 << 4)
	renderedMessageContentFieldBlocks  = big.NewInt(1 << 5)
)

type RenderedMessageContent struct {
	// The html content of the rendered message.
	Html string `json:"html" url:"html"`
	// The title of the rendered message.
	Title string `json:"title" url:"title"`
	// The body of the rendered message.
	Body string `json:"body" url:"body"`
	// The subject of the rendered message.
	Subject string `json:"subject" url:"subject"`
	// The text of the rendered message.
	Text string `json:"text" url:"text"`
	// The blocks of the rendered message.
	Blocks []*RenderedMessageBlock `json:"blocks" url:"blocks"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RenderedMessageContent) GetHtml() string {
	if r == nil {
		return ""
	}
	return r.Html
}

func (r *RenderedMessageContent) GetTitle() string {
	if r == nil {
		return ""
	}
	return r.Title
}

func (r *RenderedMessageContent) GetBody() string {
	if r == nil {
		return ""
	}
	return r.Body
}

func (r *RenderedMessageContent) GetSubject() string {
	if r == nil {
		return ""
	}
	return r.Subject
}

func (r *RenderedMessageContent) GetText() string {
	if r == nil {
		return ""
	}
	return r.Text
}

func (r *RenderedMessageContent) GetBlocks() []*RenderedMessageBlock {
	if r == nil {
		return nil
	}
	return r.Blocks
}

func (r *RenderedMessageContent) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RenderedMessageContent) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetHtml sets the Html field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RenderedMessageContent) SetHtml(html string) {
	r.Html = html
	r.require(renderedMessageContentFieldHtml)
}

// SetTitle sets the Title field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RenderedMessageContent) SetTitle(title string) {
	r.Title = title
	r.require(renderedMessageContentFieldTitle)
}

// SetBody sets the Body field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RenderedMessageContent) SetBody(body string) {
	r.Body = body
	r.require(renderedMessageContentFieldBody)
}

// SetSubject sets the Subject field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RenderedMessageContent) SetSubject(subject string) {
	r.Subject = subject
	r.require(renderedMessageContentFieldSubject)
}

// SetText sets the Text field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RenderedMessageContent) SetText(text string) {
	r.Text = text
	r.require(renderedMessageContentFieldText)
}

// SetBlocks sets the Blocks field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RenderedMessageContent) SetBlocks(blocks []*RenderedMessageBlock) {
	r.Blocks = blocks
	r.require(renderedMessageContentFieldBlocks)
}

func (r *RenderedMessageContent) UnmarshalJSON(data []byte) error {
	type unmarshaler RenderedMessageContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RenderedMessageContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RenderedMessageContent) MarshalJSON() ([]byte, error) {
	type embed RenderedMessageContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *RenderedMessageContent) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
