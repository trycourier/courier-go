// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/trycourier/courier-go/v3/core"
)

type GetMessageHistoryRequest struct {
	// A supported Message History type that will filter the events returned.
	Type *string `json:"-"`
}

type ListMessagesRequest struct {
	// A boolean value that indicates whether archived messages should be included in the response.
	Archived *bool `json:"-"`
	// A unique identifier that allows for fetching the next set of message statuses.
	Cursor *string `json:"-"`
	// A unique identifier representing the event that was used to send the event.
	Event *string `json:"-"`
	// A unique identifier representing the list the message was sent to.
	List *string `json:"-"`
	// A unique identifier representing the message_id returned from either /send or /send/list.
	MessageId *string `json:"-"`
	// A unique identifier representing the notification that was used to send the event.
	Notification *string `json:"-"`
	// A unique identifier representing the recipient associated with the requested profile.
	Recipient *string `json:"-"`
	// An indicator of the current status of the message. Multiple status values can be passed in.
	Status *string `json:"-"`
	// A comma delimited list of 'tags'. Messages will be returned if they match any of the tags passed in.
	Tags *string `json:"-"`
	// The enqueued datetime of a message to filter out messages received before.
	EnqueuedAfter *string `json:"-"`
	// The unique identifier used to trace the requests
	TraceId *string `json:"-"`
}

type ListMessagesResponse struct {
	// Paging information for the result set.
	Paging *Paging `json:"paging,omitempty"`
	// An array of messages with their details.
	Results []*MessageDetails `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListMessagesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListMessagesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListMessagesResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListMessagesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type MessageDetails struct {
	// A unique identifier associated with the message you wish to retrieve (results from a send).
	Id string `json:"id"`
	// The current status of the message.
	Status MessageStatus `json:"status,omitempty"`
	// A UTC timestamp at which Courier received the message request. Stored as a millisecond representation of the Unix epoch.
	Enqueued int `json:"enqueued"`
	// A UTC timestamp at which Courier passed the message to the Integration provider. Stored as a millisecond representation of the Unix epoch.
	Sent int `json:"sent"`
	// A UTC timestamp at which the Integration provider delivered the message. Stored as a millisecond representation of the Unix epoch.
	Delivered int `json:"delivered"`
	// A UTC timestamp at which the recipient opened a message for the first time. Stored as a millisecond representation of the Unix epoch.
	Opened int `json:"opened"`
	// A UTC timestamp at which the recipient clicked on a tracked link for the first time. Stored as a millisecond representation of the Unix epoch.
	Clicked int `json:"clicked"`
	// A unique identifier associated with the recipient of the delivered message.
	Recipient string `json:"recipient"`
	// A unique identifier associated with the event of the delivered message.
	Event string `json:"event"`
	// A unique identifier associated with the notification of the delivered message.
	Notification string `json:"notification"`
	// A message describing the error that occurred.
	Error *string `json:"error,omitempty"`
	// The reason for the current status of the message.
	Reason *Reason `json:"reason,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MessageDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler MessageDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MessageDetails(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MessageDetails) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MessageHistoryResponse struct {
	Results []*MessageDetails `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MessageHistoryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MessageHistoryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MessageHistoryResponse(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MessageHistoryResponse) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type RenderOutputResponse struct {
	// An array of render output of a previously sent message.
	Results []*RenderOutput `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RenderOutputResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RenderOutputResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RenderOutputResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RenderOutputResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
