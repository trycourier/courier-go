// Code generated by Fern. DO NOT EDIT.

package audiences

import (
	context "context"
	v3 "github.com/trycourier/courier-go/v3"
	core "github.com/trycourier/courier-go/v3/core"
	internal "github.com/trycourier/courier-go/v3/internal"
	option "github.com/trycourier/courier-go/v3/option"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	if options.AuthorizationToken == "" {
		options.AuthorizationToken = os.Getenv("COURIER_AUTH_TOKEN")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Returns the specified audience by id.
func (c *Client) Get(
	ctx context.Context,
	// A unique identifier representing the audience_id
	audienceId string,
	opts ...option.RequestOption,
) (*v3.Audience, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		audienceId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Creates or updates audience.
func (c *Client) Update(
	ctx context.Context,
	// A unique identifier representing the audience id
	audienceId string,
	request *v3.AudienceUpdateParams,
	opts ...option.RequestOption,
) (*v3.AudienceUpdateResponse, error) {
	response, err := c.WithRawResponse.Update(
		ctx,
		audienceId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes the specified audience.
func (c *Client) Delete(
	ctx context.Context,
	// A unique identifier representing the audience id
	audienceId string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Delete(
		ctx,
		audienceId,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Get list of members of an audience.
func (c *Client) ListMembers(
	ctx context.Context,
	// A unique identifier representing the audience id
	audienceId string,
	request *v3.AudienceMembersListParams,
	opts ...option.RequestOption,
) (*v3.AudienceMemberListResponse, error) {
	response, err := c.WithRawResponse.ListMembers(
		ctx,
		audienceId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get the audiences associated with the authorization token.
func (c *Client) ListAudiences(
	ctx context.Context,
	request *v3.AudiencesListParams,
	opts ...option.RequestOption,
) (*v3.AudienceListResponse, error) {
	response, err := c.WithRawResponse.ListAudiences(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
