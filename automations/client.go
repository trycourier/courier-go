// Code generated by Fern. DO NOT EDIT.

package automations

import (
	context "context"
	v3 "github.com/trycourier/courier-go/v3"
	core "github.com/trycourier/courier-go/v3/core"
	internal "github.com/trycourier/courier-go/v3/internal"
	option "github.com/trycourier/courier-go/v3/option"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	if options.AuthorizationToken == "" {
		options.AuthorizationToken = os.Getenv("COURIER_AUTH_TOKEN")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

// Invoke an automation run from an automation template.
func (c *Client) InvokeAutomationTemplate(
	ctx context.Context,
	// A unique identifier representing the automation template to be invoked. This could be the Automation Template ID or the Automation Template Alias.
	templateId string,
	request *v3.AutomationInvokeParams,
	opts ...option.IdempotentRequestOption,
) (*v3.AutomationInvokeResponse, error) {
	response, err := c.WithRawResponse.InvokeAutomationTemplate(
		ctx,
		templateId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Invoke an ad hoc automation run. This endpoint accepts a JSON payload with a series of automation steps. For information about what steps are available, checkout the ad hoc automation guide [here](https://www.courier.com/docs/automations/steps/).
func (c *Client) InvokeAdHocAutomation(
	ctx context.Context,
	request *v3.AutomationAdHocInvokeParams,
	opts ...option.IdempotentRequestOption,
) (*v3.AutomationInvokeResponse, error) {
	response, err := c.WithRawResponse.InvokeAdHocAutomation(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
