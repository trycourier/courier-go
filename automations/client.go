// This file was auto-generated by Fern from our API Definition.

package automations

import (
	context "context"
	fmt "fmt"
	v3 "github.com/trycourier/courier-go/v3"
	core "github.com/trycourier/courier-go/v3/core"
	option "github.com/trycourier/courier-go/v3/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Invoke an automation run from an automation template.
func (c *Client) InvokeAutomationTemplate(
	ctx context.Context,
	// A unique identifier representing the automation template to be invoked. This could be the Automation Template ID or the Automation Template Alias.
	templateId string,
	request *v3.AutomationInvokeParams,
	opts ...option.IdempotentRequestOption,
) (*v3.AutomationInvokeResponse, error) {
	options := core.NewIdempotentRequestOptions(opts...)

	baseURL := "https://api.courier.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"automations/%v/invoke", templateId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *v3.AutomationInvokeResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Invoke an ad hoc automation run. This endpoint accepts a JSON payload with a series of automation steps. For information about what steps are available, checkout the ad hoc automation guide [here](https://www.courier.com/docs/automations/steps/).
func (c *Client) InvokeAdHocAutomation(
	ctx context.Context,
	request *v3.AutomationAdHocInvokeParams,
	opts ...option.IdempotentRequestOption,
) (*v3.AutomationInvokeResponse, error) {
	options := core.NewIdempotentRequestOptions(opts...)

	baseURL := "https://api.courier.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/" + "automations/invoke"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *v3.AutomationInvokeResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
