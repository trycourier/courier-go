// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	notificationListParamsFieldCursor = big.NewInt(1 << 0)
	notificationListParamsFieldNotes  = big.NewInt(1 << 1)
)

type NotificationListParams struct {
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Retrieve the notes from the Notification template settings.
	Notes *bool `json:"-" url:"notes,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (n *NotificationListParams) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationListParams) SetCursor(cursor *string) {
	n.Cursor = cursor
	n.require(notificationListParamsFieldCursor)
}

// SetNotes sets the Notes field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationListParams) SetNotes(notes *bool) {
	n.Notes = notes
	n.require(notificationListParamsFieldNotes)
}

var (
	submissionChecksReplaceParamsFieldChecks = big.NewInt(1 << 0)
)

type SubmissionChecksReplaceParams struct {
	Checks []*BaseCheck `json:"checks,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (s *SubmissionChecksReplaceParams) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetChecks sets the Checks field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SubmissionChecksReplaceParams) SetChecks(checks []*BaseCheck) {
	s.Checks = checks
	s.require(submissionChecksReplaceParamsFieldChecks)
}

var (
	baseCheckFieldId     = big.NewInt(1 << 0)
	baseCheckFieldStatus = big.NewInt(1 << 1)
)

type BaseCheck struct {
	Id     string      `json:"id" url:"id"`
	Status CheckStatus `json:"status" url:"status"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BaseCheck) GetId() string {
	if b == nil {
		return ""
	}
	return b.Id
}

func (b *BaseCheck) GetStatus() CheckStatus {
	if b == nil {
		return ""
	}
	return b.Status
}

func (b *BaseCheck) Type() string {
	return b.type_
}

func (b *BaseCheck) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BaseCheck) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseCheck) SetId(id string) {
	b.Id = id
	b.require(baseCheckFieldId)
}

// SetStatus sets the Status field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseCheck) SetStatus(status CheckStatus) {
	b.Status = status
	b.require(baseCheckFieldStatus)
}

func (b *BaseCheck) UnmarshalJSON(data []byte) error {
	type embed BaseCheck
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BaseCheck(unmarshaler.embed)
	if unmarshaler.Type != "custom" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", b, "custom", unmarshaler.Type)
	}
	b.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *b, "type")
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BaseCheck) MarshalJSON() ([]byte, error) {
	type embed BaseCheck
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*b),
		Type:  "custom",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BaseCheck) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BlockType string

const (
	BlockTypeAction   BlockType = "action"
	BlockTypeDivider  BlockType = "divider"
	BlockTypeImage    BlockType = "image"
	BlockTypeJsonnet  BlockType = "jsonnet"
	BlockTypeList     BlockType = "list"
	BlockTypeMarkdown BlockType = "markdown"
	BlockTypeQuote    BlockType = "quote"
	BlockTypeTemplate BlockType = "template"
	BlockTypeText     BlockType = "text"
)

func NewBlockTypeFromString(s string) (BlockType, error) {
	switch s {
	case "action":
		return BlockTypeAction, nil
	case "divider":
		return BlockTypeDivider, nil
	case "image":
		return BlockTypeImage, nil
	case "jsonnet":
		return BlockTypeJsonnet, nil
	case "list":
		return BlockTypeList, nil
	case "markdown":
		return BlockTypeMarkdown, nil
	case "quote":
		return BlockTypeQuote, nil
	case "template":
		return BlockTypeTemplate, nil
	case "text":
		return BlockTypeText, nil
	}
	var t BlockType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BlockType) Ptr() *BlockType {
	return &b
}

var (
	checkFieldId      = big.NewInt(1 << 0)
	checkFieldStatus  = big.NewInt(1 << 1)
	checkFieldUpdated = big.NewInt(1 << 2)
)

type Check struct {
	Id      string      `json:"id" url:"id"`
	Status  CheckStatus `json:"status" url:"status"`
	Updated int64       `json:"updated" url:"updated"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	type_          string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Check) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *Check) GetStatus() CheckStatus {
	if c == nil {
		return ""
	}
	return c.Status
}

func (c *Check) GetUpdated() int64 {
	if c == nil {
		return 0
	}
	return c.Updated
}

func (c *Check) Type() string {
	return c.type_
}

func (c *Check) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Check) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Check) SetId(id string) {
	c.Id = id
	c.require(checkFieldId)
}

// SetStatus sets the Status field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Check) SetStatus(status CheckStatus) {
	c.Status = status
	c.require(checkFieldStatus)
}

// SetUpdated sets the Updated field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Check) SetUpdated(updated int64) {
	c.Updated = updated
	c.require(checkFieldUpdated)
}

func (c *Check) UnmarshalJSON(data []byte) error {
	type embed Check
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = Check(unmarshaler.embed)
	if unmarshaler.Type != "custom" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "custom", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Check) MarshalJSON() ([]byte, error) {
	type embed Check
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "custom",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *Check) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CheckStatus string

const (
	CheckStatusResolved CheckStatus = "RESOLVED"
	CheckStatusFailed   CheckStatus = "FAILED"
	CheckStatusPending  CheckStatus = "PENDING"
)

func NewCheckStatusFromString(s string) (CheckStatus, error) {
	switch s {
	case "RESOLVED":
		return CheckStatusResolved, nil
	case "FAILED":
		return CheckStatusFailed, nil
	case "PENDING":
		return CheckStatusPending, nil
	}
	var t CheckStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CheckStatus) Ptr() *CheckStatus {
	return &c
}

var (
	messageRoutingFieldMethod   = big.NewInt(1 << 0)
	messageRoutingFieldChannels = big.NewInt(1 << 1)
)

type MessageRouting struct {
	Method   MessageRoutingMethod     `json:"method" url:"method"`
	Channels []*MessageRoutingChannel `json:"channels" url:"channels"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MessageRouting) GetMethod() MessageRoutingMethod {
	if m == nil {
		return ""
	}
	return m.Method
}

func (m *MessageRouting) GetChannels() []*MessageRoutingChannel {
	if m == nil {
		return nil
	}
	return m.Channels
}

func (m *MessageRouting) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MessageRouting) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetMethod sets the Method field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageRouting) SetMethod(method MessageRoutingMethod) {
	m.Method = method
	m.require(messageRoutingFieldMethod)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MessageRouting) SetChannels(channels []*MessageRoutingChannel) {
	m.Channels = channels
	m.require(messageRoutingFieldChannels)
}

func (m *MessageRouting) UnmarshalJSON(data []byte) error {
	type unmarshaler MessageRouting
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MessageRouting(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MessageRouting) MarshalJSON() ([]byte, error) {
	type embed MessageRouting
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MessageRouting) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MessageRoutingChannel struct {
	String         string
	MessageRouting *MessageRouting

	typ string
}

func (m *MessageRoutingChannel) GetString() string {
	if m == nil {
		return ""
	}
	return m.String
}

func (m *MessageRoutingChannel) GetMessageRouting() *MessageRouting {
	if m == nil {
		return nil
	}
	return m.MessageRouting
}

func (m *MessageRoutingChannel) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		m.typ = "String"
		m.String = valueString
		return nil
	}
	valueMessageRouting := new(MessageRouting)
	if err := json.Unmarshal(data, &valueMessageRouting); err == nil {
		m.typ = "MessageRouting"
		m.MessageRouting = valueMessageRouting
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, m)
}

func (m MessageRoutingChannel) MarshalJSON() ([]byte, error) {
	if m.typ == "String" || m.String != "" {
		return json.Marshal(m.String)
	}
	if m.typ == "MessageRouting" || m.MessageRouting != nil {
		return json.Marshal(m.MessageRouting)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", m)
}

type MessageRoutingChannelVisitor interface {
	VisitString(string) error
	VisitMessageRouting(*MessageRouting) error
}

func (m *MessageRoutingChannel) Accept(visitor MessageRoutingChannelVisitor) error {
	if m.typ == "String" || m.String != "" {
		return visitor.VisitString(m.String)
	}
	if m.typ == "MessageRouting" || m.MessageRouting != nil {
		return visitor.VisitMessageRouting(m.MessageRouting)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", m)
}

type MessageRoutingMethod string

const (
	MessageRoutingMethodAll    MessageRoutingMethod = "all"
	MessageRoutingMethodSingle MessageRoutingMethod = "single"
)

func NewMessageRoutingMethodFromString(s string) (MessageRoutingMethod, error) {
	switch s {
	case "all":
		return MessageRoutingMethodAll, nil
	case "single":
		return MessageRoutingMethodSingle, nil
	}
	var t MessageRoutingMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MessageRoutingMethod) Ptr() *MessageRoutingMethod {
	return &m
}

var (
	notificationFieldCreatedAt = big.NewInt(1 << 0)
	notificationFieldUpdatedAt = big.NewInt(1 << 1)
	notificationFieldId        = big.NewInt(1 << 2)
	notificationFieldRouting   = big.NewInt(1 << 3)
	notificationFieldTags      = big.NewInt(1 << 4)
	notificationFieldTitle     = big.NewInt(1 << 5)
	notificationFieldTopicId   = big.NewInt(1 << 6)
	notificationFieldNote      = big.NewInt(1 << 7)
)

type Notification struct {
	CreatedAt int64            `json:"created_at" url:"created_at"`
	UpdatedAt int64            `json:"updated_at" url:"updated_at"`
	Id        string           `json:"id" url:"id"`
	Routing   *MessageRouting  `json:"routing" url:"routing"`
	Tags      *NotificationTag `json:"tags,omitempty" url:"tags,omitempty"`
	Title     *string          `json:"title,omitempty" url:"title,omitempty"`
	TopicId   string           `json:"topic_id" url:"topic_id"`
	Note      string           `json:"note" url:"note"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *Notification) GetCreatedAt() int64 {
	if n == nil {
		return 0
	}
	return n.CreatedAt
}

func (n *Notification) GetUpdatedAt() int64 {
	if n == nil {
		return 0
	}
	return n.UpdatedAt
}

func (n *Notification) GetId() string {
	if n == nil {
		return ""
	}
	return n.Id
}

func (n *Notification) GetRouting() *MessageRouting {
	if n == nil {
		return nil
	}
	return n.Routing
}

func (n *Notification) GetTags() *NotificationTag {
	if n == nil {
		return nil
	}
	return n.Tags
}

func (n *Notification) GetTitle() *string {
	if n == nil {
		return nil
	}
	return n.Title
}

func (n *Notification) GetTopicId() string {
	if n == nil {
		return ""
	}
	return n.TopicId
}

func (n *Notification) GetNote() string {
	if n == nil {
		return ""
	}
	return n.Note
}

func (n *Notification) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *Notification) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *Notification) SetCreatedAt(createdAt int64) {
	n.CreatedAt = createdAt
	n.require(notificationFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *Notification) SetUpdatedAt(updatedAt int64) {
	n.UpdatedAt = updatedAt
	n.require(notificationFieldUpdatedAt)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *Notification) SetId(id string) {
	n.Id = id
	n.require(notificationFieldId)
}

// SetRouting sets the Routing field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *Notification) SetRouting(routing *MessageRouting) {
	n.Routing = routing
	n.require(notificationFieldRouting)
}

// SetTags sets the Tags field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *Notification) SetTags(tags *NotificationTag) {
	n.Tags = tags
	n.require(notificationFieldTags)
}

// SetTitle sets the Title field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *Notification) SetTitle(title *string) {
	n.Title = title
	n.require(notificationFieldTitle)
}

// SetTopicId sets the TopicId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *Notification) SetTopicId(topicId string) {
	n.TopicId = topicId
	n.require(notificationFieldTopicId)
}

// SetNote sets the Note field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *Notification) SetNote(note string) {
	n.Note = note
	n.require(notificationFieldNote)
}

func (n *Notification) UnmarshalJSON(data []byte) error {
	type unmarshaler Notification
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = Notification(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *Notification) MarshalJSON() ([]byte, error) {
	type embed Notification
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *Notification) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

var (
	notificationBlockFieldAlias    = big.NewInt(1 << 0)
	notificationBlockFieldContext  = big.NewInt(1 << 1)
	notificationBlockFieldId       = big.NewInt(1 << 2)
	notificationBlockFieldType     = big.NewInt(1 << 3)
	notificationBlockFieldContent  = big.NewInt(1 << 4)
	notificationBlockFieldLocales  = big.NewInt(1 << 5)
	notificationBlockFieldChecksum = big.NewInt(1 << 6)
)

type NotificationBlock struct {
	Alias    *string                         `json:"alias,omitempty" url:"alias,omitempty"`
	Context  *string                         `json:"context,omitempty" url:"context,omitempty"`
	Id       string                          `json:"id" url:"id"`
	Type     BlockType                       `json:"type" url:"type"`
	Content  *NotificationContent            `json:"content,omitempty" url:"content,omitempty"`
	Locales  map[string]*NotificationContent `json:"locales,omitempty" url:"locales,omitempty"`
	Checksum *string                         `json:"checksum,omitempty" url:"checksum,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationBlock) GetAlias() *string {
	if n == nil {
		return nil
	}
	return n.Alias
}

func (n *NotificationBlock) GetContext() *string {
	if n == nil {
		return nil
	}
	return n.Context
}

func (n *NotificationBlock) GetId() string {
	if n == nil {
		return ""
	}
	return n.Id
}

func (n *NotificationBlock) GetType() BlockType {
	if n == nil {
		return ""
	}
	return n.Type
}

func (n *NotificationBlock) GetContent() *NotificationContent {
	if n == nil {
		return nil
	}
	return n.Content
}

func (n *NotificationBlock) GetLocales() map[string]*NotificationContent {
	if n == nil {
		return nil
	}
	return n.Locales
}

func (n *NotificationBlock) GetChecksum() *string {
	if n == nil {
		return nil
	}
	return n.Checksum
}

func (n *NotificationBlock) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationBlock) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetAlias sets the Alias field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationBlock) SetAlias(alias *string) {
	n.Alias = alias
	n.require(notificationBlockFieldAlias)
}

// SetContext sets the Context field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationBlock) SetContext(context *string) {
	n.Context = context
	n.require(notificationBlockFieldContext)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationBlock) SetId(id string) {
	n.Id = id
	n.require(notificationBlockFieldId)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationBlock) SetType(type_ BlockType) {
	n.Type = type_
	n.require(notificationBlockFieldType)
}

// SetContent sets the Content field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationBlock) SetContent(content *NotificationContent) {
	n.Content = content
	n.require(notificationBlockFieldContent)
}

// SetLocales sets the Locales field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationBlock) SetLocales(locales map[string]*NotificationContent) {
	n.Locales = locales
	n.require(notificationBlockFieldLocales)
}

// SetChecksum sets the Checksum field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationBlock) SetChecksum(checksum *string) {
	n.Checksum = checksum
	n.require(notificationBlockFieldChecksum)
}

func (n *NotificationBlock) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationBlock
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationBlock(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationBlock) MarshalJSON() ([]byte, error) {
	type embed NotificationBlock
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NotificationBlock) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

var (
	notificationChannelFieldId       = big.NewInt(1 << 0)
	notificationChannelFieldType     = big.NewInt(1 << 1)
	notificationChannelFieldContent  = big.NewInt(1 << 2)
	notificationChannelFieldLocales  = big.NewInt(1 << 3)
	notificationChannelFieldChecksum = big.NewInt(1 << 4)
)

type NotificationChannel struct {
	Id       string                                 `json:"id" url:"id"`
	Type     *string                                `json:"type,omitempty" url:"type,omitempty"`
	Content  *NotificationChannelContent            `json:"content,omitempty" url:"content,omitempty"`
	Locales  map[string]*NotificationChannelContent `json:"locales,omitempty" url:"locales,omitempty"`
	Checksum *string                                `json:"checksum,omitempty" url:"checksum,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationChannel) GetId() string {
	if n == nil {
		return ""
	}
	return n.Id
}

func (n *NotificationChannel) GetType() *string {
	if n == nil {
		return nil
	}
	return n.Type
}

func (n *NotificationChannel) GetContent() *NotificationChannelContent {
	if n == nil {
		return nil
	}
	return n.Content
}

func (n *NotificationChannel) GetLocales() map[string]*NotificationChannelContent {
	if n == nil {
		return nil
	}
	return n.Locales
}

func (n *NotificationChannel) GetChecksum() *string {
	if n == nil {
		return nil
	}
	return n.Checksum
}

func (n *NotificationChannel) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationChannel) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationChannel) SetId(id string) {
	n.Id = id
	n.require(notificationChannelFieldId)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationChannel) SetType(type_ *string) {
	n.Type = type_
	n.require(notificationChannelFieldType)
}

// SetContent sets the Content field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationChannel) SetContent(content *NotificationChannelContent) {
	n.Content = content
	n.require(notificationChannelFieldContent)
}

// SetLocales sets the Locales field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationChannel) SetLocales(locales map[string]*NotificationChannelContent) {
	n.Locales = locales
	n.require(notificationChannelFieldLocales)
}

// SetChecksum sets the Checksum field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationChannel) SetChecksum(checksum *string) {
	n.Checksum = checksum
	n.require(notificationChannelFieldChecksum)
}

func (n *NotificationChannel) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationChannel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationChannel(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationChannel) MarshalJSON() ([]byte, error) {
	type embed NotificationChannel
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NotificationChannel) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

var (
	notificationChannelContentFieldSubject = big.NewInt(1 << 0)
	notificationChannelContentFieldTitle   = big.NewInt(1 << 1)
)

type NotificationChannelContent struct {
	Subject *string `json:"subject,omitempty" url:"subject,omitempty"`
	Title   *string `json:"title,omitempty" url:"title,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationChannelContent) GetSubject() *string {
	if n == nil {
		return nil
	}
	return n.Subject
}

func (n *NotificationChannelContent) GetTitle() *string {
	if n == nil {
		return nil
	}
	return n.Title
}

func (n *NotificationChannelContent) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationChannelContent) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetSubject sets the Subject field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationChannelContent) SetSubject(subject *string) {
	n.Subject = subject
	n.require(notificationChannelContentFieldSubject)
}

// SetTitle sets the Title field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationChannelContent) SetTitle(title *string) {
	n.Title = title
	n.require(notificationChannelContentFieldTitle)
}

func (n *NotificationChannelContent) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationChannelContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationChannelContent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationChannelContent) MarshalJSON() ([]byte, error) {
	type embed NotificationChannelContent
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NotificationChannelContent) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NotificationContent struct {
	String                       string
	NotificationContentHierarchy *NotificationContentHierarchy

	typ string
}

func (n *NotificationContent) GetString() string {
	if n == nil {
		return ""
	}
	return n.String
}

func (n *NotificationContent) GetNotificationContentHierarchy() *NotificationContentHierarchy {
	if n == nil {
		return nil
	}
	return n.NotificationContentHierarchy
}

func (n *NotificationContent) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		n.typ = "String"
		n.String = valueString
		return nil
	}
	valueNotificationContentHierarchy := new(NotificationContentHierarchy)
	if err := json.Unmarshal(data, &valueNotificationContentHierarchy); err == nil {
		n.typ = "NotificationContentHierarchy"
		n.NotificationContentHierarchy = valueNotificationContentHierarchy
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NotificationContent) MarshalJSON() ([]byte, error) {
	if n.typ == "String" || n.String != "" {
		return json.Marshal(n.String)
	}
	if n.typ == "NotificationContentHierarchy" || n.NotificationContentHierarchy != nil {
		return json.Marshal(n.NotificationContentHierarchy)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", n)
}

type NotificationContentVisitor interface {
	VisitString(string) error
	VisitNotificationContentHierarchy(*NotificationContentHierarchy) error
}

func (n *NotificationContent) Accept(visitor NotificationContentVisitor) error {
	if n.typ == "String" || n.String != "" {
		return visitor.VisitString(n.String)
	}
	if n.typ == "NotificationContentHierarchy" || n.NotificationContentHierarchy != nil {
		return visitor.VisitNotificationContentHierarchy(n.NotificationContentHierarchy)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", n)
}

var (
	notificationContentHierarchyFieldParent   = big.NewInt(1 << 0)
	notificationContentHierarchyFieldChildren = big.NewInt(1 << 1)
)

type NotificationContentHierarchy struct {
	Parent   *string `json:"parent,omitempty" url:"parent,omitempty"`
	Children *string `json:"children,omitempty" url:"children,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationContentHierarchy) GetParent() *string {
	if n == nil {
		return nil
	}
	return n.Parent
}

func (n *NotificationContentHierarchy) GetChildren() *string {
	if n == nil {
		return nil
	}
	return n.Children
}

func (n *NotificationContentHierarchy) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationContentHierarchy) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetParent sets the Parent field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationContentHierarchy) SetParent(parent *string) {
	n.Parent = parent
	n.require(notificationContentHierarchyFieldParent)
}

// SetChildren sets the Children field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationContentHierarchy) SetChildren(children *string) {
	n.Children = children
	n.require(notificationContentHierarchyFieldChildren)
}

func (n *NotificationContentHierarchy) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationContentHierarchy
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationContentHierarchy(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationContentHierarchy) MarshalJSON() ([]byte, error) {
	type embed NotificationContentHierarchy
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NotificationContentHierarchy) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

var (
	notificationGetContentResponseFieldBlocks   = big.NewInt(1 << 0)
	notificationGetContentResponseFieldChannels = big.NewInt(1 << 1)
	notificationGetContentResponseFieldChecksum = big.NewInt(1 << 2)
)

type NotificationGetContentResponse struct {
	Blocks   []*NotificationBlock   `json:"blocks,omitempty" url:"blocks,omitempty"`
	Channels []*NotificationChannel `json:"channels,omitempty" url:"channels,omitempty"`
	Checksum *string                `json:"checksum,omitempty" url:"checksum,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationGetContentResponse) GetBlocks() []*NotificationBlock {
	if n == nil {
		return nil
	}
	return n.Blocks
}

func (n *NotificationGetContentResponse) GetChannels() []*NotificationChannel {
	if n == nil {
		return nil
	}
	return n.Channels
}

func (n *NotificationGetContentResponse) GetChecksum() *string {
	if n == nil {
		return nil
	}
	return n.Checksum
}

func (n *NotificationGetContentResponse) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationGetContentResponse) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetBlocks sets the Blocks field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationGetContentResponse) SetBlocks(blocks []*NotificationBlock) {
	n.Blocks = blocks
	n.require(notificationGetContentResponseFieldBlocks)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationGetContentResponse) SetChannels(channels []*NotificationChannel) {
	n.Channels = channels
	n.require(notificationGetContentResponseFieldChannels)
}

// SetChecksum sets the Checksum field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationGetContentResponse) SetChecksum(checksum *string) {
	n.Checksum = checksum
	n.require(notificationGetContentResponseFieldChecksum)
}

func (n *NotificationGetContentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationGetContentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationGetContentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationGetContentResponse) MarshalJSON() ([]byte, error) {
	type embed NotificationGetContentResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NotificationGetContentResponse) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

var (
	notificationListResponseFieldPaging  = big.NewInt(1 << 0)
	notificationListResponseFieldResults = big.NewInt(1 << 1)
)

type NotificationListResponse struct {
	Paging  *Paging         `json:"paging" url:"paging"`
	Results []*Notification `json:"results" url:"results"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationListResponse) GetPaging() *Paging {
	if n == nil {
		return nil
	}
	return n.Paging
}

func (n *NotificationListResponse) GetResults() []*Notification {
	if n == nil {
		return nil
	}
	return n.Results
}

func (n *NotificationListResponse) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationListResponse) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetPaging sets the Paging field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationListResponse) SetPaging(paging *Paging) {
	n.Paging = paging
	n.require(notificationListResponseFieldPaging)
}

// SetResults sets the Results field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationListResponse) SetResults(results []*Notification) {
	n.Results = results
	n.require(notificationListResponseFieldResults)
}

func (n *NotificationListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationListResponse) MarshalJSON() ([]byte, error) {
	type embed NotificationListResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NotificationListResponse) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

var (
	notificationTagFieldData = big.NewInt(1 << 0)
)

type NotificationTag struct {
	Data []*NotificationTagData `json:"data" url:"data"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationTag) GetData() []*NotificationTagData {
	if n == nil {
		return nil
	}
	return n.Data
}

func (n *NotificationTag) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationTag) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationTag) SetData(data []*NotificationTagData) {
	n.Data = data
	n.require(notificationTagFieldData)
}

func (n *NotificationTag) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationTag
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationTag(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationTag) MarshalJSON() ([]byte, error) {
	type embed NotificationTag
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NotificationTag) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

var (
	notificationTagDataFieldId   = big.NewInt(1 << 0)
	notificationTagDataFieldName = big.NewInt(1 << 1)
)

type NotificationTagData struct {
	Id   string `json:"id" url:"id"`
	Name string `json:"name" url:"name"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationTagData) GetId() string {
	if n == nil {
		return ""
	}
	return n.Id
}

func (n *NotificationTagData) GetName() string {
	if n == nil {
		return ""
	}
	return n.Name
}

func (n *NotificationTagData) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationTagData) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationTagData) SetId(id string) {
	n.Id = id
	n.require(notificationTagDataFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NotificationTagData) SetName(name string) {
	n.Name = name
	n.require(notificationTagDataFieldName)
}

func (n *NotificationTagData) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationTagData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationTagData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationTagData) MarshalJSON() ([]byte, error) {
	type embed NotificationTagData
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NotificationTagData) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

var (
	submissionChecksGetResponseFieldChecks = big.NewInt(1 << 0)
)

type SubmissionChecksGetResponse struct {
	Checks []*Check `json:"checks" url:"checks"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SubmissionChecksGetResponse) GetChecks() []*Check {
	if s == nil {
		return nil
	}
	return s.Checks
}

func (s *SubmissionChecksGetResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubmissionChecksGetResponse) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetChecks sets the Checks field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SubmissionChecksGetResponse) SetChecks(checks []*Check) {
	s.Checks = checks
	s.require(submissionChecksGetResponseFieldChecks)
}

func (s *SubmissionChecksGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SubmissionChecksGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubmissionChecksGetResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubmissionChecksGetResponse) MarshalJSON() ([]byte, error) {
	type embed SubmissionChecksGetResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SubmissionChecksGetResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	submissionChecksReplaceResponseFieldChecks = big.NewInt(1 << 0)
)

type SubmissionChecksReplaceResponse struct {
	Checks []*Check `json:"checks" url:"checks"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SubmissionChecksReplaceResponse) GetChecks() []*Check {
	if s == nil {
		return nil
	}
	return s.Checks
}

func (s *SubmissionChecksReplaceResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubmissionChecksReplaceResponse) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetChecks sets the Checks field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SubmissionChecksReplaceResponse) SetChecks(checks []*Check) {
	s.Checks = checks
	s.require(submissionChecksReplaceResponseFieldChecks)
}

func (s *SubmissionChecksReplaceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SubmissionChecksReplaceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubmissionChecksReplaceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubmissionChecksReplaceResponse) MarshalJSON() ([]byte, error) {
	type embed SubmissionChecksReplaceResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SubmissionChecksReplaceResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
