// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/trycourier/courier-go/v3/core"
)

type NotificationListParams struct {
	Cursor *string `json:"-"`
}

type SubmissionChecksReplaceParams struct {
	Checks []*BaseCheck `json:"checks,omitempty"`
}

type BaseCheck struct {
	Id     string      `json:"id"`
	Status CheckStatus `json:"status,omitempty"`
	type_  string

	_rawJSON json.RawMessage
}

func (b *BaseCheck) Type() string {
	return b.type_
}

func (b *BaseCheck) UnmarshalJSON(data []byte) error {
	type unmarshaler BaseCheck
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BaseCheck(value)
	b.type_ = "custom"
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BaseCheck) MarshalJSON() ([]byte, error) {
	type embed BaseCheck
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*b),
		Type:  "custom",
	}
	return json.Marshal(marshaler)
}

func (b *BaseCheck) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type NotificationBlock struct {
	Alias    *string                         `json:"alias,omitempty"`
	Context  *string                         `json:"context,omitempty"`
	Id       string                          `json:"id"`
	Type     BlockType                       `json:"type,omitempty"`
	Content  *NotificationContent            `json:"content,omitempty"`
	Locales  map[string]*NotificationContent `json:"locales,omitempty"`
	Checksum *string                         `json:"checksum,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NotificationBlock) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationBlock
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationBlock(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationBlock) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NotificationChannel struct {
	Id       string                                 `json:"id"`
	Type     *string                                `json:"type,omitempty"`
	Content  *NotificationChannelContent            `json:"content,omitempty"`
	Locales  map[string]*NotificationChannelContent `json:"locales,omitempty"`
	Checksum *string                                `json:"checksum,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NotificationChannel) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationChannel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationChannel(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationChannel) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NotificationGetContentResponse struct {
	Blocks   []*NotificationBlock   `json:"blocks,omitempty"`
	Channels []*NotificationChannel `json:"channels,omitempty"`
	Checksum *string                `json:"checksum,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NotificationGetContentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationGetContentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationGetContentResponse(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationGetContentResponse) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NotificationListResponse struct {
	Paging  *Paging         `json:"paging,omitempty"`
	Results []*Notification `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NotificationListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationListResponse(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationListResponse) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type SubmissionChecksGetResponse struct {
	Checks []*Check `json:"checks,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SubmissionChecksGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SubmissionChecksGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubmissionChecksGetResponse(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubmissionChecksGetResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubmissionChecksReplaceResponse struct {
	Checks []*Check `json:"checks,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SubmissionChecksReplaceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SubmissionChecksReplaceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubmissionChecksReplaceResponse(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubmissionChecksReplaceResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type NotificationDraftUpdateVariationsParams struct {
	Blocks   []*NotificationBlock   `json:"blocks,omitempty"`
	Channels []*NotificationChannel `json:"channels,omitempty"`
}

type NotificationUpdateVariationsParams struct {
	Blocks   []*NotificationBlock   `json:"blocks,omitempty"`
	Channels []*NotificationChannel `json:"channels,omitempty"`
}
