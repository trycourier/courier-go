// Code generated by Fern. DO NOT EDIT.

package brands

import (
	context "context"
	v3 "github.com/trycourier/courier-go/v3"
	core "github.com/trycourier/courier-go/v3/core"
	internal "github.com/trycourier/courier-go/v3/internal"
	option "github.com/trycourier/courier-go/v3/option"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	if options.AuthorizationToken == "" {
		options.AuthorizationToken = os.Getenv("COURIER_AUTH_TOKEN")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

func (c *Client) Create(
	ctx context.Context,
	request *v3.BrandParameters,
	opts ...option.IdempotentRequestOption,
) (*v3.Brand, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Fetch a specific brand by brand ID.
func (c *Client) Get(
	ctx context.Context,
	// A unique identifier associated with the brand you wish to retrieve.
	brandId string,
	opts ...option.RequestOption,
) (*v3.Brand, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		brandId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get the list of brands.
func (c *Client) List(
	ctx context.Context,
	request *v3.ListBrandsRequest,
	opts ...option.RequestOption,
) (*v3.BrandsResponse, error) {
	response, err := c.WithRawResponse.List(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Delete a brand by brand ID.
func (c *Client) Delete(
	ctx context.Context,
	// A unique identifier associated with the brand you wish to retrieve.
	brandId string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Delete(
		ctx,
		brandId,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Replace an existing brand with the supplied values.
func (c *Client) Replace(
	ctx context.Context,
	// A unique identifier associated with the brand you wish to update.
	brandId string,
	request *v3.BrandUpdateParameters,
	opts ...option.RequestOption,
) (*v3.Brand, error) {
	response, err := c.WithRawResponse.Replace(
		ctx,
		brandId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
