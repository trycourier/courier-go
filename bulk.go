// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	bulkCreateJobParamsFieldMessage = big.NewInt(1 << 0)
)

type BulkCreateJobParams struct {
	Message *InboundBulkMessage `json:"message,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (b *BulkCreateJobParams) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkCreateJobParams) SetMessage(message *InboundBulkMessage) {
	b.Message = message
	b.require(bulkCreateJobParamsFieldMessage)
}

var (
	bulkGetUsersParamsFieldCursor = big.NewInt(1 << 0)
)

type BulkGetUsersParams struct {
	// A unique identifier that allows for fetching the next set of users added to the bulk job
	Cursor *string `json:"-" url:"cursor,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (b *BulkGetUsersParams) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkGetUsersParams) SetCursor(cursor *string) {
	b.Cursor = cursor
	b.require(bulkGetUsersParamsFieldCursor)
}

var (
	bulkCreateJobResponseFieldJobId = big.NewInt(1 << 0)
)

type BulkCreateJobResponse struct {
	JobId string `json:"jobId" url:"jobId"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BulkCreateJobResponse) GetJobId() string {
	if b == nil {
		return ""
	}
	return b.JobId
}

func (b *BulkCreateJobResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BulkCreateJobResponse) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetJobId sets the JobId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkCreateJobResponse) SetJobId(jobId string) {
	b.JobId = jobId
	b.require(bulkCreateJobResponseFieldJobId)
}

func (b *BulkCreateJobResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkCreateJobResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkCreateJobResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkCreateJobResponse) MarshalJSON() ([]byte, error) {
	type embed BulkCreateJobResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BulkCreateJobResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	bulkGetJobParamsFieldJobId = big.NewInt(1 << 0)
)

type BulkGetJobParams struct {
	JobId string `json:"jobId" url:"jobId"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BulkGetJobParams) GetJobId() string {
	if b == nil {
		return ""
	}
	return b.JobId
}

func (b *BulkGetJobParams) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BulkGetJobParams) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetJobId sets the JobId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkGetJobParams) SetJobId(jobId string) {
	b.JobId = jobId
	b.require(bulkGetJobParamsFieldJobId)
}

func (b *BulkGetJobParams) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkGetJobParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkGetJobParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkGetJobParams) MarshalJSON() ([]byte, error) {
	type embed BulkGetJobParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BulkGetJobParams) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	bulkGetJobResponseFieldJob = big.NewInt(1 << 0)
)

type BulkGetJobResponse struct {
	Job *JobDetails `json:"job" url:"job"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BulkGetJobResponse) GetJob() *JobDetails {
	if b == nil {
		return nil
	}
	return b.Job
}

func (b *BulkGetJobResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BulkGetJobResponse) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetJob sets the Job field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkGetJobResponse) SetJob(job *JobDetails) {
	b.Job = job
	b.require(bulkGetJobResponseFieldJob)
}

func (b *BulkGetJobResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkGetJobResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkGetJobResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkGetJobResponse) MarshalJSON() ([]byte, error) {
	type embed BulkGetJobResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BulkGetJobResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	bulkGetJobUsersParamsFieldJobId  = big.NewInt(1 << 0)
	bulkGetJobUsersParamsFieldCursor = big.NewInt(1 << 1)
)

type BulkGetJobUsersParams struct {
	JobId  string  `json:"jobId" url:"jobId"`
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BulkGetJobUsersParams) GetJobId() string {
	if b == nil {
		return ""
	}
	return b.JobId
}

func (b *BulkGetJobUsersParams) GetCursor() *string {
	if b == nil {
		return nil
	}
	return b.Cursor
}

func (b *BulkGetJobUsersParams) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BulkGetJobUsersParams) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetJobId sets the JobId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkGetJobUsersParams) SetJobId(jobId string) {
	b.JobId = jobId
	b.require(bulkGetJobUsersParamsFieldJobId)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkGetJobUsersParams) SetCursor(cursor *string) {
	b.Cursor = cursor
	b.require(bulkGetJobUsersParamsFieldCursor)
}

func (b *BulkGetJobUsersParams) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkGetJobUsersParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkGetJobUsersParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkGetJobUsersParams) MarshalJSON() ([]byte, error) {
	type embed BulkGetJobUsersParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BulkGetJobUsersParams) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	bulkGetJobUsersResponseFieldItems  = big.NewInt(1 << 0)
	bulkGetJobUsersResponseFieldPaging = big.NewInt(1 << 1)
)

type BulkGetJobUsersResponse struct {
	Items  []*BulkMessageUserResponse `json:"items" url:"items"`
	Paging *Paging                    `json:"paging" url:"paging"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BulkGetJobUsersResponse) GetItems() []*BulkMessageUserResponse {
	if b == nil {
		return nil
	}
	return b.Items
}

func (b *BulkGetJobUsersResponse) GetPaging() *Paging {
	if b == nil {
		return nil
	}
	return b.Paging
}

func (b *BulkGetJobUsersResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BulkGetJobUsersResponse) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetItems sets the Items field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkGetJobUsersResponse) SetItems(items []*BulkMessageUserResponse) {
	b.Items = items
	b.require(bulkGetJobUsersResponseFieldItems)
}

// SetPaging sets the Paging field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkGetJobUsersResponse) SetPaging(paging *Paging) {
	b.Paging = paging
	b.require(bulkGetJobUsersResponseFieldPaging)
}

func (b *BulkGetJobUsersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkGetJobUsersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkGetJobUsersResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkGetJobUsersResponse) MarshalJSON() ([]byte, error) {
	type embed BulkGetJobUsersResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BulkGetJobUsersResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	bulkIngestErrorFieldUser  = big.NewInt(1 << 0)
	bulkIngestErrorFieldError = big.NewInt(1 << 1)
)

type BulkIngestError struct {
	User  interface{} `json:"user" url:"user"`
	Error interface{} `json:"error" url:"error"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BulkIngestError) GetUser() interface{} {
	if b == nil {
		return nil
	}
	return b.User
}

func (b *BulkIngestError) GetError() interface{} {
	if b == nil {
		return nil
	}
	return b.Error
}

func (b *BulkIngestError) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BulkIngestError) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetUser sets the User field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkIngestError) SetUser(user interface{}) {
	b.User = user
	b.require(bulkIngestErrorFieldUser)
}

// SetError sets the Error field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkIngestError) SetError(error_ interface{}) {
	b.Error = error_
	b.require(bulkIngestErrorFieldError)
}

func (b *BulkIngestError) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkIngestError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkIngestError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkIngestError) MarshalJSON() ([]byte, error) {
	type embed BulkIngestError
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BulkIngestError) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	bulkIngestUsersParamsFieldUsers = big.NewInt(1 << 0)
)

type BulkIngestUsersParams struct {
	Users []*InboundBulkMessageUser `json:"users" url:"users"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BulkIngestUsersParams) GetUsers() []*InboundBulkMessageUser {
	if b == nil {
		return nil
	}
	return b.Users
}

func (b *BulkIngestUsersParams) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BulkIngestUsersParams) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetUsers sets the Users field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkIngestUsersParams) SetUsers(users []*InboundBulkMessageUser) {
	b.Users = users
	b.require(bulkIngestUsersParamsFieldUsers)
}

func (b *BulkIngestUsersParams) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkIngestUsersParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkIngestUsersParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkIngestUsersParams) MarshalJSON() ([]byte, error) {
	type embed BulkIngestUsersParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BulkIngestUsersParams) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	bulkIngestUsersResponseFieldTotal  = big.NewInt(1 << 0)
	bulkIngestUsersResponseFieldErrors = big.NewInt(1 << 1)
)

type BulkIngestUsersResponse struct {
	Total  int                `json:"total" url:"total"`
	Errors []*BulkIngestError `json:"errors,omitempty" url:"errors,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BulkIngestUsersResponse) GetTotal() int {
	if b == nil {
		return 0
	}
	return b.Total
}

func (b *BulkIngestUsersResponse) GetErrors() []*BulkIngestError {
	if b == nil {
		return nil
	}
	return b.Errors
}

func (b *BulkIngestUsersResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BulkIngestUsersResponse) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetTotal sets the Total field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkIngestUsersResponse) SetTotal(total int) {
	b.Total = total
	b.require(bulkIngestUsersResponseFieldTotal)
}

// SetErrors sets the Errors field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkIngestUsersResponse) SetErrors(errors []*BulkIngestError) {
	b.Errors = errors
	b.require(bulkIngestUsersResponseFieldErrors)
}

func (b *BulkIngestUsersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkIngestUsersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkIngestUsersResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkIngestUsersResponse) MarshalJSON() ([]byte, error) {
	type embed BulkIngestUsersResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BulkIngestUsersResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BulkJobStatus string

const (
	BulkJobStatusCreated    BulkJobStatus = "CREATED"
	BulkJobStatusProcessing BulkJobStatus = "PROCESSING"
	BulkJobStatusCompleted  BulkJobStatus = "COMPLETED"
	BulkJobStatusError      BulkJobStatus = "ERROR"
)

func NewBulkJobStatusFromString(s string) (BulkJobStatus, error) {
	switch s {
	case "CREATED":
		return BulkJobStatusCreated, nil
	case "PROCESSING":
		return BulkJobStatusProcessing, nil
	case "COMPLETED":
		return BulkJobStatusCompleted, nil
	case "ERROR":
		return BulkJobStatusError, nil
	}
	var t BulkJobStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BulkJobStatus) Ptr() *BulkJobStatus {
	return &b
}

type BulkJobUserStatus string

const (
	BulkJobUserStatusPending  BulkJobUserStatus = "PENDING"
	BulkJobUserStatusEnqueued BulkJobUserStatus = "ENQUEUED"
	BulkJobUserStatusError    BulkJobUserStatus = "ERROR"
)

func NewBulkJobUserStatusFromString(s string) (BulkJobUserStatus, error) {
	switch s {
	case "PENDING":
		return BulkJobUserStatusPending, nil
	case "ENQUEUED":
		return BulkJobUserStatusEnqueued, nil
	case "ERROR":
		return BulkJobUserStatusError, nil
	}
	var t BulkJobUserStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BulkJobUserStatus) Ptr() *BulkJobUserStatus {
	return &b
}

var (
	bulkMessageUserResponseFieldPreferences = big.NewInt(1 << 0)
	bulkMessageUserResponseFieldProfile     = big.NewInt(1 << 1)
	bulkMessageUserResponseFieldRecipient   = big.NewInt(1 << 2)
	bulkMessageUserResponseFieldData        = big.NewInt(1 << 3)
	bulkMessageUserResponseFieldTo          = big.NewInt(1 << 4)
	bulkMessageUserResponseFieldStatus      = big.NewInt(1 << 5)
	bulkMessageUserResponseFieldMessageId   = big.NewInt(1 << 6)
)

type BulkMessageUserResponse struct {
	Preferences *RecipientPreferences `json:"preferences,omitempty" url:"preferences,omitempty"`
	Profile     interface{}           `json:"profile,omitempty" url:"profile,omitempty"`
	Recipient   *string               `json:"recipient,omitempty" url:"recipient,omitempty"`
	Data        interface{}           `json:"data,omitempty" url:"data,omitempty"`
	To          *UserRecipient        `json:"to,omitempty" url:"to,omitempty"`
	Status      BulkJobUserStatus     `json:"status" url:"status"`
	MessageId   *string               `json:"messageId,omitempty" url:"messageId,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BulkMessageUserResponse) GetPreferences() *RecipientPreferences {
	if b == nil {
		return nil
	}
	return b.Preferences
}

func (b *BulkMessageUserResponse) GetProfile() interface{} {
	if b == nil {
		return nil
	}
	return b.Profile
}

func (b *BulkMessageUserResponse) GetRecipient() *string {
	if b == nil {
		return nil
	}
	return b.Recipient
}

func (b *BulkMessageUserResponse) GetData() interface{} {
	if b == nil {
		return nil
	}
	return b.Data
}

func (b *BulkMessageUserResponse) GetTo() *UserRecipient {
	if b == nil {
		return nil
	}
	return b.To
}

func (b *BulkMessageUserResponse) GetStatus() BulkJobUserStatus {
	if b == nil {
		return ""
	}
	return b.Status
}

func (b *BulkMessageUserResponse) GetMessageId() *string {
	if b == nil {
		return nil
	}
	return b.MessageId
}

func (b *BulkMessageUserResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BulkMessageUserResponse) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkMessageUserResponse) SetPreferences(preferences *RecipientPreferences) {
	b.Preferences = preferences
	b.require(bulkMessageUserResponseFieldPreferences)
}

// SetProfile sets the Profile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkMessageUserResponse) SetProfile(profile interface{}) {
	b.Profile = profile
	b.require(bulkMessageUserResponseFieldProfile)
}

// SetRecipient sets the Recipient field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkMessageUserResponse) SetRecipient(recipient *string) {
	b.Recipient = recipient
	b.require(bulkMessageUserResponseFieldRecipient)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkMessageUserResponse) SetData(data interface{}) {
	b.Data = data
	b.require(bulkMessageUserResponseFieldData)
}

// SetTo sets the To field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkMessageUserResponse) SetTo(to *UserRecipient) {
	b.To = to
	b.require(bulkMessageUserResponseFieldTo)
}

// SetStatus sets the Status field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkMessageUserResponse) SetStatus(status BulkJobUserStatus) {
	b.Status = status
	b.require(bulkMessageUserResponseFieldStatus)
}

// SetMessageId sets the MessageId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BulkMessageUserResponse) SetMessageId(messageId *string) {
	b.MessageId = messageId
	b.require(bulkMessageUserResponseFieldMessageId)
}

func (b *BulkMessageUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkMessageUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkMessageUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkMessageUserResponse) MarshalJSON() ([]byte, error) {
	type embed BulkMessageUserResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BulkMessageUserResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The message property has the following primary top-level properties. They define the destination and content of the message.
// Additional advanced configuration fields [are defined below](https://www.courier.com/docs/reference/send/message/#other-message-properties).
var (
	inboundBulkContentMessageFieldData        = big.NewInt(1 << 0)
	inboundBulkContentMessageFieldBrandId     = big.NewInt(1 << 1)
	inboundBulkContentMessageFieldChannels    = big.NewInt(1 << 2)
	inboundBulkContentMessageFieldContext     = big.NewInt(1 << 3)
	inboundBulkContentMessageFieldMetadata    = big.NewInt(1 << 4)
	inboundBulkContentMessageFieldPreferences = big.NewInt(1 << 5)
	inboundBulkContentMessageFieldProviders   = big.NewInt(1 << 6)
	inboundBulkContentMessageFieldRouting     = big.NewInt(1 << 7)
	inboundBulkContentMessageFieldTimeout     = big.NewInt(1 << 8)
	inboundBulkContentMessageFieldDelay       = big.NewInt(1 << 9)
	inboundBulkContentMessageFieldExpiry      = big.NewInt(1 << 10)
	inboundBulkContentMessageFieldContent     = big.NewInt(1 << 11)
)

type InboundBulkContentMessage struct {
	// An arbitrary object that includes any data you want to pass to the message.
	// The data will populate the corresponding template or elements variables.
	Data    *MessageData `json:"data,omitempty" url:"data,omitempty"`
	BrandId *string      `json:"brand_id,omitempty" url:"brand_id,omitempty"`
	// "Define run-time configuration for one or more channels. If you don't specify channels, the default configuration for each channel will be used. Valid ChannelId's are: email, sms, push, inbox, direct_message, banner, and webhook."
	Channels *MessageChannels `json:"channels,omitempty" url:"channels,omitempty"`
	// Context to load with this recipient. Will override any context set on message.context.
	Context *MessageContext `json:"context,omitempty" url:"context,omitempty"`
	// Metadata such as utm tracking attached with the notification through this channel.
	Metadata    *MessageMetadata    `json:"metadata,omitempty" url:"metadata,omitempty"`
	Preferences *MessagePreferences `json:"preferences,omitempty" url:"preferences,omitempty"`
	// An object whose keys are valid provider identifiers which map to an object.
	Providers *MessageProviders `json:"providers,omitempty" url:"providers,omitempty"`
	Routing   *Routing          `json:"routing,omitempty" url:"routing,omitempty"`
	// Time in ms to attempt the channel before failing over to the next available channel.
	Timeout *Timeout `json:"timeout,omitempty" url:"timeout,omitempty"`
	// Defines the time to wait before delivering the message. You can specify one of the following options. Duration with the number of milliseconds to delay. Until with an ISO 8601 timestamp that specifies when it should be delivered. Until with an OpenStreetMap opening_hours-like format that specifies the [Delivery Window](https://www.courier.com/docs/platform/sending/failover/#delivery-window) (e.g., 'Mo-Fr 08:00-18:00pm')
	Delay *Delay `json:"delay,omitempty" url:"delay,omitempty"`
	// "Expiry allows you to set an absolute or relative time in which a message expires.
	// Note: This is only valid for the Courier Inbox channel as of 12-08-2022."
	Expiry *Expiry `json:"expiry,omitempty" url:"expiry,omitempty"`
	// Describes the content of the message in a way that will work for email, push,
	// chat, or any channel. Either this or template must be specified.
	Content *Content `json:"content" url:"content"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InboundBulkContentMessage) GetData() *MessageData {
	if i == nil {
		return nil
	}
	return i.Data
}

func (i *InboundBulkContentMessage) GetBrandId() *string {
	if i == nil {
		return nil
	}
	return i.BrandId
}

func (i *InboundBulkContentMessage) GetChannels() *MessageChannels {
	if i == nil {
		return nil
	}
	return i.Channels
}

func (i *InboundBulkContentMessage) GetContext() *MessageContext {
	if i == nil {
		return nil
	}
	return i.Context
}

func (i *InboundBulkContentMessage) GetMetadata() *MessageMetadata {
	if i == nil {
		return nil
	}
	return i.Metadata
}

func (i *InboundBulkContentMessage) GetPreferences() *MessagePreferences {
	if i == nil {
		return nil
	}
	return i.Preferences
}

func (i *InboundBulkContentMessage) GetProviders() *MessageProviders {
	if i == nil {
		return nil
	}
	return i.Providers
}

func (i *InboundBulkContentMessage) GetRouting() *Routing {
	if i == nil {
		return nil
	}
	return i.Routing
}

func (i *InboundBulkContentMessage) GetTimeout() *Timeout {
	if i == nil {
		return nil
	}
	return i.Timeout
}

func (i *InboundBulkContentMessage) GetDelay() *Delay {
	if i == nil {
		return nil
	}
	return i.Delay
}

func (i *InboundBulkContentMessage) GetExpiry() *Expiry {
	if i == nil {
		return nil
	}
	return i.Expiry
}

func (i *InboundBulkContentMessage) GetContent() *Content {
	if i == nil {
		return nil
	}
	return i.Content
}

func (i *InboundBulkContentMessage) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InboundBulkContentMessage) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkContentMessage) SetData(data *MessageData) {
	i.Data = data
	i.require(inboundBulkContentMessageFieldData)
}

// SetBrandId sets the BrandId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkContentMessage) SetBrandId(brandId *string) {
	i.BrandId = brandId
	i.require(inboundBulkContentMessageFieldBrandId)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkContentMessage) SetChannels(channels *MessageChannels) {
	i.Channels = channels
	i.require(inboundBulkContentMessageFieldChannels)
}

// SetContext sets the Context field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkContentMessage) SetContext(context *MessageContext) {
	i.Context = context
	i.require(inboundBulkContentMessageFieldContext)
}

// SetMetadata sets the Metadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkContentMessage) SetMetadata(metadata *MessageMetadata) {
	i.Metadata = metadata
	i.require(inboundBulkContentMessageFieldMetadata)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkContentMessage) SetPreferences(preferences *MessagePreferences) {
	i.Preferences = preferences
	i.require(inboundBulkContentMessageFieldPreferences)
}

// SetProviders sets the Providers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkContentMessage) SetProviders(providers *MessageProviders) {
	i.Providers = providers
	i.require(inboundBulkContentMessageFieldProviders)
}

// SetRouting sets the Routing field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkContentMessage) SetRouting(routing *Routing) {
	i.Routing = routing
	i.require(inboundBulkContentMessageFieldRouting)
}

// SetTimeout sets the Timeout field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkContentMessage) SetTimeout(timeout *Timeout) {
	i.Timeout = timeout
	i.require(inboundBulkContentMessageFieldTimeout)
}

// SetDelay sets the Delay field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkContentMessage) SetDelay(delay *Delay) {
	i.Delay = delay
	i.require(inboundBulkContentMessageFieldDelay)
}

// SetExpiry sets the Expiry field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkContentMessage) SetExpiry(expiry *Expiry) {
	i.Expiry = expiry
	i.require(inboundBulkContentMessageFieldExpiry)
}

// SetContent sets the Content field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkContentMessage) SetContent(content *Content) {
	i.Content = content
	i.require(inboundBulkContentMessageFieldContent)
}

func (i *InboundBulkContentMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler InboundBulkContentMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InboundBulkContentMessage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InboundBulkContentMessage) MarshalJSON() ([]byte, error) {
	type embed InboundBulkContentMessage
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InboundBulkContentMessage) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

var (
	inboundBulkMessageFieldBrand    = big.NewInt(1 << 0)
	inboundBulkMessageFieldData     = big.NewInt(1 << 1)
	inboundBulkMessageFieldEvent    = big.NewInt(1 << 2)
	inboundBulkMessageFieldLocale   = big.NewInt(1 << 3)
	inboundBulkMessageFieldOverride = big.NewInt(1 << 4)
	inboundBulkMessageFieldMessage  = big.NewInt(1 << 5)
)

type InboundBulkMessage struct {
	// A unique identifier that represents the brand that should be used
	// for rendering the notification.
	Brand *string `json:"brand,omitempty" url:"brand,omitempty"`
	// JSON that includes any data you want to pass to a message template.
	// The data will populate the corresponding template variables.
	Data   map[string]interface{} `json:"data,omitempty" url:"data,omitempty"`
	Event  *string                `json:"event,omitempty" url:"event,omitempty"`
	Locale map[string]interface{} `json:"locale,omitempty" url:"locale,omitempty"`
	// JSON that is merged into the request sent by Courier to the provider
	// to override properties or to gain access to features in the provider
	// API that are not natively supported by Courier.
	Override interface{}           `json:"override,omitempty" url:"override,omitempty"`
	Message  *InboundBulkMessageV2 `json:"message,omitempty" url:"message,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InboundBulkMessage) GetBrand() *string {
	if i == nil {
		return nil
	}
	return i.Brand
}

func (i *InboundBulkMessage) GetData() map[string]interface{} {
	if i == nil {
		return nil
	}
	return i.Data
}

func (i *InboundBulkMessage) GetEvent() *string {
	if i == nil {
		return nil
	}
	return i.Event
}

func (i *InboundBulkMessage) GetLocale() map[string]interface{} {
	if i == nil {
		return nil
	}
	return i.Locale
}

func (i *InboundBulkMessage) GetOverride() interface{} {
	if i == nil {
		return nil
	}
	return i.Override
}

func (i *InboundBulkMessage) GetMessage() *InboundBulkMessageV2 {
	if i == nil {
		return nil
	}
	return i.Message
}

func (i *InboundBulkMessage) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InboundBulkMessage) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetBrand sets the Brand field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessage) SetBrand(brand *string) {
	i.Brand = brand
	i.require(inboundBulkMessageFieldBrand)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessage) SetData(data map[string]interface{}) {
	i.Data = data
	i.require(inboundBulkMessageFieldData)
}

// SetEvent sets the Event field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessage) SetEvent(event *string) {
	i.Event = event
	i.require(inboundBulkMessageFieldEvent)
}

// SetLocale sets the Locale field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessage) SetLocale(locale map[string]interface{}) {
	i.Locale = locale
	i.require(inboundBulkMessageFieldLocale)
}

// SetOverride sets the Override field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessage) SetOverride(override interface{}) {
	i.Override = override
	i.require(inboundBulkMessageFieldOverride)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessage) SetMessage(message *InboundBulkMessageV2) {
	i.Message = message
	i.require(inboundBulkMessageFieldMessage)
}

func (i *InboundBulkMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler InboundBulkMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InboundBulkMessage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InboundBulkMessage) MarshalJSON() ([]byte, error) {
	type embed InboundBulkMessage
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InboundBulkMessage) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

var (
	inboundBulkMessageUserFieldPreferences = big.NewInt(1 << 0)
	inboundBulkMessageUserFieldProfile     = big.NewInt(1 << 1)
	inboundBulkMessageUserFieldRecipient   = big.NewInt(1 << 2)
	inboundBulkMessageUserFieldData        = big.NewInt(1 << 3)
	inboundBulkMessageUserFieldTo          = big.NewInt(1 << 4)
)

type InboundBulkMessageUser struct {
	Preferences *RecipientPreferences `json:"preferences,omitempty" url:"preferences,omitempty"`
	Profile     interface{}           `json:"profile,omitempty" url:"profile,omitempty"`
	Recipient   *string               `json:"recipient,omitempty" url:"recipient,omitempty"`
	Data        interface{}           `json:"data,omitempty" url:"data,omitempty"`
	To          *UserRecipient        `json:"to,omitempty" url:"to,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InboundBulkMessageUser) GetPreferences() *RecipientPreferences {
	if i == nil {
		return nil
	}
	return i.Preferences
}

func (i *InboundBulkMessageUser) GetProfile() interface{} {
	if i == nil {
		return nil
	}
	return i.Profile
}

func (i *InboundBulkMessageUser) GetRecipient() *string {
	if i == nil {
		return nil
	}
	return i.Recipient
}

func (i *InboundBulkMessageUser) GetData() interface{} {
	if i == nil {
		return nil
	}
	return i.Data
}

func (i *InboundBulkMessageUser) GetTo() *UserRecipient {
	if i == nil {
		return nil
	}
	return i.To
}

func (i *InboundBulkMessageUser) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InboundBulkMessageUser) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessageUser) SetPreferences(preferences *RecipientPreferences) {
	i.Preferences = preferences
	i.require(inboundBulkMessageUserFieldPreferences)
}

// SetProfile sets the Profile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessageUser) SetProfile(profile interface{}) {
	i.Profile = profile
	i.require(inboundBulkMessageUserFieldProfile)
}

// SetRecipient sets the Recipient field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessageUser) SetRecipient(recipient *string) {
	i.Recipient = recipient
	i.require(inboundBulkMessageUserFieldRecipient)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessageUser) SetData(data interface{}) {
	i.Data = data
	i.require(inboundBulkMessageUserFieldData)
}

// SetTo sets the To field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessageUser) SetTo(to *UserRecipient) {
	i.To = to
	i.require(inboundBulkMessageUserFieldTo)
}

func (i *InboundBulkMessageUser) UnmarshalJSON(data []byte) error {
	type unmarshaler InboundBulkMessageUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InboundBulkMessageUser(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InboundBulkMessageUser) MarshalJSON() ([]byte, error) {
	type embed InboundBulkMessageUser
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InboundBulkMessageUser) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

var (
	inboundBulkMessageV1FieldBrand    = big.NewInt(1 << 0)
	inboundBulkMessageV1FieldData     = big.NewInt(1 << 1)
	inboundBulkMessageV1FieldEvent    = big.NewInt(1 << 2)
	inboundBulkMessageV1FieldLocale   = big.NewInt(1 << 3)
	inboundBulkMessageV1FieldOverride = big.NewInt(1 << 4)
)

type InboundBulkMessageV1 struct {
	// A unique identifier that represents the brand that should be used
	// for rendering the notification.
	Brand *string `json:"brand,omitempty" url:"brand,omitempty"`
	// JSON that includes any data you want to pass to a message template.
	// The data will populate the corresponding template variables.
	Data   map[string]interface{} `json:"data,omitempty" url:"data,omitempty"`
	Event  *string                `json:"event,omitempty" url:"event,omitempty"`
	Locale map[string]interface{} `json:"locale,omitempty" url:"locale,omitempty"`
	// JSON that is merged into the request sent by Courier to the provider
	// to override properties or to gain access to features in the provider
	// API that are not natively supported by Courier.
	Override interface{} `json:"override,omitempty" url:"override,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InboundBulkMessageV1) GetBrand() *string {
	if i == nil {
		return nil
	}
	return i.Brand
}

func (i *InboundBulkMessageV1) GetData() map[string]interface{} {
	if i == nil {
		return nil
	}
	return i.Data
}

func (i *InboundBulkMessageV1) GetEvent() *string {
	if i == nil {
		return nil
	}
	return i.Event
}

func (i *InboundBulkMessageV1) GetLocale() map[string]interface{} {
	if i == nil {
		return nil
	}
	return i.Locale
}

func (i *InboundBulkMessageV1) GetOverride() interface{} {
	if i == nil {
		return nil
	}
	return i.Override
}

func (i *InboundBulkMessageV1) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InboundBulkMessageV1) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetBrand sets the Brand field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessageV1) SetBrand(brand *string) {
	i.Brand = brand
	i.require(inboundBulkMessageV1FieldBrand)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessageV1) SetData(data map[string]interface{}) {
	i.Data = data
	i.require(inboundBulkMessageV1FieldData)
}

// SetEvent sets the Event field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessageV1) SetEvent(event *string) {
	i.Event = event
	i.require(inboundBulkMessageV1FieldEvent)
}

// SetLocale sets the Locale field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessageV1) SetLocale(locale map[string]interface{}) {
	i.Locale = locale
	i.require(inboundBulkMessageV1FieldLocale)
}

// SetOverride sets the Override field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkMessageV1) SetOverride(override interface{}) {
	i.Override = override
	i.require(inboundBulkMessageV1FieldOverride)
}

func (i *InboundBulkMessageV1) UnmarshalJSON(data []byte) error {
	type unmarshaler InboundBulkMessageV1
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InboundBulkMessageV1(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InboundBulkMessageV1) MarshalJSON() ([]byte, error) {
	type embed InboundBulkMessageV1
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InboundBulkMessageV1) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type InboundBulkMessageV2 struct {
	// Describes the content of the message in a way that will
	// work for email, push, chat, or any channel.
	InboundBulkTemplateMessage *InboundBulkTemplateMessage
	// A template for a type of message that can be sent more than once.
	// For example, you might create an "Appointment Reminder" Notification or
	// “Reset Password” Notifications.
	InboundBulkContentMessage *InboundBulkContentMessage

	typ string
}

func (i *InboundBulkMessageV2) GetInboundBulkTemplateMessage() *InboundBulkTemplateMessage {
	if i == nil {
		return nil
	}
	return i.InboundBulkTemplateMessage
}

func (i *InboundBulkMessageV2) GetInboundBulkContentMessage() *InboundBulkContentMessage {
	if i == nil {
		return nil
	}
	return i.InboundBulkContentMessage
}

func (i *InboundBulkMessageV2) UnmarshalJSON(data []byte) error {
	valueInboundBulkTemplateMessage := new(InboundBulkTemplateMessage)
	if err := json.Unmarshal(data, &valueInboundBulkTemplateMessage); err == nil {
		i.typ = "InboundBulkTemplateMessage"
		i.InboundBulkTemplateMessage = valueInboundBulkTemplateMessage
		return nil
	}
	valueInboundBulkContentMessage := new(InboundBulkContentMessage)
	if err := json.Unmarshal(data, &valueInboundBulkContentMessage); err == nil {
		i.typ = "InboundBulkContentMessage"
		i.InboundBulkContentMessage = valueInboundBulkContentMessage
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i InboundBulkMessageV2) MarshalJSON() ([]byte, error) {
	if i.typ == "InboundBulkTemplateMessage" || i.InboundBulkTemplateMessage != nil {
		return json.Marshal(i.InboundBulkTemplateMessage)
	}
	if i.typ == "InboundBulkContentMessage" || i.InboundBulkContentMessage != nil {
		return json.Marshal(i.InboundBulkContentMessage)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type InboundBulkMessageV2Visitor interface {
	VisitInboundBulkTemplateMessage(*InboundBulkTemplateMessage) error
	VisitInboundBulkContentMessage(*InboundBulkContentMessage) error
}

func (i *InboundBulkMessageV2) Accept(visitor InboundBulkMessageV2Visitor) error {
	if i.typ == "InboundBulkTemplateMessage" || i.InboundBulkTemplateMessage != nil {
		return visitor.VisitInboundBulkTemplateMessage(i.InboundBulkTemplateMessage)
	}
	if i.typ == "InboundBulkContentMessage" || i.InboundBulkContentMessage != nil {
		return visitor.VisitInboundBulkContentMessage(i.InboundBulkContentMessage)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

var (
	inboundBulkTemplateMessageFieldData        = big.NewInt(1 << 0)
	inboundBulkTemplateMessageFieldBrandId     = big.NewInt(1 << 1)
	inboundBulkTemplateMessageFieldChannels    = big.NewInt(1 << 2)
	inboundBulkTemplateMessageFieldContext     = big.NewInt(1 << 3)
	inboundBulkTemplateMessageFieldMetadata    = big.NewInt(1 << 4)
	inboundBulkTemplateMessageFieldPreferences = big.NewInt(1 << 5)
	inboundBulkTemplateMessageFieldProviders   = big.NewInt(1 << 6)
	inboundBulkTemplateMessageFieldRouting     = big.NewInt(1 << 7)
	inboundBulkTemplateMessageFieldTimeout     = big.NewInt(1 << 8)
	inboundBulkTemplateMessageFieldDelay       = big.NewInt(1 << 9)
	inboundBulkTemplateMessageFieldExpiry      = big.NewInt(1 << 10)
	inboundBulkTemplateMessageFieldTemplate    = big.NewInt(1 << 11)
)

type InboundBulkTemplateMessage struct {
	// An arbitrary object that includes any data you want to pass to the message.
	// The data will populate the corresponding template or elements variables.
	Data    *MessageData `json:"data,omitempty" url:"data,omitempty"`
	BrandId *string      `json:"brand_id,omitempty" url:"brand_id,omitempty"`
	// "Define run-time configuration for one or more channels. If you don't specify channels, the default configuration for each channel will be used. Valid ChannelId's are: email, sms, push, inbox, direct_message, banner, and webhook."
	Channels *MessageChannels `json:"channels,omitempty" url:"channels,omitempty"`
	// Context to load with this recipient. Will override any context set on message.context.
	Context *MessageContext `json:"context,omitempty" url:"context,omitempty"`
	// Metadata such as utm tracking attached with the notification through this channel.
	Metadata    *MessageMetadata    `json:"metadata,omitempty" url:"metadata,omitempty"`
	Preferences *MessagePreferences `json:"preferences,omitempty" url:"preferences,omitempty"`
	// An object whose keys are valid provider identifiers which map to an object.
	Providers *MessageProviders `json:"providers,omitempty" url:"providers,omitempty"`
	Routing   *Routing          `json:"routing,omitempty" url:"routing,omitempty"`
	// Time in ms to attempt the channel before failing over to the next available channel.
	Timeout *Timeout `json:"timeout,omitempty" url:"timeout,omitempty"`
	// Defines the time to wait before delivering the message. You can specify one of the following options. Duration with the number of milliseconds to delay. Until with an ISO 8601 timestamp that specifies when it should be delivered. Until with an OpenStreetMap opening_hours-like format that specifies the [Delivery Window](https://www.courier.com/docs/platform/sending/failover/#delivery-window) (e.g., 'Mo-Fr 08:00-18:00pm')
	Delay *Delay `json:"delay,omitempty" url:"delay,omitempty"`
	// "Expiry allows you to set an absolute or relative time in which a message expires.
	// Note: This is only valid for the Courier Inbox channel as of 12-08-2022."
	Expiry *Expiry `json:"expiry,omitempty" url:"expiry,omitempty"`
	// The id of the notification template to be rendered and sent to the recipient(s).
	// This field or the content field must be supplied.
	Template string `json:"template" url:"template"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InboundBulkTemplateMessage) GetData() *MessageData {
	if i == nil {
		return nil
	}
	return i.Data
}

func (i *InboundBulkTemplateMessage) GetBrandId() *string {
	if i == nil {
		return nil
	}
	return i.BrandId
}

func (i *InboundBulkTemplateMessage) GetChannels() *MessageChannels {
	if i == nil {
		return nil
	}
	return i.Channels
}

func (i *InboundBulkTemplateMessage) GetContext() *MessageContext {
	if i == nil {
		return nil
	}
	return i.Context
}

func (i *InboundBulkTemplateMessage) GetMetadata() *MessageMetadata {
	if i == nil {
		return nil
	}
	return i.Metadata
}

func (i *InboundBulkTemplateMessage) GetPreferences() *MessagePreferences {
	if i == nil {
		return nil
	}
	return i.Preferences
}

func (i *InboundBulkTemplateMessage) GetProviders() *MessageProviders {
	if i == nil {
		return nil
	}
	return i.Providers
}

func (i *InboundBulkTemplateMessage) GetRouting() *Routing {
	if i == nil {
		return nil
	}
	return i.Routing
}

func (i *InboundBulkTemplateMessage) GetTimeout() *Timeout {
	if i == nil {
		return nil
	}
	return i.Timeout
}

func (i *InboundBulkTemplateMessage) GetDelay() *Delay {
	if i == nil {
		return nil
	}
	return i.Delay
}

func (i *InboundBulkTemplateMessage) GetExpiry() *Expiry {
	if i == nil {
		return nil
	}
	return i.Expiry
}

func (i *InboundBulkTemplateMessage) GetTemplate() string {
	if i == nil {
		return ""
	}
	return i.Template
}

func (i *InboundBulkTemplateMessage) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InboundBulkTemplateMessage) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkTemplateMessage) SetData(data *MessageData) {
	i.Data = data
	i.require(inboundBulkTemplateMessageFieldData)
}

// SetBrandId sets the BrandId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkTemplateMessage) SetBrandId(brandId *string) {
	i.BrandId = brandId
	i.require(inboundBulkTemplateMessageFieldBrandId)
}

// SetChannels sets the Channels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkTemplateMessage) SetChannels(channels *MessageChannels) {
	i.Channels = channels
	i.require(inboundBulkTemplateMessageFieldChannels)
}

// SetContext sets the Context field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkTemplateMessage) SetContext(context *MessageContext) {
	i.Context = context
	i.require(inboundBulkTemplateMessageFieldContext)
}

// SetMetadata sets the Metadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkTemplateMessage) SetMetadata(metadata *MessageMetadata) {
	i.Metadata = metadata
	i.require(inboundBulkTemplateMessageFieldMetadata)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkTemplateMessage) SetPreferences(preferences *MessagePreferences) {
	i.Preferences = preferences
	i.require(inboundBulkTemplateMessageFieldPreferences)
}

// SetProviders sets the Providers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkTemplateMessage) SetProviders(providers *MessageProviders) {
	i.Providers = providers
	i.require(inboundBulkTemplateMessageFieldProviders)
}

// SetRouting sets the Routing field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkTemplateMessage) SetRouting(routing *Routing) {
	i.Routing = routing
	i.require(inboundBulkTemplateMessageFieldRouting)
}

// SetTimeout sets the Timeout field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkTemplateMessage) SetTimeout(timeout *Timeout) {
	i.Timeout = timeout
	i.require(inboundBulkTemplateMessageFieldTimeout)
}

// SetDelay sets the Delay field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkTemplateMessage) SetDelay(delay *Delay) {
	i.Delay = delay
	i.require(inboundBulkTemplateMessageFieldDelay)
}

// SetExpiry sets the Expiry field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkTemplateMessage) SetExpiry(expiry *Expiry) {
	i.Expiry = expiry
	i.require(inboundBulkTemplateMessageFieldExpiry)
}

// SetTemplate sets the Template field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InboundBulkTemplateMessage) SetTemplate(template string) {
	i.Template = template
	i.require(inboundBulkTemplateMessageFieldTemplate)
}

func (i *InboundBulkTemplateMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler InboundBulkTemplateMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InboundBulkTemplateMessage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InboundBulkTemplateMessage) MarshalJSON() ([]byte, error) {
	type embed InboundBulkTemplateMessage
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InboundBulkTemplateMessage) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

var (
	jobDetailsFieldDefinition = big.NewInt(1 << 0)
	jobDetailsFieldEnqueued   = big.NewInt(1 << 1)
	jobDetailsFieldFailures   = big.NewInt(1 << 2)
	jobDetailsFieldReceived   = big.NewInt(1 << 3)
	jobDetailsFieldStatus     = big.NewInt(1 << 4)
)

type JobDetails struct {
	Definition *InboundBulkMessage `json:"definition" url:"definition"`
	Enqueued   int                 `json:"enqueued" url:"enqueued"`
	Failures   int                 `json:"failures" url:"failures"`
	Received   int                 `json:"received" url:"received"`
	Status     BulkJobStatus       `json:"status" url:"status"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (j *JobDetails) GetDefinition() *InboundBulkMessage {
	if j == nil {
		return nil
	}
	return j.Definition
}

func (j *JobDetails) GetEnqueued() int {
	if j == nil {
		return 0
	}
	return j.Enqueued
}

func (j *JobDetails) GetFailures() int {
	if j == nil {
		return 0
	}
	return j.Failures
}

func (j *JobDetails) GetReceived() int {
	if j == nil {
		return 0
	}
	return j.Received
}

func (j *JobDetails) GetStatus() BulkJobStatus {
	if j == nil {
		return ""
	}
	return j.Status
}

func (j *JobDetails) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JobDetails) require(field *big.Int) {
	if j.explicitFields == nil {
		j.explicitFields = big.NewInt(0)
	}
	j.explicitFields.Or(j.explicitFields, field)
}

// SetDefinition sets the Definition field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JobDetails) SetDefinition(definition *InboundBulkMessage) {
	j.Definition = definition
	j.require(jobDetailsFieldDefinition)
}

// SetEnqueued sets the Enqueued field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JobDetails) SetEnqueued(enqueued int) {
	j.Enqueued = enqueued
	j.require(jobDetailsFieldEnqueued)
}

// SetFailures sets the Failures field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JobDetails) SetFailures(failures int) {
	j.Failures = failures
	j.require(jobDetailsFieldFailures)
}

// SetReceived sets the Received field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JobDetails) SetReceived(received int) {
	j.Received = received
	j.require(jobDetailsFieldReceived)
}

// SetStatus sets the Status field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JobDetails) SetStatus(status BulkJobStatus) {
	j.Status = status
	j.require(jobDetailsFieldStatus)
}

func (j *JobDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler JobDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JobDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	j.rawJSON = json.RawMessage(data)
	return nil
}

func (j *JobDetails) MarshalJSON() ([]byte, error) {
	type embed JobDetails
	var marshaler = struct {
		embed
	}{
		embed: embed(*j),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, j.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (j *JobDetails) String() string {
	if len(j.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(j.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}
