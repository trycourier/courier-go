// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trycourier/courier-go/v3/internal"
	big "math/big"
)

var (
	addSubscribersToListFieldRecipients = big.NewInt(1 << 0)
)

type AddSubscribersToList struct {
	Recipients []*PutSubscriptionsRecipient `json:"recipients,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (a *AddSubscribersToList) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetRecipients sets the Recipients field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AddSubscribersToList) SetRecipients(recipients []*PutSubscriptionsRecipient) {
	a.Recipients = recipients
	a.require(addSubscribersToListFieldRecipients)
}

var (
	getSubscriptionForListRequestFieldCursor = big.NewInt(1 << 0)
)

type GetSubscriptionForListRequest struct {
	// A unique identifier that allows for fetching the next set of list subscriptions
	Cursor *string `json:"-" url:"cursor,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetSubscriptionForListRequest) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetSubscriptionForListRequest) SetCursor(cursor *string) {
	g.Cursor = cursor
	g.require(getSubscriptionForListRequestFieldCursor)
}

var (
	getAllListsRequestFieldCursor  = big.NewInt(1 << 0)
	getAllListsRequestFieldPattern = big.NewInt(1 << 1)
)

type GetAllListsRequest struct {
	// A unique identifier that allows for fetching the next page of lists.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// "A pattern used to filter the list items returned. Pattern types supported: exact match on `list_id` or a pattern of one or more pattern parts. you may replace a part with either: `*` to match all parts in that position, or `**` to signify a wildcard `endsWith` pattern match."
	Pattern *string `json:"-" url:"pattern,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetAllListsRequest) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetCursor sets the Cursor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetAllListsRequest) SetCursor(cursor *string) {
	g.Cursor = cursor
	g.require(getAllListsRequestFieldCursor)
}

// SetPattern sets the Pattern field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetAllListsRequest) SetPattern(pattern *string) {
	g.Pattern = pattern
	g.require(getAllListsRequestFieldPattern)
}

type RestoreListRequest struct {

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (r *RestoreListRequest) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

var (
	subscribeUserToListRequestFieldPreferences = big.NewInt(1 << 0)
)

type SubscribeUserToListRequest struct {
	Preferences *RecipientPreferences `json:"preferences,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (s *SubscribeUserToListRequest) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SubscribeUserToListRequest) SetPreferences(preferences *RecipientPreferences) {
	s.Preferences = preferences
	s.require(subscribeUserToListRequestFieldPreferences)
}

var (
	listFieldId      = big.NewInt(1 << 0)
	listFieldName    = big.NewInt(1 << 1)
	listFieldCreated = big.NewInt(1 << 2)
	listFieldUpdated = big.NewInt(1 << 3)
)

type List struct {
	Id      string  `json:"id" url:"id"`
	Name    string  `json:"name" url:"name"`
	Created *string `json:"created,omitempty" url:"created,omitempty"`
	Updated *string `json:"updated,omitempty" url:"updated,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *List) GetId() string {
	if l == nil {
		return ""
	}
	return l.Id
}

func (l *List) GetName() string {
	if l == nil {
		return ""
	}
	return l.Name
}

func (l *List) GetCreated() *string {
	if l == nil {
		return nil
	}
	return l.Created
}

func (l *List) GetUpdated() *string {
	if l == nil {
		return nil
	}
	return l.Updated
}

func (l *List) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *List) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *List) SetId(id string) {
	l.Id = id
	l.require(listFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *List) SetName(name string) {
	l.Name = name
	l.require(listFieldName)
}

// SetCreated sets the Created field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *List) SetCreated(created *string) {
	l.Created = created
	l.require(listFieldCreated)
}

// SetUpdated sets the Updated field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *List) SetUpdated(updated *string) {
	l.Updated = updated
	l.require(listFieldUpdated)
}

func (l *List) UnmarshalJSON(data []byte) error {
	type unmarshaler List
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = List(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *List) MarshalJSON() ([]byte, error) {
	type embed List
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *List) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	listGetAllResponseFieldPaging = big.NewInt(1 << 0)
	listGetAllResponseFieldItems  = big.NewInt(1 << 1)
)

type ListGetAllResponse struct {
	Paging *Paging `json:"paging" url:"paging"`
	Items  []*List `json:"items" url:"items"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListGetAllResponse) GetPaging() *Paging {
	if l == nil {
		return nil
	}
	return l.Paging
}

func (l *ListGetAllResponse) GetItems() []*List {
	if l == nil {
		return nil
	}
	return l.Items
}

func (l *ListGetAllResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListGetAllResponse) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetPaging sets the Paging field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListGetAllResponse) SetPaging(paging *Paging) {
	l.Paging = paging
	l.require(listGetAllResponseFieldPaging)
}

// SetItems sets the Items field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListGetAllResponse) SetItems(items []*List) {
	l.Items = items
	l.require(listGetAllResponseFieldItems)
}

func (l *ListGetAllResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListGetAllResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListGetAllResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListGetAllResponse) MarshalJSON() ([]byte, error) {
	type embed ListGetAllResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListGetAllResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	listGetSubscriptionsResponseFieldPaging = big.NewInt(1 << 0)
	listGetSubscriptionsResponseFieldItems  = big.NewInt(1 << 1)
)

type ListGetSubscriptionsResponse struct {
	Paging *Paging                      `json:"paging" url:"paging"`
	Items  []*ListSubscriptionRecipient `json:"items" url:"items"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListGetSubscriptionsResponse) GetPaging() *Paging {
	if l == nil {
		return nil
	}
	return l.Paging
}

func (l *ListGetSubscriptionsResponse) GetItems() []*ListSubscriptionRecipient {
	if l == nil {
		return nil
	}
	return l.Items
}

func (l *ListGetSubscriptionsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListGetSubscriptionsResponse) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetPaging sets the Paging field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListGetSubscriptionsResponse) SetPaging(paging *Paging) {
	l.Paging = paging
	l.require(listGetSubscriptionsResponseFieldPaging)
}

// SetItems sets the Items field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListGetSubscriptionsResponse) SetItems(items []*ListSubscriptionRecipient) {
	l.Items = items
	l.require(listGetSubscriptionsResponseFieldItems)
}

func (l *ListGetSubscriptionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListGetSubscriptionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListGetSubscriptionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListGetSubscriptionsResponse) MarshalJSON() ([]byte, error) {
	type embed ListGetSubscriptionsResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListGetSubscriptionsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	listPutParamsFieldName        = big.NewInt(1 << 0)
	listPutParamsFieldPreferences = big.NewInt(1 << 1)
)

type ListPutParams struct {
	Name        string                `json:"name" url:"name"`
	Preferences *RecipientPreferences `json:"preferences,omitempty" url:"preferences,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListPutParams) GetName() string {
	if l == nil {
		return ""
	}
	return l.Name
}

func (l *ListPutParams) GetPreferences() *RecipientPreferences {
	if l == nil {
		return nil
	}
	return l.Preferences
}

func (l *ListPutParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPutParams) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListPutParams) SetName(name string) {
	l.Name = name
	l.require(listPutParamsFieldName)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListPutParams) SetPreferences(preferences *RecipientPreferences) {
	l.Preferences = preferences
	l.require(listPutParamsFieldPreferences)
}

func (l *ListPutParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPutParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPutParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPutParams) MarshalJSON() ([]byte, error) {
	type embed ListPutParams
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListPutParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	listSubscriptionRecipientFieldRecipientId = big.NewInt(1 << 0)
	listSubscriptionRecipientFieldCreated     = big.NewInt(1 << 1)
	listSubscriptionRecipientFieldPreferences = big.NewInt(1 << 2)
)

type ListSubscriptionRecipient struct {
	RecipientId string                `json:"recipientId" url:"recipientId"`
	Created     *string               `json:"created,omitempty" url:"created,omitempty"`
	Preferences *RecipientPreferences `json:"preferences,omitempty" url:"preferences,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListSubscriptionRecipient) GetRecipientId() string {
	if l == nil {
		return ""
	}
	return l.RecipientId
}

func (l *ListSubscriptionRecipient) GetCreated() *string {
	if l == nil {
		return nil
	}
	return l.Created
}

func (l *ListSubscriptionRecipient) GetPreferences() *RecipientPreferences {
	if l == nil {
		return nil
	}
	return l.Preferences
}

func (l *ListSubscriptionRecipient) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListSubscriptionRecipient) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetRecipientId sets the RecipientId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListSubscriptionRecipient) SetRecipientId(recipientId string) {
	l.RecipientId = recipientId
	l.require(listSubscriptionRecipientFieldRecipientId)
}

// SetCreated sets the Created field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListSubscriptionRecipient) SetCreated(created *string) {
	l.Created = created
	l.require(listSubscriptionRecipientFieldCreated)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListSubscriptionRecipient) SetPreferences(preferences *RecipientPreferences) {
	l.Preferences = preferences
	l.require(listSubscriptionRecipientFieldPreferences)
}

func (l *ListSubscriptionRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler ListSubscriptionRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListSubscriptionRecipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListSubscriptionRecipient) MarshalJSON() ([]byte, error) {
	type embed ListSubscriptionRecipient
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *ListSubscriptionRecipient) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	putSubscriptionsRecipientFieldRecipientId = big.NewInt(1 << 0)
	putSubscriptionsRecipientFieldPreferences = big.NewInt(1 << 1)
)

type PutSubscriptionsRecipient struct {
	RecipientId string                `json:"recipientId" url:"recipientId"`
	Preferences *RecipientPreferences `json:"preferences,omitempty" url:"preferences,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PutSubscriptionsRecipient) GetRecipientId() string {
	if p == nil {
		return ""
	}
	return p.RecipientId
}

func (p *PutSubscriptionsRecipient) GetPreferences() *RecipientPreferences {
	if p == nil {
		return nil
	}
	return p.Preferences
}

func (p *PutSubscriptionsRecipient) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PutSubscriptionsRecipient) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetRecipientId sets the RecipientId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PutSubscriptionsRecipient) SetRecipientId(recipientId string) {
	p.RecipientId = recipientId
	p.require(putSubscriptionsRecipientFieldRecipientId)
}

// SetPreferences sets the Preferences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PutSubscriptionsRecipient) SetPreferences(preferences *RecipientPreferences) {
	p.Preferences = preferences
	p.require(putSubscriptionsRecipientFieldPreferences)
}

func (p *PutSubscriptionsRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler PutSubscriptionsRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PutSubscriptionsRecipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PutSubscriptionsRecipient) MarshalJSON() ([]byte, error) {
	type embed PutSubscriptionsRecipient
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PutSubscriptionsRecipient) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	subscribeUsersToListRequestFieldRecipients = big.NewInt(1 << 0)
)

type SubscribeUsersToListRequest struct {
	Recipients []*PutSubscriptionsRecipient `json:"recipients,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (s *SubscribeUsersToListRequest) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetRecipients sets the Recipients field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SubscribeUsersToListRequest) SetRecipients(recipients []*PutSubscriptionsRecipient) {
	s.Recipients = recipients
	s.require(subscribeUsersToListRequestFieldRecipients)
}
